 
# Auto-generated Flask Service

from flask import Flask, request, jsonify

import copy

import sys

import functools

import fileinput

import sphinx.application

import argparse

import rdflib.plugins.sparql.parser as parser

import orjson

import datetime as py_datetime

import csv

import parserutils

import rdflib.plugins.sparql.processor

import keyword

import uuid

import _pytest

import berkeleydb

import pluggy

import calendar

import unicodedata

import zipfile

import configparser

import posixpath

import runpy

import html

import simplejson as json

import tempfile

import black

import email.utils

import io

import nturl2path

import graph_tool as gt

import util

import json

import base64

import urllib.error

import random

import contextlib

import networkx as nx

import http

import operator as pyop

import types

import unittest

import warnings

import typing as t

import xsd_datetime

import isodate

import codecs

import threading

import builtins

import rdflib.plugins.sparql.parser as p

import time

import difflib

import rdflib.plugins.sparql.evaluate

import keys

import re

import os.path

import math

import data

import collections

import shared

import rdflib.plugins.sparql.operators

import rdflib.plugins.sparql.algebra as algebra

import _pytest.config.argparsing

import socket

import binascii

import rdflib.namespace

import rdflib.namespace as namespace

import typing_extensions as te

import typing

import email

import pprint

import mimetypes

import rdflib.plugin as plugin

import rdflib.graph

import urllib.request

import pytest

import dataclasses

import namespace

import rdflib.exceptions as exceptions

import notation3

import rdflib.compare

import python_minifier

import xml.etree.ElementTree as xml_etree

import getopt

import decimal

import test

import itertools

import pyparsing

import strip_hints

import datetime

import pickle

import importlib

import rdflib.plugin

import sphinx

import tarfile

import utils

import textwrap

import rdflib.term

import xml.dom.minidom

import rdflib.extras.cmdlineutils

import rdflib.plugins.sparql.parser

import html5rdf

import rdflib.plugins.sparql

import pkgutil

import networkx

import rdflib.query

import inspect

import shutil

import logging

import rdflib.util

import subprocess

import os

import graph_tool

import typing_extensions

import fractions

import operator

import pathlib

import http.client

import traceback

import string

import xml

import enum

import email.message

import urllib

import hashlib

import rdflib

import test.data

import rdflib.collection

import optparse


app = Flask(__name__)

# Function Definitions

def make_unquote_correctness_pairs():
    """Auto-generated function: make_unquote_correctness_pairs"""
    try:
        response = rdflib.make_unquote_correctness_pairs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ntriples_unquote_validate(input):
    """Auto-generated function: ntriples_unquote_validate"""
    try:
        response = rdflib.ntriples_unquote_validate(input)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ntriples_unquote(input):
    """Auto-generated function: ntriples_unquote"""
    try:
        response = rdflib.ntriples_unquote(input)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_unquote_correctness_tests(selectors):
    """Auto-generated function: make_unquote_correctness_tests"""
    try:
        response = rdflib.make_unquote_correctness_tests(selectors)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unquote_correctness(unquoter_key, quoted, unquoted):
    """Auto-generated function: test_unquote_correctness"""
    try:
        response = rdflib.test_unquote_correctness(unquoter_key, quoted, unquoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_correctness(format, quoted, unquoted):
    """Auto-generated function: test_parse_correctness"""
    try:
        response = rdflib.test_parse_correctness(format, quoted, unquoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_pname_escaping(format, char, escaped):
    """Auto-generated function: test_pname_escaping"""
    try:
        response = rdflib.test_pname_escaping(format, char, escaped)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_roundtrip(format, char):
    """Auto-generated function: test_serialize_roundtrip"""
    try:
        response = rdflib.test_serialize_roundtrip(format, char)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty():
    """Auto-generated function: test_empty"""
    try:
        response = rdflib.test_empty()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_repeat_triples():
    """Auto-generated function: test_repeat_triples"""
    try:
        response = rdflib.test_repeat_triples()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_same_subject():
    """Auto-generated function: test_same_subject"""
    try:
        response = rdflib.test_same_subject()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remember_namespace():
    """Auto-generated function: test_remember_namespace"""
    try:
        response = rdflib.test_remember_namespace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_qname_syntax():
    """Auto-generated function: test_graph_qname_syntax"""
    try:
        response = rdflib.test_graph_qname_syntax()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_uri_syntax():
    """Auto-generated function: test_graph_uri_syntax"""
    try:
        response = rdflib.test_graph_uri_syntax()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_blank_graph_identifier():
    """Auto-generated function: test_blank_graph_identifier"""
    try:
        response = rdflib.test_blank_graph_identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_parsing():
    """Auto-generated function: test_graph_parsing"""
    try:
        response = rdflib.test_graph_parsing()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_round_trips():
    """Auto-generated function: test_round_trips"""
    try:
        response = rdflib.test_round_trips()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_default_graph_serializes_without_name():
    """Auto-generated function: test_default_graph_serializes_without_name"""
    try:
        response = rdflib.test_default_graph_serializes_without_name()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prefixes():
    """Auto-generated function: test_prefixes"""
    try:
        response = rdflib.test_prefixes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_2154():
    """Auto-generated function: test_issue_2154"""
    try:
        response = rdflib.test_issue_2154()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.TestUtilTermConvert.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_list2set():
    """Auto-generated function: test_util_list2set"""
    try:
        response = rdflib.TestUtilMisc.test_util_list2set()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_uniq():
    """Auto-generated function: test_util_uniq"""
    try:
        response = rdflib.TestUtilMisc.test_util_uniq()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_date_time_tisnoneandnotz():
    """Auto-generated function: test_util_date_time_tisnoneandnotz"""
    try:
        response = rdflib.TestUtilDateTime.test_util_date_time_tisnoneandnotz()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_date_time_tisnonebuttz():
    """Auto-generated function: test_util_date_time_tisnonebuttz"""
    try:
        response = rdflib.TestUtilDateTime.test_util_date_time_tisnonebuttz()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_date_time_tistime():
    """Auto-generated function: test_util_date_time_tistime"""
    try:
        response = rdflib.TestUtilDateTime.test_util_date_time_tistime()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_date_time_tistimewithtz():
    """Auto-generated function: test_util_date_time_tistimewithtz"""
    try:
        response = rdflib.TestUtilDateTime.test_util_date_time_tistimewithtz()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_parse_date_time():
    """Auto-generated function: test_util_parse_date_time"""
    try:
        response = rdflib.TestUtilDateTime.test_util_parse_date_time()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_parse_date_timewithtz():
    """Auto-generated function: test_util_parse_date_timewithtz"""
    try:
        response = rdflib.TestUtilDateTime.test_util_parse_date_timewithtz()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_date_timewithtoutz():
    """Auto-generated function: test_util_date_timewithtoutz"""
    try:
        response = rdflib.TestUtilDateTime.test_util_date_timewithtoutz()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_to_term_sisNone():
    """Auto-generated function: test_util_to_term_sisNone"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_to_term_sisNone()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_to_term_sisstr():
    """Auto-generated function: test_util_to_term_sisstr"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_to_term_sisstr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_to_term_sisurl():
    """Auto-generated function: test_util_to_term_sisurl"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_to_term_sisurl()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_to_term_sisbnode():
    """Auto-generated function: test_util_to_term_sisbnode"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_to_term_sisbnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_to_term_sisunknown():
    """Auto-generated function: test_util_to_term_sisunknown"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_to_term_sisunknown()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_to_term_sisnotstr():
    """Auto-generated function: test_util_to_term_sisnotstr"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_to_term_sisnotstr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_sisnonenodefault():
    """Auto-generated function: test_util_from_n3_sisnonenodefault"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_sisnonenodefault()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_sisnonewithdefault():
    """Auto-generated function: test_util_from_n3_sisnonewithdefault"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_sisnonewithdefault()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectdefaultbnode():
    """Auto-generated function: test_util_from_n3_expectdefaultbnode"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectdefaultbnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectbnode():
    """Auto-generated function: test_util_from_n3_expectbnode"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectbnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteral():
    """Auto-generated function: test_util_from_n3_expectliteral"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteral()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expecturiref():
    """Auto-generated function: test_util_from_n3_expecturiref"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expecturiref()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralandlang():
    """Auto-generated function: test_util_from_n3_expectliteralandlang"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralandlang()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralandlangdtype():
    """Auto-generated function: test_util_from_n3_expectliteralandlangdtype"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralandlangdtype()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralanddtype():
    """Auto-generated function: test_util_from_n3_expectliteralanddtype"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralanddtype()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralwithdatatypefromint():
    """Auto-generated function: test_util_from_n3_expectliteralwithdatatypefromint"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralwithdatatypefromint()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralwithdatatypefrombool():
    """Auto-generated function: test_util_from_n3_expectliteralwithdatatypefrombool"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralwithdatatypefrombool()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralmultiline():
    """Auto-generated function: test_util_from_n3_expectliteralmultiline"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralmultiline()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralwithescapedquote():
    """Auto-generated function: test_util_from_n3_expectliteralwithescapedquote"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralwithescapedquote()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectliteralwithtrailingbackslash():
    """Auto-generated function: test_util_from_n3_expectliteralwithtrailingbackslash"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectliteralwithtrailingbackslash()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectpartialidempotencewithn3():
    """Auto-generated function: test_util_from_n3_expectpartialidempotencewithn3"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectpartialidempotencewithn3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectsameasn3parser():
    """Auto-generated function: test_util_from_n3_expectsameasn3parser"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectsameasn3parser()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectquotedgraph():
    """Auto-generated function: test_util_from_n3_expectquotedgraph"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectquotedgraph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_expectgraph():
    """Auto-generated function: test_util_from_n3_expectgraph"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_expectgraph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_escapes(escaped, raw):
    """Auto-generated function: test_util_from_n3_escapes"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_escapes(escaped, raw)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_not_escapes(string):
    """Auto-generated function: test_util_from_n3_not_escapes"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_not_escapes(string)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_util_from_n3_not_escapes_xf(string):
    """Auto-generated function: test_util_from_n3_not_escapes_xf"""
    try:
        response = rdflib.TestUtilTermConvert.test_util_from_n3_not_escapes_xf(string)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test__coalesce(params, default, expected_result):
    """Auto-generated function: test__coalesce"""
    try:
        response = rdflib.test__coalesce(params, default, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test__coalesce_typing():
    """Auto-generated function: test__coalesce_typing"""
    try:
        response = rdflib.test__coalesce_typing()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_find_roots(graph_sources, prop, roots, expected_result):
    """Auto-generated function: test_find_roots"""
    try:
        response = rdflib.test_find_roots(graph_sources, prop, roots, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_get_tree(graph_sources, root, prop, dir, expected_result):
    """Auto-generated function: test_get_tree"""
    try:
        response = rdflib.test_get_tree(graph_sources, root, prop, dir, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_iri2uri(iri, expected_result):
    """Auto-generated function: test_iri2uri"""
    try:
        response = rdflib.test_iri2uri(iri, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def nt_file(fn):
    """Auto-generated function: nt_file"""
    try:
        response = rdflib.nt_file(fn)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue859():
    """Auto-generated function: test_issue859"""
    try:
        response = rdflib.test_issue859()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue78():
    """Auto-generated function: test_issue78"""
    try:
        response = rdflib.test_issue78()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue146():
    """Auto-generated function: test_issue146"""
    try:
        response = rdflib.test_issue146()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue1144_rdflib():
    """Auto-generated function: test_issue1144_rdflib"""
    try:
        response = rdflib.test_issue1144_rdflib()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue1144_w3c():
    """Auto-generated function: test_issue1144_w3c"""
    try:
        response = rdflib.test_issue1144_w3c()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sink():
    """Auto-generated function: test_sink"""
    try:
        response = rdflib.test_sink()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nonvalidating_unquote():
    """Auto-generated function: test_nonvalidating_unquote"""
    try:
        response = rdflib.test_nonvalidating_unquote()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_validating_unquote():
    """Auto-generated function: test_validating_unquote"""
    try:
        response = rdflib.test_validating_unquote()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_validating_unquote_raises():
    """Auto-generated function: test_validating_unquote_raises"""
    try:
        response = rdflib.test_validating_unquote_raises()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nonvalidating_uriquote():
    """Auto-generated function: test_nonvalidating_uriquote"""
    try:
        response = rdflib.test_nonvalidating_uriquote()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_validating_uriquote():
    """Auto-generated function: test_validating_uriquote"""
    try:
        response = rdflib.test_validating_uriquote()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_w3d_ntriples_parser_fpath():
    """Auto-generated function: test_w3d_ntriples_parser_fpath"""
    try:
        response = rdflib.test_w3d_ntriples_parser_fpath()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_w3c_ntriples_parser_parsestring():
    """Auto-generated function: test_w3c_ntriples_parser_parsestring"""
    try:
        response = rdflib.test_w3c_ntriples_parser_parsestring()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_w3_ntriple_variants():
    """Auto-generated function: test_w3_ntriple_variants"""
    try:
        response = rdflib.test_w3_ntriple_variants()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bad_line():
    """Auto-generated function: test_bad_line"""
    try:
        response = rdflib.test_bad_line()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cover_eat():
    """Auto-generated function: test_cover_eat"""
    try:
        response = rdflib.test_cover_eat()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cover_subjectobjectliteral():
    """Auto-generated function: test_cover_subjectobjectliteral"""
    try:
        response = rdflib.test_cover_subjectobjectliteral()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_shared_across_instances():
    """Auto-generated function: test_bnode_shared_across_instances"""
    try:
        response = rdflib.test_bnode_shared_across_instances()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_distinct_across_instances():
    """Auto-generated function: test_bnode_distinct_across_instances"""
    try:
        response = rdflib.test_bnode_distinct_across_instances()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_distinct_across_parse():
    """Auto-generated function: test_bnode_distinct_across_parse"""
    try:
        response = rdflib.test_bnode_distinct_across_parse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_shared_across_parse():
    """Auto-generated function: test_bnode_shared_across_parse"""
    try:
        response = rdflib.test_bnode_shared_across_parse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_shared_across_instances_with_parse_option():
    """Auto-generated function: test_bnode_shared_across_instances_with_parse_option"""
    try:
        response = rdflib.test_bnode_shared_across_instances_with_parse_option()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple(s, p, o):
    """Auto-generated function: triple"""
    try:
        response = rdflib.FakeSink.triple(s, p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def http_file_server():
    """Auto-generated function: http_file_server"""
    try:
        response = rdflib.http_file_server()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdfs_graph():
    """Auto-generated function: rdfs_graph"""
    try:
        response = rdflib.rdfs_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def function_httpmock(_session_function_httpmocks):
    """Auto-generated function: function_httpmock"""
    try:
        response = rdflib.function_httpmock(_session_function_httpmocks)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def function_httpmocks(_session_function_httpmocks):
    """Auto-generated function: function_httpmocks"""
    try:
        response = rdflib.function_httpmocks(_session_function_httpmocks)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def audit_hook_dispatcher():
    """Auto-generated function: audit_hook_dispatcher"""
    try:
        response = rdflib.audit_hook_dispatcher()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def exit_stack():
    """Auto-generated function: exit_stack"""
    try:
        response = rdflib.exit_stack()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_collection_modifyitems(items):
    """Auto-generated function: pytest_collection_modifyitems"""
    try:
        response = rdflib.pytest_collection_modifyitems(items)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_paths_n3(path, no_nsm, with_nsm):
    """Auto-generated function: test_paths_n3"""
    try:
        response = rdflib.test_paths_n3(path, no_nsm, with_nsm)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_mulpath_n3():
    """Auto-generated function: test_mulpath_n3"""
    try:
        response = rdflib.test_mulpath_n3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_eq(lhs, rhs):
    """Auto-generated function: test_eq"""
    try:
        response = rdflib.test_eq(lhs, rhs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hash(lhs, rhs):
    """Auto-generated function: test_hash"""
    try:
        response = rdflib.test_hash(lhs, rhs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_dict_key(insert_path, check_path):
    """Auto-generated function: test_dict_key"""
    try:
        response = rdflib.test_dict_key(insert_path, check_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rdflib_query_exercise():
    """Auto-generated function: test_rdflib_query_exercise"""
    try:
        response = rdflib.test_rdflib_query_exercise()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sort_dates():
    """Auto-generated function: test_sort_dates"""
    try:
        response = rdflib.test_sort_dates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sort_docfrag():
    """Auto-generated function: test_sort_docfrag"""
    try:
        response = rdflib.test_sort_docfrag()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_group_by():
    """Auto-generated function: test_group_by"""
    try:
        response = rdflib.test_group_by()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_having_aggregate_eq_literal():
    """Auto-generated function: test_having_aggregate_eq_literal"""
    try:
        response = rdflib.test_having_aggregate_eq_literal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_having_primary_expression_var_neq_iri():
    """Auto-generated function: test_having_primary_expression_var_neq_iri"""
    try:
        response = rdflib.test_having_primary_expression_var_neq_iri()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def collect_files(directory, exclude_names, pattern):
    """Auto-generated function: collect_files"""
    try:
        response = rdflib.collect_files(directory, exclude_names, pattern)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def roundtrip(infmt, testfmt, source, graph_type, checks, same_public_id):
    """Auto-generated function: roundtrip"""
    try:
        response = rdflib.roundtrip(infmt, testfmt, source, graph_type, checks, same_public_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_formats():
    """Auto-generated function: get_formats"""
    try:
        response = rdflib.get_formats()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_cases(files, formats, hext_okay, checks, graph_type, same_public_id):
    """Auto-generated function: make_cases"""
    try:
        response = rdflib.make_cases(files, formats, hext_okay, checks, graph_type, same_public_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_formats():
    """Auto-generated function: test_formats"""
    try:
        response = rdflib.test_formats()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nt(checker, args):
    """Auto-generated function: test_nt"""
    try:
        response = rdflib.test_nt(checker, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n3(checker, args):
    """Auto-generated function: test_n3"""
    try:
        response = rdflib.test_n3(checker, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n3_suite(checker, args):
    """Auto-generated function: test_n3_suite"""
    try:
        response = rdflib.test_n3_suite(checker, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_extra(checker, args):
    """Auto-generated function: test_extra"""
    try:
        response = rdflib.test_extra(checker, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generate_example_cases():
    """Auto-generated function: generate_example_cases"""
    try:
        response = rdflib.generate_example_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_example(example_file):
    """Auto-generated function: test_example"""
    try:
        response = rdflib.test_example(example_file)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_base_cumulative():
    """Auto-generated function: test_base_cumulative"""
    try:
        response = rdflib.TestN3Case.test_base_cumulative()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_base_explicit():
    """Auto-generated function: test_base_explicit"""
    try:
        response = rdflib.TestN3Case.test_base_explicit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_base_serialize():
    """Auto-generated function: test_base_serialize"""
    try:
        response = rdflib.TestN3Case.test_base_serialize()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue23():
    """Auto-generated function: test_issue23"""
    try:
        response = rdflib.TestN3Case.test_issue23()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue29():
    """Auto-generated function: test_issue29"""
    try:
        response = rdflib.TestN3Case.test_issue29()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue68():
    """Auto-generated function: test_issue68"""
    try:
        response = rdflib.TestN3Case.test_issue68()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue156():
    """Auto-generated function: test_issue156"""
    try:
        response = rdflib.TestN3Case.test_issue156()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue999():
    """Auto-generated function: test_issue999"""
    try:
        response = rdflib.TestN3Case.test_issue999()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_dot_in_prefix():
    """Auto-generated function: test_dot_in_prefix"""
    try:
        response = rdflib.TestN3Case.test_dot_in_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_model():
    """Auto-generated function: test_model"""
    try:
        response = rdflib.TestN3Case.test_model()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_quoted_serialization():
    """Auto-generated function: test_quoted_serialization"""
    try:
        response = rdflib.TestN3Case.test_quoted_serialization()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse():
    """Auto-generated function: test_parse"""
    try:
        response = rdflib.TestN3Case.test_parse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_single_quoted_literals():
    """Auto-generated function: test_single_quoted_literals"""
    try:
        response = rdflib.TestN3Case.test_single_quoted_literals()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_prefix():
    """Auto-generated function: test_empty_prefix"""
    try:
        response = rdflib.TestN3Case.test_empty_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_exponents():
    """Auto-generated function: test_exponents"""
    try:
        response = rdflib.TestRegularExpressions.test_exponents()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_invalid_exponents():
    """Auto-generated function: test_invalid_exponents"""
    try:
        response = rdflib.TestRegularExpressions.test_invalid_exponents()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_skolem_genid_and_rdflibgenid():
    """Auto-generated function: test_skolem_genid_and_rdflibgenid"""
    try:
        response = rdflib.test_skolem_genid_and_rdflibgenid()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sort_semiblank_graph():
    """Auto-generated function: test_sort_semiblank_graph"""
    try:
        response = rdflib.test_serializer_longturtle_sort.test_sort_semiblank_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_turtle_final_dot():
    """Auto-generated function: test_turtle_final_dot"""
    try:
        response = rdflib.test_serializer_turtle.test_turtle_final_dot()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_turtle_bool_list():
    """Auto-generated function: test_turtle_bool_list"""
    try:
        response = rdflib.test_serializer_turtle.test_turtle_bool_list()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unicode_escaping():
    """Auto-generated function: test_unicode_escaping"""
    try:
        response = rdflib.test_serializer_turtle.test_unicode_escaping()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_turtle_valid_list():
    """Auto-generated function: test_turtle_valid_list"""
    try:
        response = rdflib.test_serializer_turtle.test_turtle_valid_list()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_turtle_namespace():
    """Auto-generated function: test_turtle_namespace"""
    try:
        response = rdflib.test_serializer_turtle.test_turtle_namespace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_context(input):
    """Auto-generated function: test_serialize_context"""
    try:
        response = rdflib.test_serializer_jsonld.test_serialize_context(input)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_longturtle():
    """Auto-generated function: test_longturtle"""
    try:
        response = rdflib.test_serializer_longturtle.test_longturtle()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize():
    """Auto-generated function: test_serialize"""
    try:
        response = rdflib.test_serializer_trix.test_serialize()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_250():
    """Auto-generated function: test_issue_250"""
    try:
        response = rdflib.test_serializer_trix.test_issue_250()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_implies():
    """Auto-generated function: test_implies"""
    try:
        response = rdflib.test_serializer_n3.test_implies()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_merging():
    """Auto-generated function: test_merging"""
    try:
        response = rdflib.test_serializer_n3.test_merging()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_single_simple_triple():
    """Auto-generated function: test_single_simple_triple"""
    try:
        response = rdflib.test_serializer_n3.test_single_simple_triple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_implies_nothing():
    """Auto-generated function: test_implies_nothing"""
    try:
        response = rdflib.test_serializer_n3.test_implies_nothing()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rdf_type(format, tuple_index, is_keyword):
    """Auto-generated function: test_rdf_type"""
    try:
        response = rdflib.test_serializer.test_rdf_type(format, tuple_index, is_keyword)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def simple_graph():
    """Auto-generated function: simple_graph"""
    try:
        response = rdflib.test_serializer.simple_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def simple_dataset():
    """Auto-generated function: simple_dataset"""
    try:
        response = rdflib.test_serializer.simple_dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_purepath(tmp_path, simple_graph):
    """Auto-generated function: test_serialize_to_purepath"""
    try:
        response = rdflib.test_serializer.test_serialize_to_purepath(tmp_path, simple_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_path(tmp_path, simple_graph):
    """Auto-generated function: test_serialize_to_path"""
    try:
        response = rdflib.test_serializer.test_serialize_to_path(tmp_path, simple_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_neturl(simple_graph):
    """Auto-generated function: test_serialize_to_neturl"""
    try:
        response = rdflib.test_serializer.test_serialize_to_neturl(simple_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_fileurl(tmp_path, simple_graph):
    """Auto-generated function: test_serialize_to_fileurl"""
    try:
        response = rdflib.test_serializer.test_serialize_to_fileurl(tmp_path, simple_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_badformat(simple_graph):
    """Auto-generated function: test_serialize_badformat"""
    try:
        response = rdflib.test_serializer.test_serialize_badformat(simple_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def narrow_dest_param(param):
    """Auto-generated function: narrow_dest_param"""
    try:
        response = rdflib.test_serializer.narrow_dest_param(param)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def info_dict(cls):
    """Auto-generated function: info_dict"""
    try:
        response = rdflib.test_serializer.GraphFormat.info_dict(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def info():
    """Auto-generated function: info"""
    try:
        response = rdflib.test_serializer.GraphFormat.info()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def set(cls):
    """Auto-generated function: set"""
    try:
        response = rdflib.test_serializer.GraphFormat.set(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serializer():
    """Auto-generated function: serializer"""
    try:
        response = rdflib.test_serializer.GraphFormatInfo.serializer()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def deserializer():
    """Auto-generated function: deserializer"""
    try:
        response = rdflib.test_serializer.GraphFormatInfo.deserializer()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make(cls):
    """Auto-generated function: make"""
    try:
        response = rdflib.test_serializer.GraphFormatInfoDict.make(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serdes_dict():
    """Auto-generated function: serdes_dict"""
    try:
        response = rdflib.test_serializer.GraphFormatInfoDict.serdes_dict()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_all_serializers_specified():
    """Auto-generated function: test_all_serializers_specified"""
    try:
        response = rdflib.test_serializer.test_all_serializers_specified()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_serialize_parse_tests():
    """Auto-generated function: make_serialize_parse_tests"""
    try:
        response = rdflib.test_serializer.make_serialize_parse_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_parse(tmp_path, simple_graph, simple_dataset, args):
    """Auto-generated function: test_serialize_parse"""
    try:
        response = rdflib.test_serializer.test_serialize_parse(tmp_path, simple_graph, simple_dataset, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_serialized(format, graph, data):
    """Auto-generated function: check_serialized"""
    try:
        response = rdflib.test_serializer.check_serialized(format, graph, data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dest_ref():
    """Auto-generated function: dest_ref"""
    try:
        response = rdflib.test_serializer.SerializeArgs.dest_ref()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dest_param():
    """Auto-generated function: dest_param"""
    try:
        response = rdflib.test_serializer.SerializeArgs.dest_param()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_overloads(tmp_path, simple_graph, destination_type, serialize_function):
    """Auto-generated function: test_serialize_overloads"""
    try:
        response = rdflib.test_serializer.test_serialize_overloads(tmp_path, simple_graph, destination_type, serialize_function)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_test_serialize_to_strdest_tests():
    """Auto-generated function: make_test_serialize_to_strdest_tests"""
    try:
        response = rdflib.test_serializer.make_test_serialize_to_strdest_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_strdest(tmp_path, simple_graph, destination_type, name_prefix):
    """Auto-generated function: test_serialize_to_strdest"""
    try:
        response = rdflib.test_serializer.test_serialize_to_strdest(tmp_path, simple_graph, destination_type, name_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_fileuri_with_authortiy(tmp_path, simple_graph, authority):
    """Auto-generated function: test_serialize_to_fileuri_with_authortiy"""
    try:
        response = rdflib.test_serializer.test_serialize_to_fileuri_with_authortiy(tmp_path, simple_graph, authority)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_prettyxml.SerializerTestBase.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_and_reparse():
    """Auto-generated function: test_serialize_and_reparse"""
    try:
        response = rdflib.test_prettyxml.SerializerTestBase.test_serialize_and_reparse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multiple():
    """Auto-generated function: test_multiple"""
    try:
        response = rdflib.test_prettyxml.SerializerTestBase.test_multiple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(source_graph, make_serializer, get_value, extra_args):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.test_prettyxml.serialize(source_graph, make_serializer, get_value, extra_args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize_and_load(source_graph, make_serializer):
    """Auto-generated function: serialize_and_load"""
    try:
        response = rdflib.test_prettyxml.serialize_and_load(source_graph, make_serializer)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_result_fragments():
    """Auto-generated function: test_result_fragments"""
    try:
        response = rdflib.test_prettyxml.TestPrettyXmlSerializer.test_result_fragments()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_result_fragments_with_base():
    """Auto-generated function: test_result_fragments_with_base"""
    try:
        response = rdflib.test_prettyxml.TestPrettyXmlSerializer.test_result_fragments_with_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subclass_of_objects():
    """Auto-generated function: test_subclass_of_objects"""
    try:
        response = rdflib.test_prettyxml.TestPrettyXmlSerializer.test_subclass_of_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_pretty_xmlliteral():
    """Auto-generated function: test_pretty_xmlliteral"""
    try:
        response = rdflib.test_prettyxml.TestPrettyXmlSerializer.test_pretty_xmlliteral()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_pretty_broken_xmlliteral():
    """Auto-generated function: test_pretty_broken_xmlliteral"""
    try:
        response = rdflib.test_prettyxml.TestPrettyXmlSerializer.test_pretty_broken_xmlliteral()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_serializer_xml.SerializerTestBase.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_and_reparse():
    """Auto-generated function: test_serialize_and_reparse"""
    try:
        response = rdflib.test_serializer_xml.SerializerTestBase.test_serialize_and_reparse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multiple():
    """Auto-generated function: test_multiple"""
    try:
        response = rdflib.test_serializer_xml.SerializerTestBase.test_multiple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(source_graph, make_serializer, get_value, extra_args):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.test_serializer_xml.serialize(source_graph, make_serializer, get_value, extra_args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize_and_load(source_graph, make_serializer):
    """Auto-generated function: serialize_and_load"""
    try:
        response = rdflib.test_serializer_xml.serialize_and_load(source_graph, make_serializer)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_result_fragments():
    """Auto-generated function: test_result_fragments"""
    try:
        response = rdflib.test_serializer_xml.TestXMLSerializer.test_result_fragments()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_result_fragments_with_base():
    """Auto-generated function: test_result_fragments_with_base"""
    try:
        response = rdflib.test_serializer_xml.TestXMLSerializer.test_result_fragments_with_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subslass_of_objects():
    """Auto-generated function: test_subslass_of_objects"""
    try:
        response = rdflib.test_serializer_xml.TestXMLSerializer.test_subslass_of_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_quad():
    """Auto-generated function: test_add_quad"""
    try:
        response = rdflib.test_serializer_patch.test_add_quad()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_delete_quad():
    """Auto-generated function: test_delete_quad"""
    try:
        response = rdflib.test_serializer_patch.test_delete_quad()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_diff_quad():
    """Auto-generated function: test_diff_quad"""
    try:
        response = rdflib.test_serializer_patch.test_diff_quad()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_triple():
    """Auto-generated function: test_add_triple"""
    try:
        response = rdflib.test_serializer_patch.test_add_triple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_delete_triple():
    """Auto-generated function: test_delete_triple"""
    try:
        response = rdflib.test_serializer_patch.test_delete_triple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_diff_triple():
    """Auto-generated function: test_diff_triple"""
    try:
        response = rdflib.test_serializer_patch.test_diff_triple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_diff_quad_overlap():
    """Auto-generated function: test_diff_quad_overlap"""
    try:
        response = rdflib.test_serializer_patch.test_diff_quad_overlap()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_header_id():
    """Auto-generated function: test_header_id"""
    try:
        response = rdflib.test_serializer_patch.test_header_id()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prev_header():
    """Auto-generated function: test_prev_header"""
    try:
        response = rdflib.test_serializer_patch.test_prev_header()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hext_graph():
    """Auto-generated function: test_hext_graph"""
    try:
        response = rdflib.test_serializer_hext.test_hext_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hext_cg():
    """Auto-generated function: test_hext_cg"""
    try:
        response = rdflib.test_serializer_hext.test_hext_cg()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hext_dataset():
    """Auto-generated function: test_hext_dataset"""
    try:
        response = rdflib.test_serializer_hext.test_hext_dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hext_json_representation():
    """Auto-generated function: test_hext_json_representation"""
    try:
        response = rdflib.test_serializer_hext.test_hext_json_representation()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hext_dataset_linecount():
    """Auto-generated function: test_hext_dataset_linecount"""
    try:
        response = rdflib.test_serializer_hext.test_hext_dataset_linecount()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_roundtrip():
    """Auto-generated function: test_roundtrip"""
    try:
        response = rdflib.test_serializer_hext.test_roundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_finalnewline():
    """Auto-generated function: test_finalnewline"""
    try:
        response = rdflib.test_finalnewline.test_finalnewline()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xmlwriter_namespaces():
    """Auto-generated function: test_xmlwriter_namespaces"""
    try:
        response = rdflib.test_xmlwriter_qname.test_xmlwriter_namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xmlwriter_decl():
    """Auto-generated function: test_xmlwriter_decl"""
    try:
        response = rdflib.test_xmlwriter_qname.test_xmlwriter_decl()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xmlwriter_qname(uri):
    """Auto-generated function: test_xmlwriter_qname"""
    try:
        response = rdflib.test_xmlwriter_qname.test_xmlwriter_qname(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_has_html5rdf():
    """Auto-generated function: test_has_html5rdf"""
    try:
        response = rdflib.test_literal_html5lib.test_has_html5rdf()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_construction(factory, outcome):
    """Auto-generated function: test_literal_construction"""
    try:
        response = rdflib.test_literal_html5lib.test_literal_construction(factory, outcome)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uformat(s):
    """Auto-generated function: uformat"""
    try:
        response = rdflib.test_term.uformat(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subclass_name_appears_in_repr():
    """Auto-generated function: test_subclass_name_appears_in_repr"""
    try:
        response = rdflib.test_term.TestBNodeRepr.test_subclass_name_appears_in_repr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graceful_ordering():
    """Auto-generated function: test_graceful_ordering"""
    try:
        response = rdflib.test_term.TestURIRefRepr.test_graceful_ordering()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_base64_values():
    """Auto-generated function: test_base64_values"""
    try:
        response = rdflib.test_term.TestLiteral.test_base64_values()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_total_order():
    """Auto-generated function: test_total_order"""
    try:
        response = rdflib.test_term.TestLiteral.test_total_order()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_add():
    """Auto-generated function: test_literal_add"""
    try:
        response = rdflib.test_term.TestLiteral.test_literal_add()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_is_valid_unicode():
    """Auto-generated function: test_is_valid_unicode"""
    try:
        response = rdflib.test_term.TestValidityFunctions.test_is_valid_unicode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_to_python_timedelta():
    """Auto-generated function: test_to_python_timedelta"""
    try:
        response = rdflib.test_duration.TestDuration.test_to_python_timedelta()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_to_python_ym_duration():
    """Auto-generated function: test_to_python_ym_duration"""
    try:
        response = rdflib.test_duration.TestDuration.test_to_python_ym_duration()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_to_python_ymdhms_duration():
    """Auto-generated function: test_to_python_ymdhms_duration"""
    try:
        response = rdflib.test_duration.TestDuration.test_to_python_ymdhms_duration()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_equalityself():
    """Auto-generated function: test_equalityself"""
    try:
        response = rdflib.test_duration.TestDuration.test_equalityself()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_duration_le():
    """Auto-generated function: test_duration_le"""
    try:
        response = rdflib.test_duration.TestDuration.test_duration_le()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_duration_sum():
    """Auto-generated function: test_duration_sum"""
    try:
        response = rdflib.test_duration.TestDuration.test_duration_sum()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_duration_sub_pos():
    """Auto-generated function: test_duration_sub_pos"""
    try:
        response = rdflib.test_duration.TestDuration.test_duration_sub_pos()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_duration_sub_neg():
    """Auto-generated function: test_duration_sub_neg"""
    try:
        response = rdflib.test_duration.TestDuration.test_duration_sub_neg()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_int():
    """Auto-generated function: test_int"""
    try:
        response = rdflib.test_hex_binary.TestHexBinaryCase.test_int()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unicode():
    """Auto-generated function: test_unicode"""
    try:
        response = rdflib.test_hex_binary.TestHexBinaryCase.test_unicode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_a():
    """Auto-generated function: test_a"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_b():
    """Auto-generated function: test_b"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_c():
    """Auto-generated function: test_c"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_c()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_d():
    """Auto-generated function: test_d"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_d()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_e():
    """Auto-generated function: test_e"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_e()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_e2():
    """Auto-generated function: test_e2"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_e2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_f():
    """Auto-generated function: test_f"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_f()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_g():
    """Auto-generated function: test_g"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_g()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_h():
    """Auto-generated function: test_h"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_h()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_i():
    """Auto-generated function: test_i"""
    try:
        response = rdflib.test_uriref_literal_comparison.TestIdentifierEquality.test_i()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test1():
    """Auto-generated function: test1"""
    try:
        response = rdflib.test_tokendatatype.TestTokenDatatype.test1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test2():
    """Auto-generated function: test2"""
    try:
        response = rdflib.test_tokendatatype.TestTokenDatatype.test2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test3():
    """Auto-generated function: test3"""
    try:
        response = rdflib.test_tokendatatype.TestTokenDatatype.test3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test4():
    """Auto-generated function: test4"""
    try:
        response = rdflib.test_tokendatatype.TestTokenDatatype.test4()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_whitespace_is_collapsed_and_trailing_whitespace_is_stripped():
    """Auto-generated function: test_whitespace_is_collapsed_and_trailing_whitespace_is_stripped"""
    try:
        response = rdflib.test_tokendatatype.TestTokenDatatype.test_whitespace_is_collapsed_and_trailing_whitespace_is_stripped()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testPythonRoundtrip():
    """Auto-generated function: testPythonRoundtrip"""
    try:
        response = rdflib.test_xmlliterals.testPythonRoundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testRDFXMLParse():
    """Auto-generated function: testRDFXMLParse"""
    try:
        response = rdflib.test_xmlliterals.testRDFXMLParse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_xmlliterals.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def roundtrip(fmt):
    """Auto-generated function: roundtrip"""
    try:
        response = rdflib.test_xmlliterals.roundtrip(fmt)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testRoundtrip():
    """Auto-generated function: testRoundtrip"""
    try:
        response = rdflib.test_xmlliterals.testRoundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testHTML():
    """Auto-generated function: testHTML"""
    try:
        response = rdflib.test_xmlliterals.testHTML()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_eq(values, equals):
    """Auto-generated function: test_eq"""
    try:
        response = rdflib.test_xmlliterals.test_eq(values, equals)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test1():
    """Auto-generated function: test1"""
    try:
        response = rdflib.test_normalized_string.TestNormalizedString.test1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test2():
    """Auto-generated function: test2"""
    try:
        response = rdflib.test_normalized_string.TestNormalizedString.test2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test3():
    """Auto-generated function: test3"""
    try:
        response = rdflib.test_normalized_string.TestNormalizedString.test3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test4():
    """Auto-generated function: test4"""
    try:
        response = rdflib.test_normalized_string.TestNormalizedString.test4()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_equality():
    """Auto-generated function: test_equality"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_equality()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_microseconds():
    """Auto-generated function: test_microseconds"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_microseconds()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_to_python():
    """Auto-generated function: test_to_python"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_to_python()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_timezone_z():
    """Auto-generated function: test_timezone_z"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_timezone_z()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_timezone_offset():
    """Auto-generated function: test_timezone_offset"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_timezone_offset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_timezone_offset_to_utc():
    """Auto-generated function: test_timezone_offset_to_utc"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_timezone_offset_to_utc()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_timezone_offset_millisecond():
    """Auto-generated function: test_timezone_offset_millisecond"""
    try:
        response = rdflib.test_datetime.TestRelativeBase.test_timezone_offset_millisecond()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clear_bindings():
    """Auto-generated function: clear_bindings"""
    try:
        response = rdflib.test_literal.clear_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_repr_apostrophe():
    """Auto-generated function: test_repr_apostrophe"""
    try:
        response = rdflib.test_literal.test_repr_apostrophe()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_repr_quote():
    """Auto-generated function: test_repr_quote"""
    try:
        response = rdflib.test_literal.test_repr_quote()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_backslash():
    """Auto-generated function: test_backslash"""
    try:
        response = rdflib.test_literal.test_backslash()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_from_bool():
    """Auto-generated function: test_literal_from_bool"""
    try:
        response = rdflib.test_literal.test_literal_from_bool()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cant_pass_invalid_lang(lang, exception_type):
    """Auto-generated function: test_cant_pass_invalid_lang"""
    try:
        response = rdflib.test_literal.test_cant_pass_invalid_lang(lang, exception_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ill_typed_literals(lexical, datatype, is_ill_typed):
    """Auto-generated function: test_ill_typed_literals"""
    try:
        response = rdflib.test_literal.test_ill_typed_literals(lexical, datatype, is_ill_typed)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_addsub(a, b, op, expected_result):
    """Auto-generated function: test_literal_addsub"""
    try:
        response = rdflib.test_literal.test_literal_addsub(a, b, op, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_numeric_literals(a_value, b_value, result_value, datatype):
    """Auto-generated function: test_numeric_literals"""
    try:
        response = rdflib.test_literal.test_numeric_literals(a_value, b_value, result_value, datatype)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cant_pass_lang_and_datatype():
    """Auto-generated function: test_cant_pass_lang_and_datatype"""
    try:
        response = rdflib.test_literal.test_cant_pass_lang_and_datatype()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cant_pass_invalid_lang_int():
    """Auto-generated function: test_cant_pass_invalid_lang_int"""
    try:
        response = rdflib.test_literal.test_cant_pass_invalid_lang_int()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_from_other_literal():
    """Auto-generated function: test_from_other_literal"""
    try:
        response = rdflib.test_literal.test_from_other_literal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datatype_gets_auto_uri_ref_conversion():
    """Auto-generated function: test_datatype_gets_auto_uri_ref_conversion"""
    try:
        response = rdflib.test_literal.test_datatype_gets_auto_uri_ref_conversion()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_omits_missing_datatype_and_lang():
    """Auto-generated function: test_omits_missing_datatype_and_lang"""
    try:
        response = rdflib.test_literal.test_omits_missing_datatype_and_lang()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_omits_missing_datatype():
    """Auto-generated function: test_omits_missing_datatype"""
    try:
        response = rdflib.test_literal.test_omits_missing_datatype()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_omits_missing_lang():
    """Auto-generated function: test_omits_missing_lang"""
    try:
        response = rdflib.test_literal.test_omits_missing_lang()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subclass_name_appears_in_repr():
    """Auto-generated function: test_subclass_name_appears_in_repr"""
    try:
        response = rdflib.test_literal.test_subclass_name_appears_in_repr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_dangling_point():
    """Auto-generated function: test_no_dangling_point"""
    try:
        response = rdflib.test_literal.test_no_dangling_point()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_true_boolean():
    """Auto-generated function: test_true_boolean"""
    try:
        response = rdflib.test_literal.test_true_boolean()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_false_boolean():
    """Auto-generated function: test_false_boolean"""
    try:
        response = rdflib.test_literal.test_false_boolean()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_non_false_boolean():
    """Auto-generated function: test_non_false_boolean"""
    try:
        response = rdflib.test_literal.test_non_false_boolean()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_binding(clear_bindings):
    """Auto-generated function: test_binding"""
    try:
        response = rdflib.test_literal.test_binding(clear_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_specific_binding(clear_bindings):
    """Auto-generated function: test_specific_binding"""
    try:
        response = rdflib.test_literal.test_specific_binding(clear_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_construction_value_class(lexical, literal_type, value_cls):
    """Auto-generated function: test_literal_construction_value_class"""
    try:
        response = rdflib.test_literal.test_literal_construction_value_class(lexical, literal_type, value_cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_exception_in_converter(caplog, clear_bindings):
    """Auto-generated function: test_exception_in_converter"""
    try:
        response = rdflib.test_literal.test_exception_in_converter(caplog, clear_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_construction(literal_maker, outcome):
    """Auto-generated function: test_literal_construction"""
    try:
        response = rdflib.test_literal.test_literal_construction(literal_maker, outcome)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_global_normalize(literal_maker, normalize_literals, outcome):
    """Auto-generated function: test_global_normalize"""
    try:
        response = rdflib.test_literal.test_global_normalize(literal_maker, normalize_literals, outcome)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pt(ts):
    """Auto-generated function: pt"""
    try:
        response = rdflib.test_parser_helpers.pt(ts)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_1():
    """Auto-generated function: test_1"""
    try:
        response = rdflib.test_parser_helpers.test_1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_reading_from_path_object():
    """Auto-generated function: test_reading_from_path_object"""
    try:
        response = rdflib.test_parser_reads_from_pathlike_object.test_reading_from_path_object()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_with_skolemize_triples(data, data_format, expected_data, expected_data_format):
    """Auto-generated function: test_parse_with_skolemize_triples"""
    try:
        response = rdflib.test_parse_with_skolemize.test_parse_with_skolemize_triples(data, data_format, expected_data, expected_data_format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_with_skolemize_quads(data, data_format, expected_data, expected_data_format, anonymous_graph_name):
    """Auto-generated function: test_parse_with_skolemize_quads"""
    try:
        response = rdflib.test_parse_with_skolemize.test_parse_with_skolemize_quads(data, data_format, expected_data, expected_data_format, anonymous_graph_name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def xfail_broken_parse_data(request):
    """Auto-generated function: xfail_broken_parse_data"""
    try:
        response = rdflib.test_broken_parse_data_from_jena.xfail_broken_parse_data(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n3_serializer_roundtrip(testfile):
    """Auto-generated function: test_n3_serializer_roundtrip"""
    try:
        response = rdflib.test_broken_parse_data_from_jena.test_n3_serializer_roundtrip(testfile)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_and_anonymous_graph_roundtrip():
    """Auto-generated function: test_named_and_anonymous_graph_roundtrip"""
    try:
        response = rdflib.test_parser_hext.test_named_and_anonymous_graph_roundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_small_string():
    """Auto-generated function: test_small_string"""
    try:
        response = rdflib.test_parser_hext.test_small_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_small_bytes_string():
    """Auto-generated function: test_small_bytes_string"""
    try:
        response = rdflib.test_parser_hext.test_small_bytes_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_small_string_cg():
    """Auto-generated function: test_small_string_cg"""
    try:
        response = rdflib.test_parser_hext.test_small_string_cg()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_small_file_singlegraph():
    """Auto-generated function: test_small_file_singlegraph"""
    try:
        response = rdflib.test_parser_hext.test_small_file_singlegraph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_small_file_multigraph():
    """Auto-generated function: test_small_file_multigraph"""
    try:
        response = rdflib.test_parser_hext.test_small_file_multigraph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_small_file_multigraph_cg():
    """Auto-generated function: test_small_file_multigraph_cg"""
    try:
        response = rdflib.test_parser_hext.test_small_file_multigraph_cg()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_roundtrip():
    """Auto-generated function: test_roundtrip"""
    try:
        response = rdflib.test_parser_hext.test_roundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_trix_parse.TestTrixParse.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_method():
    """Auto-generated function: teardown_method"""
    try:
        response = rdflib.test_trix_parse.TestTrixParse.teardown_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testAperture():
    """Auto-generated function: testAperture"""
    try:
        response = rdflib.test_trix_parse.TestTrixParse.testAperture()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testSpec():
    """Auto-generated function: testSpec"""
    try:
        response = rdflib.test_trix_parse.TestTrixParse.testSpec()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testNG4j():
    """Auto-generated function: testNG4j"""
    try:
        response = rdflib.test_trix_parse.TestTrixParse.testNG4j()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_identifier(identifier_string, format):
    """Auto-generated function: parse_identifier"""
    try:
        response = rdflib.test_parser_turtlelike.parse_identifier(identifier_string, format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_n3_identifier(identifier_string, format):
    """Auto-generated function: parse_n3_identifier"""
    try:
        response = rdflib.test_parser_turtlelike.parse_n3_identifier(identifier_string, format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_literal_tests():
    """Auto-generated function: make_literal_tests"""
    try:
        response = rdflib.test_parser_turtlelike.make_literal_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literals(format_name, expected_literal, literal_string, parse_function):
    """Auto-generated function: test_literals"""
    try:
        response = rdflib.test_parser_turtlelike.test_literals(format_name, expected_literal, literal_string, parse_function)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_01():
    """Auto-generated function: test_01"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_01()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_02():
    """Auto-generated function: test_02"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_02()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_03():
    """Auto-generated function: test_03"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_03()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_04():
    """Auto-generated function: test_04"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_04()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_05():
    """Auto-generated function: test_05"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_05()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_06():
    """Auto-generated function: test_06"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_06()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_07():
    """Auto-generated function: test_07"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_07()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_08():
    """Auto-generated function: test_08"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_08()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_09():
    """Auto-generated function: test_09"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_09()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_10():
    """Auto-generated function: test_10"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_10()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_11():
    """Auto-generated function: test_11"""
    try:
        response = rdflib.test_parser_patch.TestPatchParser.test_11()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_parser.TestParser.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_method():
    """Auto-generated function: teardown_method"""
    try:
        response = rdflib.test_parser.TestParser.teardown_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testNoPathWithHash():
    """Auto-generated function: testNoPathWithHash"""
    try:
        response = rdflib.test_parser.TestParser.testNoPathWithHash()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1228_a():
    """Auto-generated function: test_issue_1228_a"""
    try:
        response = rdflib.test_parser.TestGitHubIssues.test_issue_1228_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1228_b():
    """Auto-generated function: test_issue_1228_b"""
    try:
        response = rdflib.test_parser.TestGitHubIssues.test_issue_1228_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_806():
    """Auto-generated function: test_issue_806"""
    try:
        response = rdflib.test_parser.TestGitHubIssues.test_issue_806()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generictest(e):
    """Auto-generated function: generictest"""
    try:
        response = rdflib.test_swap_n3.generictest(e)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dir_to_uri(directory, sep):
    """Auto-generated function: dir_to_uri"""
    try:
        response = rdflib.test_swap_n3.dir_to_uri(directory, sep)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_cases():
    """Auto-generated function: get_cases"""
    try:
        response = rdflib.test_swap_n3.get_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cases(gt, envelope):
    """Auto-generated function: test_cases"""
    try:
        response = rdflib.test_swap_n3.test_cases(gt, envelope)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_01_simple_open():
    """Auto-generated function: test_01_simple_open"""
    try:
        response = rdflib.test_nquads.TestNQuadsParser.test_01_simple_open()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_02_contexts():
    """Auto-generated function: test_02_contexts"""
    try:
        response = rdflib.test_nquads.TestNQuadsParser.test_02_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_03_get_value():
    """Auto-generated function: test_03_get_value"""
    try:
        response = rdflib.test_nquads.TestNQuadsParser.test_03_get_value()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_context_is_optional():
    """Auto-generated function: test_context_is_optional"""
    try:
        response = rdflib.test_nquads.TestNQuadsParser.test_context_is_optional()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize():
    """Auto-generated function: test_serialize"""
    try:
        response = rdflib.test_nquads.TestNQuadsParser.test_serialize()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method(method):
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.setup_method(method)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_method(method):
    """Auto-generated function: teardown_method"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.teardown_method(method)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_shared_bnode_context():
    """Auto-generated function: test_parse_shared_bnode_context"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.test_parse_shared_bnode_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_shared_bnode_context_same_graph():
    """Auto-generated function: test_parse_shared_bnode_context_same_graph"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.test_parse_shared_bnode_context_same_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_distinct_bnode_context():
    """Auto-generated function: test_parse_distinct_bnode_context"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.test_parse_distinct_bnode_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_distinct_bnode_contexts_between_graphs():
    """Auto-generated function: test_parse_distinct_bnode_contexts_between_graphs"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.test_parse_distinct_bnode_contexts_between_graphs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_distinct_bnode_contexts_named_graphs():
    """Auto-generated function: test_parse_distinct_bnode_contexts_named_graphs"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.test_parse_distinct_bnode_contexts_named_graphs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_shared_bnode_contexts_named_graphs():
    """Auto-generated function: test_parse_shared_bnode_contexts_named_graphs"""
    try:
        response = rdflib.test_nquads.TestBnodeContext.test_parse_shared_bnode_contexts_named_graphs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parser_structure():
    """Auto-generated function: test_parser_structure"""
    try:
        response = rdflib.test_parser_structure.test_parser_structure()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_base_ref():
    """Auto-generated function: test_empty_base_ref"""
    try:
        response = rdflib.test_empty_xml_base.TestEmptyBase.test_empty_base_ref()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_relative_base_ref():
    """Auto-generated function: test_relative_base_ref"""
    try:
        response = rdflib.test_empty_xml_base.TestRelativeBase.test_relative_base_ref()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_collection_rdfxml():
    """Auto-generated function: test_collection_rdfxml"""
    try:
        response = rdflib.test_n3parse_of_rdf_lists.TestOWLCollectionTest.test_collection_rdfxml()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_false_element():
    """Auto-generated function: test_false_element"""
    try:
        response = rdflib.test_n3parse_of_rdf_lists.TestListTest.test_false_element()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def module_names(path, names, parent):
    """Auto-generated function: module_names"""
    try:
        response = rdflib.test_conventions.TestA.module_names(path, names, parent)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_module_names():
    """Auto-generated function: test_module_names"""
    try:
        response = rdflib.test_conventions.TestA.test_module_names()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def with_attrs(object):
    """Auto-generated function: with_attrs"""
    try:
        response = rdflib.test_networking_redirect.with_attrs(object)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generate_make_redirect_request_cases():
    """Auto-generated function: generate_make_redirect_request_cases"""
    try:
        response = rdflib.test_networking_redirect.generate_make_redirect_request_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_make_redirect_request(http_request, http_error, expected_result, expected_redirect_dict):
    """Auto-generated function: test_make_redirect_request"""
    try:
        response = rdflib.test_networking_redirect.test_make_redirect_request(http_request, http_error, expected_result, expected_redirect_dict)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_arguments():
    """Auto-generated function: test_empty_arguments"""
    try:
        response = rdflib.test_input_source.test_empty_arguments()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_too_many_arguments():
    """Auto-generated function: test_too_many_arguments"""
    try:
        response = rdflib.test_input_source.test_too_many_arguments()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_path(path):
    """Auto-generated function: from_path"""
    try:
        response = rdflib.test_input_source.DataParam.from_path(path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def call_create_input_source(input, source_param, public_id, location_param, file_param, data_param, format):
    """Auto-generated function: call_create_input_source"""
    try:
        response = rdflib.test_input_source.call_create_input_source(input, source_param, public_id, location_param, file_param, data_param, format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check(params, input_path, input_source):
    """Auto-generated function: check"""
    try:
        response = rdflib.test_input_source.InputSourceChecker.check(params, input_path, input_source)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def type_from_param(cls, param):
    """Auto-generated function: type_from_param"""
    try:
        response = rdflib.test_input_source.InputSourceChecker.type_from_param(cls, param)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def as_tuple():
    """Auto-generated function: as_tuple"""
    try:
        response = rdflib.test_input_source.CreateInputSourceTestParams.as_tuple()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def input_param():
    """Auto-generated function: input_param"""
    try:
        response = rdflib.test_input_source.CreateInputSourceTestParams.input_param()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def requires_http():
    """Auto-generated function: requires_http"""
    try:
        response = rdflib.test_input_source.CreateInputSourceTestParams.requires_http()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def as_pytest_param(marks, id):
    """Auto-generated function: as_pytest_param"""
    try:
        response = rdflib.test_input_source.CreateInputSourceTestParams.as_pytest_param(marks, id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generate_create_input_source_cases():
    """Auto-generated function: generate_create_input_source_cases"""
    try:
        response = rdflib.test_input_source.generate_create_input_source_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_create_input_source(test_params, http_file_server):
    """Auto-generated function: test_create_input_source"""
    try:
        response = rdflib.test_input_source.test_create_input_source(test_params, http_file_server)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bytesio_wrapper():
    """Auto-generated function: test_bytesio_wrapper"""
    try:
        response = rdflib.test_input_source.test_bytesio_wrapper()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_properties(rdfs_graph):
    """Auto-generated function: test_properties"""
    try:
        response = rdflib.test_resource.test_properties(rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def del_key(d, key):
    """Auto-generated function: del_key"""
    try:
        response = rdflib.test_plugins.del_key(d, key)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_plugin(tmp_path, plugin_src):
    """Auto-generated function: ctx_plugin"""
    try:
        response = rdflib.test_plugins.ctx_plugin(tmp_path, plugin_src)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_cleaners():
    """Auto-generated function: ctx_cleaners"""
    try:
        response = rdflib.test_plugins.ctx_cleaners()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparqleval(tmp_path, no_cover):
    """Auto-generated function: test_sparqleval"""
    try:
        response = rdflib.test_plugins.test_sparqleval(tmp_path, no_cover)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parser(tmp_path, no_cover):
    """Auto-generated function: test_parser"""
    try:
        response = rdflib.test_plugins.test_parser(tmp_path, no_cover)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_path_div_future():
    """Auto-generated function: test_path_div_future"""
    try:
        response = rdflib.test_path_div_future.test_path_div_future()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_default(tmp_path):
    """Auto-generated function: test_default"""
    try:
        response = rdflib.test_security.test_default(tmp_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generate_make_block_file_cases():
    """Auto-generated function: generate_make_block_file_cases"""
    try:
        response = rdflib.test_security.generate_make_block_file_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_block_file(tmp_path, audit_hook_dispatcher, http_file_server, exit_stack, defence, uri_kind):
    """Auto-generated function: test_block_file"""
    try:
        response = rdflib.test_security.test_block_file(tmp_path, audit_hook_dispatcher, http_file_server, exit_stack, defence, uri_kind)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenario():
    """Auto-generated function: test_scenario"""
    try:
        response = rdflib.test_collection.test_scenario()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_list():
    """Auto-generated function: test_empty_list"""
    try:
        response = rdflib.test_collection.test_empty_list()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test():
    """Auto-generated function: test"""
    try:
        response = rdflib.test_prefix_types.TestPrefixTypes.test()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_guess_format():
    """Auto-generated function: test_guess_format"""
    try:
        response = rdflib.test_parse_file_guess_format.TestFileParserGuessFormat.test_guess_format()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_jsonld():
    """Auto-generated function: test_jsonld"""
    try:
        response = rdflib.test_parse_file_guess_format.TestFileParserGuessFormat.test_jsonld()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ttl():
    """Auto-generated function: test_ttl"""
    try:
        response = rdflib.test_parse_file_guess_format.TestFileParserGuessFormat.test_ttl()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n3():
    """Auto-generated function: test_n3"""
    try:
        response = rdflib.test_parse_file_guess_format.TestFileParserGuessFormat.test_n3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_warning(caplog):
    """Auto-generated function: test_warning"""
    try:
        response = rdflib.test_parse_file_guess_format.TestFileParserGuessFormat.test_warning(caplog)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unicode():
    """Auto-generated function: test_unicode"""
    try:
        response = rdflib.test_b64_binary.TestB64Binary.test_unicode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subscribe_to(source, target):
    """Auto-generated function: subscribe_to"""
    try:
        response = rdflib.test_events.subscribe_to(source, target)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subscribe_all(caches):
    """Auto-generated function: subscribe_all"""
    try:
        response = rdflib.test_events.subscribe_all(caches)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testEvents():
    """Auto-generated function: testEvents"""
    try:
        response = rdflib.test_events.TestEvent.testEvents()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bnode_uuid():
    """Auto-generated function: bnode_uuid"""
    try:
        response = rdflib.test_bnode_ncname.bnode_uuid()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def is_ncname(value):
    """Auto-generated function: is_ncname"""
    try:
        response = rdflib.test_bnode_ncname.is_ncname(value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def fetch(tmp_path):
    """Auto-generated function: fetch"""
    try:
        response = rdflib.fetcher.ArchiveResource.fetch(tmp_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def run(args):
    """Auto-generated function: run"""
    try:
        response = rdflib.fetcher.Application.run(args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def handle(parse_result):
    """Auto-generated function: handle"""
    try:
        response = rdflib.fetcher.Application.handle(parse_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.fetcher.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def populate_graph(graph):
    """Auto-generated function: populate_graph"""
    try:
        response = rdflib.variants.diverse_triples.populate_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def populate_graph(graph):
    """Auto-generated function: populate_graph"""
    try:
        response = rdflib.variants.simple_triple.populate_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def populate_graph(graph):
    """Auto-generated function: populate_graph"""
    try:
        response = rdflib.variants.simple_quad.populate_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def populate_graph(graph):
    """Auto-generated function: populate_graph"""
    try:
        response = rdflib.variants.diverse_quads.populate_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def trix(test):
    """Auto-generated function: trix"""
    try:
        response = rdflib.suites.trix.test_trix.trix(test)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_manifest(rdf_test_uri, type, rdf_test):
    """Auto-generated function: test_manifest"""
    try:
        response = rdflib.suites.trix.test_trix.test_manifest(rdf_test_uri, type, rdf_test)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_stuff(graph):
    """Auto-generated function: add_stuff"""
    try:
        response = rdflib.test_conjunctivegraph_generators.add_stuff(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subjects():
    """Auto-generated function: test_unique_subjects"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_unique_subjects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_predicates():
    """Auto-generated function: test_unique_predicates"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_unique_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_objects():
    """Auto-generated function: test_unique_objects"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_unique_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subject_predicates():
    """Auto-generated function: test_unique_subject_predicates"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_unique_subject_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_predicate_objects():
    """Auto-generated function: test_unique_predicate_objects"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_unique_predicate_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subject_objects():
    """Auto-generated function: test_unique_subject_objects"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_unique_subject_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_berners_lee_card_into_conjunctivegraph_default():
    """Auto-generated function: test_parse_berners_lee_card_into_conjunctivegraph_default"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_parse_berners_lee_card_into_conjunctivegraph_default()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_berners_lee_card_into_named_graph():
    """Auto-generated function: test_parse_berners_lee_card_into_named_graph"""
    try:
        response = rdflib.test_conjunctivegraph_generators.test_parse_berners_lee_card_into_named_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_publicid():
    """Auto-generated function: test_bnode_publicid"""
    try:
        response = rdflib.test_conjunctive_graph.test_bnode_publicid()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_quad_contexts():
    """Auto-generated function: test_quad_contexts"""
    try:
        response = rdflib.test_conjunctive_graph.test_quad_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_context_namespaces():
    """Auto-generated function: test_context_namespaces"""
    try:
        response = rdflib.test_conjunctive_graph.test_context_namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_deprecated():
    """Auto-generated function: test_deprecated"""
    try:
        response = rdflib.test_conjunctive_graph.test_deprecated()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph_ids_tests():
    """Auto-generated function: get_graph_ids_tests"""
    try:
        response = rdflib.test_conjunctive_graph.get_graph_ids_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_ids(checker, kws):
    """Auto-generated function: test_graph_ids"""
    try:
        response = rdflib.test_conjunctive_graph.test_graph_ids(checker, kws)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_operators_with_conjunctivegraph_and_graph():
    """Auto-generated function: test_operators_with_conjunctivegraph_and_graph"""
    try:
        response = rdflib.test_conjunctivegraph_operator_combinations.test_operators_with_conjunctivegraph_and_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_reversed_operators_with_conjunctivegraph_and_graph():
    """Auto-generated function: test_reversed_operators_with_conjunctivegraph_and_graph"""
    try:
        response = rdflib.test_conjunctivegraph_operator_combinations.test_reversed_operators_with_conjunctivegraph_and_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_reversed_operators_with_conjunctivegraph_with_contexts_and_graph():
    """Auto-generated function: test_reversed_operators_with_conjunctivegraph_with_contexts_and_graph"""
    try:
        response = rdflib.test_conjunctivegraph_operator_combinations.test_reversed_operators_with_conjunctivegraph_with_contexts_and_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_operators_with_two_conjunctivegraphs():
    """Auto-generated function: test_operators_with_two_conjunctivegraphs"""
    try:
        response = rdflib.test_conjunctivegraph_operator_combinations.test_operators_with_two_conjunctivegraphs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_operators_with_two_conjunctivegraphs_one_with_contexts():
    """Auto-generated function: test_operators_with_two_conjunctivegraphs_one_with_contexts"""
    try:
        response = rdflib.test_conjunctivegraph_operator_combinations.test_operators_with_two_conjunctivegraphs_one_with_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_operators_returning_correct_type():
    """Auto-generated function: test_operators_returning_correct_type"""
    try:
        response = rdflib.test_conjunctivegraph_operator_combinations.test_operators_returning_correct_type()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path_source_data():
    """Auto-generated function: path_source_data"""
    try:
        response = rdflib.test_shacl_extras.path_source_data()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_shacl_path(path_source_data, resource, expected):
    """Auto-generated function: test_parse_shacl_path"""
    try:
        response = rdflib.test_shacl_extras.test_parse_shacl_path(path_source_data, resource, expected)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_build_shacl_path(path_source_data, resource, path):
    """Auto-generated function: test_build_shacl_path"""
    try:
        response = rdflib.test_shacl_extras.test_build_shacl_path(path_source_data, resource, path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rdflib_to_networkx():
    """Auto-generated function: test_rdflib_to_networkx"""
    try:
        response = rdflib.test_extras_external_graph_libs.test_rdflib_to_networkx()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rdflib_to_graphtool():
    """Auto-generated function: test_rdflib_to_graphtool"""
    try:
        response = rdflib.test_extras_external_graph_libs.test_rdflib_to_graphtool()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_infix_operators_dunders():
    """Auto-generated function: test_infix_operators_dunders"""
    try:
        response = rdflib.test_infixowl.test_cover.test_infix_operators_dunders()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_infix_operators():
    """Auto-generated function: test_infix_operators"""
    try:
        response = rdflib.test_infixowl.test_cover.test_infix_operators()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname():
    """Auto-generated function: test_generateqname"""
    try:
        response = rdflib.test_infixowl.test_cover.test_generateqname()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_classorterm():
    """Auto-generated function: test_classorterm"""
    try:
        response = rdflib.test_infixowl.test_cover.test_classorterm()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_getidentifiedclasses():
    """Auto-generated function: test_getidentifiedclasses"""
    try:
        response = rdflib.test_infixowl.test_cover.test_getidentifiedclasses()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_common_ns_bindings():
    """Auto-generated function: test_common_ns_bindings"""
    try:
        response = rdflib.test_infixowl.test_cover.test_common_ns_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_allclasses():
    """Auto-generated function: test_allclasses"""
    try:
        response = rdflib.test_infixowl.test_cover.test_allclasses()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_check_allclasses():
    """Auto-generated function: test_check_allclasses"""
    try:
        response = rdflib.test_infixowl.test_cover.test_check_allclasses()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_check_allproperties():
    """Auto-generated function: test_check_allproperties"""
    try:
        response = rdflib.test_infixowl.test_cover.test_check_allproperties()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_classnamespacefactory():
    """Auto-generated function: test_classnamespacefactory"""
    try:
        response = rdflib.test_infixowl.test_cover.test_classnamespacefactory()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_componentterms():
    """Auto-generated function: test_componentterms"""
    try:
        response = rdflib.test_infixowl.test_cover.test_componentterms()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_componentterms_extended():
    """Auto-generated function: test_componentterms_extended"""
    try:
        response = rdflib.test_infixowl.test_cover.test_componentterms_extended()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_raise_malformedclasserror():
    """Auto-generated function: test_raise_malformedclasserror"""
    try:
        response = rdflib.test_infixowl.test_cover.test_raise_malformedclasserror()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_owlrdfproxylist():
    """Auto-generated function: test_owlrdfproxylist"""
    try:
        response = rdflib.test_infixowl.test_cover.test_owlrdfproxylist()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_deepclassclear():
    """Auto-generated function: test_deepclassclear"""
    try:
        response = rdflib.test_infixowl.test_cover.test_deepclassclear()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclassextenthelper():
    """Auto-generated function: test_booleanclassextenthelper"""
    try:
        response = rdflib.test_infixowl.test_cover.test_booleanclassextenthelper()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_changeoperator():
    """Auto-generated function: test_changeoperator"""
    try:
        response = rdflib.test_infixowl.test_cover.test_changeoperator()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cardinality_zero():
    """Auto-generated function: test_cardinality_zero"""
    try:
        response = rdflib.test_infixowl.test_cover.test_cardinality_zero()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_textual_infix_operators():
    """Auto-generated function: test_textual_infix_operators"""
    try:
        response = rdflib.test_infixowl.test_cover.test_textual_infix_operators()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclass_operator_as_none(graph):
    """Auto-generated function: test_booleanclass_operator_as_none"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_booleanclass_operator_as_none(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclass_operator_as_none_with_intersection(graph):
    """Auto-generated function: test_booleanclass_operator_as_none_with_intersection"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_booleanclass_operator_as_none_with_intersection(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclass_default_and_operator(graph):
    """Auto-generated function: test_booleanclass_default_and_operator"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_booleanclass_default_and_operator(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclass_with_or_operator(graph):
    """Auto-generated function: test_booleanclass_with_or_operator"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_booleanclass_with_or_operator(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_getintersections(graph):
    """Auto-generated function: test_getintersections"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_getintersections(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_getunions(graph):
    """Auto-generated function: test_getunions"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_getunions(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclass_copy(graph):
    """Auto-generated function: test_booleanclass_copy"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_booleanclass_copy(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_booleanclass_serialize(graph):
    """Auto-generated function: test_booleanclass_serialize"""
    try:
        response = rdflib.test_infixowl.test_booleanclass.test_booleanclass_serialize(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_context.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_context(graph):
    """Auto-generated function: test_context"""
    try:
        response = rdflib.test_infixowl.test_context.test_context(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_manchester_syntax.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_manchester_syntax(graph):
    """Auto-generated function: test_manchester_syntax"""
    try:
        response = rdflib.test_infixowl.test_manchester_syntax.test_manchester_syntax(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_manchester_syntax_parse_with_transientlist(graph):
    """Auto-generated function: test_manchester_syntax_parse_with_transientlist"""
    try:
        response = rdflib.test_infixowl.test_manchester_syntax.test_manchester_syntax_parse_with_transientlist(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_property.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property(graph):
    """Auto-generated function: test_property"""
    try:
        response = rdflib.test_infixowl.test_property.test_property(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_componentterms.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_componentterms_restriction():
    """Auto-generated function: test_componentterms_restriction"""
    try:
        response = rdflib.test_infixowl.test_componentterms.test_componentterms_restriction()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_componentterms_booleanclass(graph):
    """Auto-generated function: test_componentterms_booleanclass"""
    try:
        response = rdflib.test_infixowl.test_componentterms.test_componentterms_booleanclass(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_componentterms_booleanclass_bnodeid(graph):
    """Auto-generated function: test_componentterms_booleanclass_bnodeid"""
    try:
        response = rdflib.test_infixowl.test_componentterms.test_componentterms_booleanclass_bnodeid(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_class.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_instantiation(graph):
    """Auto-generated function: test_class_instantiation"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_instantiation(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_hash():
    """Auto-generated function: test_class_hash"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_hash()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_and(graph):
    """Auto-generated function: test_class_and"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_and(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_getparents(graph):
    """Auto-generated function: test_class_getparents"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_getparents(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_serialize(graph):
    """Auto-generated function: test_class_serialize"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_serialize(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_nameislabel():
    """Auto-generated function: test_class_nameislabel"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_nameislabel()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_nameisnotlabel():
    """Auto-generated function: test_class_nameisnotlabel"""
    try:
        response = rdflib.test_infixowl.test_class.test_class_nameisnotlabel()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname_using_conjunctivegraph():
    """Auto-generated function: test_generateqname_using_conjunctivegraph"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_generateqname_using_conjunctivegraph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname_using_dataset():
    """Auto-generated function: test_generateqname_using_dataset"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_generateqname_using_dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname_using_graph():
    """Auto-generated function: test_generateqname_using_graph"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_generateqname_using_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname_using_graph_and_uriref():
    """Auto-generated function: test_generateqname_using_graph_and_uriref"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_generateqname_using_graph_and_uriref()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname_using_graph_and_bnode():
    """Auto-generated function: test_generateqname_using_graph_and_bnode"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_generateqname_using_graph_and_bnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generateqname_using_graph_and_property():
    """Auto-generated function: test_generateqname_using_graph_and_property"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_generateqname_using_graph_and_property()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_class_or_term():
    """Auto-generated function: test_class_or_term"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_class_or_term()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property_or_identifier():
    """Auto-generated function: test_property_or_identifier"""
    try:
        response = rdflib.test_infixowl.test_rubric.test_property_or_identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_restriction.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_str_and_hash(graph):
    """Auto-generated function: test_restriction_str_and_hash"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_str_and_hash(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_range(graph):
    """Auto-generated function: test_restriction_range"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_range(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_onproperty(graph):
    """Auto-generated function: test_restriction_onproperty"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_onproperty(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_inputs_bnode(graph):
    """Auto-generated function: test_restriction_inputs_bnode"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_inputs_bnode(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_inputs_with_identifier(graph):
    """Auto-generated function: test_restriction_inputs_with_identifier"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_inputs_with_identifier(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_allvalues(graph):
    """Auto-generated function: test_restriction_allvalues"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_allvalues(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_somevalues(graph):
    """Auto-generated function: test_restriction_somevalues"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_somevalues(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_hasvalue(graph):
    """Auto-generated function: test_restriction_hasvalue"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_hasvalue(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_cardinality(graph):
    """Auto-generated function: test_restriction_cardinality"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_cardinality(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_cardinality_value(graph):
    """Auto-generated function: test_restriction_cardinality_value"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_cardinality_value(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_cardinality_set_value(graph):
    """Auto-generated function: test_restriction_cardinality_set_value"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_cardinality_set_value(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_maxcardinality(graph):
    """Auto-generated function: test_restriction_maxcardinality"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_maxcardinality(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_mincardinality(graph):
    """Auto-generated function: test_restriction_mincardinality"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_mincardinality(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_restriction_kind(graph):
    """Auto-generated function: test_restriction_kind"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_restriction_kind(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_deleted_restriction_kind(graph):
    """Auto-generated function: test_deleted_restriction_kind"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_deleted_restriction_kind(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_omitted_restriction_kind(graph):
    """Auto-generated function: test_omitted_restriction_kind"""
    try:
        response = rdflib.test_infixowl.test_restriction.test_omitted_restriction_kind(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_annotatableterms.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_annotatableterms_comment_gettersetter(graph):
    """Auto-generated function: test_annotatableterms_comment_gettersetter"""
    try:
        response = rdflib.test_infixowl.test_annotatableterms.test_annotatableterms_comment_gettersetter(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_annotatableterms_seealso_gettersetter(graph):
    """Auto-generated function: test_annotatableterms_seealso_gettersetter"""
    try:
        response = rdflib.test_infixowl.test_annotatableterms.test_annotatableterms_seealso_gettersetter(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_annotatableterms_label_gettersetter(graph):
    """Auto-generated function: test_annotatableterms_label_gettersetter"""
    try:
        response = rdflib.test_infixowl.test_annotatableterms.test_annotatableterms_label_gettersetter(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_enumerated_class.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_enumerated_class(graph):
    """Auto-generated function: test_enumerated_class"""
    try:
        response = rdflib.test_infixowl.test_enumerated_class.test_enumerated_class(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_enumerated_class_serialize(graph):
    """Auto-generated function: test_enumerated_class_serialize"""
    try:
        response = rdflib.test_infixowl.test_enumerated_class.test_enumerated_class_serialize(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_lshift_rlshift_delimiters():
    """Auto-generated function: test_lshift_rlshift_delimiters"""
    try:
        response = rdflib.test_infixowl.test_basic.test_lshift_rlshift_delimiters()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_matmul_rmatmul_delimiters():
    """Auto-generated function: test_matmul_rmatmul_delimiters"""
    try:
        response = rdflib.test_infixowl.test_basic.test_matmul_rmatmul_delimiters()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_infixowl_serialization():
    """Auto-generated function: test_infixowl_serialization"""
    try:
        response = rdflib.test_infixowl.test_basic.test_infixowl_serialization()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_infix_owl_example1():
    """Auto-generated function: test_infix_owl_example1"""
    try:
        response = rdflib.test_infixowl.test_basic.test_infix_owl_example1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_individual.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_infixowl_individual_type(graph):
    """Auto-generated function: test_infixowl_individual_type"""
    try:
        response = rdflib.test_infixowl.test_individual.test_infixowl_individual_type(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_infixowl_individual_label(graph):
    """Auto-generated function: test_infixowl_individual_label"""
    try:
        response = rdflib.test_infixowl.test_individual.test_infixowl_individual_label(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_individual_type_settergetter(graph):
    """Auto-generated function: test_individual_type_settergetter"""
    try:
        response = rdflib.test_infixowl.test_individual.test_individual_type_settergetter(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_individual_identity__settergetter(graph):
    """Auto-generated function: test_individual_identity__settergetter"""
    try:
        response = rdflib.test_infixowl.test_individual.test_individual_identity__settergetter(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_individual_sameas__settergetter(graph):
    """Auto-generated function: test_individual_sameas__settergetter"""
    try:
        response = rdflib.test_infixowl.test_individual.test_individual_sameas__settergetter(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_logic_structuring.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_logic_structuring(graph):
    """Auto-generated function: test_logic_structuring"""
    try:
        response = rdflib.test_infixowl.test_logic_structuring.test_logic_structuring(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_infixowl.test_ontology.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ontology_instantiation(graph):
    """Auto-generated function: test_ontology_instantiation"""
    try:
        response = rdflib.test_infixowl.test_ontology.test_ontology_instantiation(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ontology_instantiation_exists_in_graph(graph):
    """Auto-generated function: test_ontology_instantiation_exists_in_graph"""
    try:
        response = rdflib.test_infixowl.test_ontology.test_ontology_instantiation_exists_in_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method(method):
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_namespace.TestURIPattern.setup_method(method)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_repr():
    """Auto-generated function: test_repr"""
    try:
        response = rdflib.test_namespace.TestURIPattern.test_repr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_str():
    """Auto-generated function: test_str"""
    try:
        response = rdflib.test_namespace.TestClosedNamespace.test_str()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_member():
    """Auto-generated function: test_member"""
    try:
        response = rdflib.test_namespace.TestClosedNamespace.test_member()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_dcterms_title():
    """Auto-generated function: test_dcterms_title"""
    try:
        response = rdflib.test_namespace.TestNamespace.test_dcterms_title()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_iri():
    """Auto-generated function: test_iri"""
    try:
        response = rdflib.test_namespace.TestNamespace.test_iri()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_repr_ef():
    """Auto-generated function: test_repr_ef"""
    try:
        response = rdflib.test_namespace.TestClosedNamespace.test_repr_ef()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_missing_member():
    """Auto-generated function: test_missing_member"""
    try:
        response = rdflib.test_namespace.TestClosedNamespace.test_missing_member()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_format():
    """Auto-generated function: test_format"""
    try:
        response = rdflib.test_namespace.TestURIPattern.test_format()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_invalid_uri(invalid_uri):
    """Auto-generated function: test_invalid_uri"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_invalid_uri(invalid_uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_compute_qname():
    """Auto-generated function: test_compute_qname"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_compute_qname()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_reset():
    """Auto-generated function: test_reset"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_reset_preserve_prefixes():
    """Auto-generated function: test_reset_preserve_prefixes"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_reset_preserve_prefixes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n3():
    """Auto-generated function: test_n3"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_n3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n32():
    """Auto-generated function: test_n32"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_n32()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_closed_namespace():
    """Auto-generated function: test_closed_namespace"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_closed_namespace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_contains_method():
    """Auto-generated function: test_contains_method"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_contains_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_expand_curie_exception_messages():
    """Auto-generated function: test_expand_curie_exception_messages"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_expand_curie_exception_messages()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_expand_curie(curie, expected_result):
    """Auto-generated function: test_expand_curie"""
    try:
        response = rdflib.test_namespace.TestNamespacePrefix.test_expand_curie(curie, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_qb():
    """Auto-generated function: test_definednamespace_creator_qb"""
    try:
        response = rdflib.test_definednamespace.test_definednamespace_creator_qb()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_fake():
    """Auto-generated function: test_definednamespace_creator_fake"""
    try:
        response = rdflib.test_definednamespace.test_definednamespace_creator_fake()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_bad_ns():
    """Auto-generated function: test_definednamespace_creator_bad_ns"""
    try:
        response = rdflib.test_definednamespace.test_definednamespace_creator_bad_ns()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_dir():
    """Auto-generated function: test_definednamespace_dir"""
    try:
        response = rdflib.test_definednamespace.test_definednamespace_dir()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_jsonld_context():
    """Auto-generated function: test_definednamespace_jsonld_context"""
    try:
        response = rdflib.test_definednamespace.test_definednamespace_jsonld_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_dfns_info(dfns):
    """Auto-generated function: get_dfns_info"""
    try:
        response = rdflib.test_definednamespace.get_dfns_info(dfns)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dfns(request):
    """Auto-generated function: dfns"""
    try:
        response = rdflib.test_definednamespace.dfns(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_repr(dfns):
    """Auto-generated function: test_repr"""
    try:
        response = rdflib.test_definednamespace.test_repr(dfns)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_inspect(dfns):
    """Auto-generated function: test_inspect"""
    try:
        response = rdflib.test_definednamespace.test_inspect(dfns)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_value(dfns, attr_name, is_defined):
    """Auto-generated function: test_value"""
    try:
        response = rdflib.test_definednamespace.test_value(dfns, attr_name, is_defined)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_contains(dfns, attr_name, is_defined):
    """Auto-generated function: test_contains"""
    try:
        response = rdflib.test_definednamespace.test_contains(dfns, attr_name, is_defined)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_hasattr(dfns, attr_name, is_defined):
    """Auto-generated function: test_hasattr"""
    try:
        response = rdflib.test_definednamespace.test_hasattr(dfns, attr_name, is_defined)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_dir(dfns):
    """Auto-generated function: test_dir"""
    try:
        response = rdflib.test_definednamespace.test_dir(dfns)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_dir():
    """Auto-generated function: test_definednamespace_dir"""
    try:
        response = rdflib.test_definednamespace_dir.test_definednamespace_dir()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_core_prefixes_bound():
    """Auto-generated function: test_core_prefixes_bound"""
    try:
        response = rdflib.test_namespacemanager.test_core_prefixes_bound()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rdflib_prefixes_bound():
    """Auto-generated function: test_rdflib_prefixes_bound"""
    try:
        response = rdflib.test_namespacemanager.test_rdflib_prefixes_bound()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cc_prefixes_bound():
    """Auto-generated function: test_cc_prefixes_bound"""
    try:
        response = rdflib.test_namespacemanager.test_cc_prefixes_bound()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebinding():
    """Auto-generated function: test_rebinding"""
    try:
        response = rdflib.test_namespacemanager.test_rebinding()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_replace():
    """Auto-generated function: test_replace"""
    try:
        response = rdflib.test_namespacemanager.test_replace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_invalid_selector():
    """Auto-generated function: test_invalid_selector"""
    try:
        response = rdflib.test_namespacemanager.test_invalid_selector()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_graph_ns(graph, expected_nsmap, check_namespaces):
    """Auto-generated function: check_graph_ns"""
    try:
        response = rdflib.test_namespacemanager.check_graph_ns(graph, expected_nsmap, check_namespaces)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_bind_namespaces(selector, expected_result):
    """Auto-generated function: test_graph_bind_namespaces"""
    try:
        response = rdflib.test_namespacemanager.test_graph_bind_namespaces(selector, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nman_bind_namespaces(selector, expected_result):
    """Auto-generated function: test_nman_bind_namespaces"""
    try:
        response = rdflib.test_namespacemanager.test_nman_bind_namespaces(selector, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bound_namespaces_subset(selector, expected_bindings):
    """Auto-generated function: test_bound_namespaces_subset"""
    try:
        response = rdflib.test_namespacemanager.test_bound_namespaces_subset(selector, expected_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_compute_qname_no_generate():
    """Auto-generated function: test_compute_qname_no_generate"""
    try:
        response = rdflib.test_namespacemanager.test_compute_qname_no_generate()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_compute_qname(uri, generate, bind_namespaces, manager_prefixes, graph_prefixes, store_prefixes, expected_result):
    """Auto-generated function: test_compute_qname"""
    try:
        response = rdflib.test_namespacemanager.test_compute_qname(uri, generate, bind_namespaces, manager_prefixes, graph_prefixes, store_prefixes, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_compute_qname_strict(uri, generate, bind_namespaces, additional_prefixes, expected_result):
    """Auto-generated function: test_compute_qname_strict"""
    try:
        response = rdflib.test_namespacemanager.test_compute_qname_strict(uri, generate, bind_namespaces, additional_prefixes, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_test_nsm():
    """Auto-generated function: make_test_nsm"""
    try:
        response = rdflib.test_namespacemanager.make_test_nsm()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nsm_session():
    """Auto-generated function: test_nsm_session"""
    try:
        response = rdflib.test_namespacemanager.test_nsm_session()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nsm_function():
    """Auto-generated function: test_nsm_function"""
    try:
        response = rdflib.test_namespacemanager.test_nsm_function()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_expand_curie(test_nsm_session, curie, expected_result):
    """Auto-generated function: test_expand_curie"""
    try:
        response = rdflib.test_namespacemanager.test_expand_curie(test_nsm_session, curie, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_generate_curie(test_nsm_function, uri, generate, expected_result):
    """Auto-generated function: test_generate_curie"""
    try:
        response = rdflib.test_namespacemanager.test_generate_curie(test_nsm_function, uri, generate, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_qb():
    """Auto-generated function: test_definednamespace_creator_qb"""
    try:
        response = rdflib.test_definednamespace_creator.test_definednamespace_creator_qb()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_fake():
    """Auto-generated function: test_definednamespace_creator_fake"""
    try:
        response = rdflib.test_definednamespace_creator.test_definednamespace_creator_fake()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_bad_ns():
    """Auto-generated function: test_definednamespace_creator_bad_ns"""
    try:
        response = rdflib.test_definednamespace_creator.test_definednamespace_creator_bad_ns()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_definednamespace_creator_multiple_comments():
    """Auto-generated function: test_definednamespace_creator_multiple_comments"""
    try:
        response = rdflib.test_definednamespace_creator.test_definednamespace_creator_multiple_comments()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_get_target_namespace_elements(rdfs_graph):
    """Auto-generated function: test_get_target_namespace_elements"""
    try:
        response = rdflib.test_definednamespace_creator.test_get_target_namespace_elements(rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_GET():
    """Auto-generated function: do_GET"""
    try:
        response = rdflib.test_graph_http.ContentNegotiationHandler.do_GET()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def log_message():
    """Auto-generated function: log_message"""
    try:
        response = rdflib.test_graph_http.ContentNegotiationHandler.log_message()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_content_negotiation():
    """Auto-generated function: test_content_negotiation"""
    try:
        response = rdflib.test_graph_http.TestGraphHTTP.test_content_negotiation()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_content_negotiation_no_format():
    """Auto-generated function: test_content_negotiation_no_format"""
    try:
        response = rdflib.test_graph_http.TestGraphHTTP.test_content_negotiation_no_format()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_source():
    """Auto-generated function: test_source"""
    try:
        response = rdflib.test_graph_http.TestGraphHTTP.test_source()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_3xx():
    """Auto-generated function: test_3xx"""
    try:
        response = rdflib.test_graph_http.TestGraphHTTP.test_3xx()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_5xx():
    """Auto-generated function: test_5xx"""
    try:
        response = rdflib.test_graph_http.TestGraphHTTP.test_5xx()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_iri_source(url_suffix, expected_request, function_httpmock):
    """Auto-generated function: test_iri_source"""
    try:
        response = rdflib.test_graph_http.test_iri_source(url_suffix, expected_request, function_httpmock)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_stuff(graph):
    """Auto-generated function: add_stuff"""
    try:
        response = rdflib.test_graph_generators.add_stuff(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subjects():
    """Auto-generated function: test_unique_subjects"""
    try:
        response = rdflib.test_graph_generators.test_unique_subjects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_predicates():
    """Auto-generated function: test_unique_predicates"""
    try:
        response = rdflib.test_graph_generators.test_unique_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_objects():
    """Auto-generated function: test_unique_objects"""
    try:
        response = rdflib.test_graph_generators.test_unique_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subject_predicates():
    """Auto-generated function: test_unique_subject_predicates"""
    try:
        response = rdflib.test_graph_generators.test_unique_subject_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_predicate_objects():
    """Auto-generated function: test_unique_predicate_objects"""
    try:
        response = rdflib.test_graph_generators.test_unique_predicate_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subject_objects():
    """Auto-generated function: test_unique_subject_objects"""
    try:
        response = rdflib.test_graph_generators.test_unique_subject_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_berners_lee_card_into_graph():
    """Auto-generated function: test_parse_berners_lee_card_into_graph"""
    try:
        response = rdflib.test_graph_generators.test_parse_berners_lee_card_into_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph():
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.test_graph_cbd.get_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testCbd(get_graph):
    """Auto-generated function: testCbd"""
    try:
        response = rdflib.test_graph_cbd.testCbd(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testCbdReified(get_graph):
    """Auto-generated function: testCbdReified"""
    try:
        response = rdflib.test_graph_cbd.testCbdReified(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cbd_example():
    """Auto-generated function: test_cbd_example"""
    try:
        response = rdflib.test_graph_cbd.test_cbd_example()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cbd_target(rdfs_graph):
    """Auto-generated function: test_cbd_target"""
    try:
        response = rdflib.test_graph_cbd.test_cbd_target(rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_slice():
    """Auto-generated function: test_slice"""
    try:
        response = rdflib.test_slice.TestGraphSlice.test_slice()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_slice_eg():
    """Auto-generated function: test_graph_slice_eg"""
    try:
        response = rdflib.test_slice.test_graph_slice_eg()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_slice_all():
    """Auto-generated function: test_graph_slice_all"""
    try:
        response = rdflib.test_slice.test_graph_slice_all()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check(graph):
    """Auto-generated function: check"""
    try:
        response = rdflib.test_variants.GraphAsserts.check(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_path(cls, path):
    """Auto-generated function: from_path"""
    try:
        response = rdflib.test_variants.GraphAsserts.from_path(cls, path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_param(marks):
    """Auto-generated function: pytest_param"""
    try:
        response = rdflib.test_variants.GraphVariants.pytest_param(marks)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def public_id():
    """Auto-generated function: public_id"""
    try:
        response = rdflib.test_variants.GraphVariants.public_id()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def preferred_variant():
    """Auto-generated function: preferred_variant"""
    try:
        response = rdflib.test_variants.GraphVariants.preferred_variant()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load(variant_key, graph_type):
    """Auto-generated function: load"""
    try:
        response = rdflib.test_variants.GraphVariants.load(variant_key, graph_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def for_files(cls, file_paths, basedir):
    """Auto-generated function: for_files"""
    try:
        response = rdflib.test_variants.GraphVariants.for_files(cls, file_paths, basedir)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def for_directory(cls, directory, basedir):
    """Auto-generated function: for_directory"""
    try:
        response = rdflib.test_variants.GraphVariants.for_directory(cls, directory, basedir)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def tests_found():
    """Auto-generated function: tests_found"""
    try:
        response = rdflib.test_variants.tests_found()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load_preferred(graph_variants):
    """Auto-generated function: load_preferred"""
    try:
        response = rdflib.test_variants.load_preferred(graph_variants)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_variant_source_cases():
    """Auto-generated function: make_variant_source_cases"""
    try:
        response = rdflib.test_variants.make_variant_source_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_variant_source(graph_variants, variant_key):
    """Auto-generated function: test_variant_source"""
    try:
        response = rdflib.test_variants.test_variant_source(graph_variants, variant_key)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_ns(graph, expected_bindings):
    """Auto-generated function: check_ns"""
    try:
        response = rdflib.test_graph_store.check_ns(graph, expected_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override, replace):
    """Auto-generated function: bind"""
    try:
        response = rdflib.test_graph_store.GraphWithoutBindOverrideFix.bind(prefix, namespace, override, replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_graph_store_bind_cases(store_type, graph_type):
    """Auto-generated function: make_graph_store_bind_cases"""
    try:
        response = rdflib.test_graph_store.make_graph_store_bind_cases(store_type, graph_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_store_bind(graph_factory, ops, expected_bindings):
    """Auto-generated function: test_graph_store_bind"""
    try:
        response = rdflib.test_graph_store.test_graph_store_bind(graph_factory, ops, expected_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_query_graph(graph_factory, query_graph):
    """Auto-generated function: test_query_query_graph"""
    try:
        response = rdflib.test_graph_store.test_query_query_graph(graph_factory, query_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_update_query_graph(graph_factory, query_graph):
    """Auto-generated function: test_update_query_graph"""
    try:
        response = rdflib.test_graph_store.test_update_query_graph(graph_factory, query_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property_store():
    """Auto-generated function: test_property_store"""
    try:
        response = rdflib.test_graph.test_property_store()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property_identifier_default():
    """Auto-generated function: test_property_identifier_default"""
    try:
        response = rdflib.test_graph.test_property_identifier_default()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property_identifier():
    """Auto-generated function: test_property_identifier"""
    try:
        response = rdflib.test_graph.test_property_identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property_namespace_manager():
    """Auto-generated function: test_property_namespace_manager"""
    try:
        response = rdflib.test_graph.test_property_namespace_manager()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_store_names():
    """Auto-generated function: get_store_names"""
    try:
        response = rdflib.test_graph.get_store_names()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_graph(tmp_path, request):
    """Auto-generated function: make_graph"""
    try:
        response = rdflib.test_graph.make_graph(tmp_path, request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def populate_graph(graph):
    """Auto-generated function: populate_graph"""
    try:
        response = rdflib.test_graph.populate_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def depopulate_graph(graph):
    """Auto-generated function: depopulate_graph"""
    try:
        response = rdflib.test_graph.depopulate_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add(make_graph):
    """Auto-generated function: test_add"""
    try:
        response = rdflib.test_graph.test_add(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove(make_graph):
    """Auto-generated function: test_remove"""
    try:
        response = rdflib.test_graph.test_remove(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_triples(make_graph):
    """Auto-generated function: test_triples"""
    try:
        response = rdflib.test_graph.test_triples(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_connected(make_graph):
    """Auto-generated function: test_connected"""
    try:
        response = rdflib.test_graph.test_connected(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_sub(make_graph):
    """Auto-generated function: test_graph_sub"""
    try:
        response = rdflib.test_graph.test_graph_sub(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_add(make_graph):
    """Auto-generated function: test_graph_add"""
    try:
        response = rdflib.test_graph.test_graph_add(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_intersection(make_graph):
    """Auto-generated function: test_graph_intersection"""
    try:
        response = rdflib.test_graph.test_graph_intersection(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_guess_format_for_parse(make_graph, http_file_server):
    """Auto-generated function: test_guess_format_for_parse"""
    try:
        response = rdflib.test_graph.test_guess_format_for_parse(make_graph, http_file_server)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_guess_format_for_parse_http(make_graph, http_file_server, file, content_type, expected_result):
    """Auto-generated function: test_guess_format_for_parse_http"""
    try:
        response = rdflib.test_graph.test_guess_format_for_parse_http(make_graph, http_file_server, file, content_type, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_guess_format_for_parse_http_text_plain():
    """Auto-generated function: test_guess_format_for_parse_http_text_plain"""
    try:
        response = rdflib.test_graph.test_guess_format_for_parse_http_text_plain()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_file_uri(make_graph):
    """Auto-generated function: test_parse_file_uri"""
    try:
        response = rdflib.test_graph.test_parse_file_uri(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_transitive(make_graph):
    """Auto-generated function: test_transitive"""
    try:
        response = rdflib.test_graph.test_transitive(make_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def my_method():
    """Auto-generated function: my_method"""
    try:
        response = rdflib.test_graph_operator.MyGraph.my_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subclass_add_operator():
    """Auto-generated function: test_subclass_add_operator"""
    try:
        response = rdflib.test_graph_operator.test_subclass_add_operator()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subclass_sub_operator():
    """Auto-generated function: test_subclass_sub_operator"""
    try:
        response = rdflib.test_graph_operator.test_subclass_sub_operator()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subclass_mul_operator():
    """Auto-generated function: test_subclass_mul_operator"""
    try:
        response = rdflib.test_graph_operator.test_subclass_mul_operator()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_digest_value(rdf, mimetype):
    """Auto-generated function: get_digest_value"""
    try:
        response = rdflib.test_canonicalization.get_digest_value(rdf, mimetype)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def negative_graph_match_test():
    """Auto-generated function: negative_graph_match_test"""
    try:
        response = rdflib.test_canonicalization.negative_graph_match_test()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_negative_graph_match(fn, rdf1, rdf2, identical):
    """Auto-generated function: test_negative_graph_match"""
    try:
        response = rdflib.test_canonicalization.test_negative_graph_match(fn, rdf1, rdf2, identical)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue494_collapsing_bnodes():
    """Auto-generated function: test_issue494_collapsing_bnodes"""
    try:
        response = rdflib.test_canonicalization.test_issue494_collapsing_bnodes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue682_signing_named_graphs():
    """Auto-generated function: test_issue682_signing_named_graphs"""
    try:
        response = rdflib.test_canonicalization.test_issue682_signing_named_graphs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue725_collapsing_bnodes_2():
    """Auto-generated function: test_issue725_collapsing_bnodes_2"""
    try:
        response = rdflib.test_canonicalization.test_issue725_collapsing_bnodes_2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_consistent_ids():
    """Auto-generated function: test_consistent_ids"""
    try:
        response = rdflib.test_canonicalization.TestConsistency.test_consistent_ids()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_a():
    """Auto-generated function: test_a"""
    try:
        response = rdflib.test_diff.TestDiff.test_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_b():
    """Auto-generated function: test_b"""
    try:
        response = rdflib.test_diff.TestDiff.test_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_subsets():
    """Auto-generated function: test_subsets"""
    try:
        response = rdflib.test_diff.TestDiff.test_subsets()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def as_element_set(value):
    """Auto-generated function: as_element_set"""
    try:
        response = rdflib.test_diff.GraphDiffCase.as_element_set(value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expected_in_both_set():
    """Auto-generated function: expected_in_both_set"""
    try:
        response = rdflib.test_diff.GraphDiffCase.expected_in_both_set()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expected_in_lhs_set():
    """Auto-generated function: expected_in_lhs_set"""
    try:
        response = rdflib.test_diff.GraphDiffCase.expected_in_lhs_set()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expected_in_rhs_set():
    """Auto-generated function: expected_in_rhs_set"""
    try:
        response = rdflib.test_diff.GraphDiffCase.expected_in_rhs_set()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def as_params():
    """Auto-generated function: as_params"""
    try:
        response = rdflib.test_diff.GraphDiffCase.as_params()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_assert_sets_equal(test_case):
    """Auto-generated function: test_assert_sets_equal"""
    try:
        response = rdflib.test_diff.test_assert_sets_equal(test_case)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_redirect_new_host(function_httpmocks):
    """Auto-generated function: test_graph_redirect_new_host"""
    try:
        response = rdflib.test_graph_redirect.test_graph_redirect_new_host(function_httpmocks)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_class(cls):
    """Auto-generated function: setup_class"""
    try:
        response = rdflib.test_container.TestContainer.setup_class(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_a():
    """Auto-generated function: test_a"""
    try:
        response = rdflib.test_container.TestContainer.test_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_b():
    """Auto-generated function: test_b"""
    try:
        response = rdflib.test_container.TestContainer.test_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_c():
    """Auto-generated function: test_c"""
    try:
        response = rdflib.test_container.TestContainer.test_c()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_d():
    """Auto-generated function: test_d"""
    try:
        response = rdflib.test_container.TestContainer.test_d()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_e():
    """Auto-generated function: test_e"""
    try:
        response = rdflib.test_container.TestContainer.test_e()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_f():
    """Auto-generated function: test_f"""
    try:
        response = rdflib.test_container.TestContainer.test_f()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_g():
    """Auto-generated function: test_g"""
    try:
        response = rdflib.test_container.TestContainer.test_g()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_h():
    """Auto-generated function: test_h"""
    try:
        response = rdflib.test_container.TestContainer.test_h()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_i():
    """Auto-generated function: test_i"""
    try:
        response = rdflib.test_container.TestContainer.test_i()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_j():
    """Auto-generated function: test_j"""
    try:
        response = rdflib.test_container.TestContainer.test_j()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_k():
    """Auto-generated function: test_k"""
    try:
        response = rdflib.test_container.TestContainer.test_k()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_l():
    """Auto-generated function: test_l"""
    try:
        response = rdflib.test_container.TestContainer.test_l()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_m():
    """Auto-generated function: test_m"""
    try:
        response = rdflib.test_container.TestContainer.test_m()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_n():
    """Auto-generated function: test_n"""
    try:
        response = rdflib.test_container.TestContainer.test_n()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_o():
    """Auto-generated function: test_o"""
    try:
        response = rdflib.test_container.TestContainer.test_o()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_p():
    """Auto-generated function: test_p"""
    try:
        response = rdflib.test_container.TestContainer.test_p()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_q():
    """Auto-generated function: test_q"""
    try:
        response = rdflib.test_container.TestContainer.test_q()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_r():
    """Auto-generated function: test_r"""
    try:
        response = rdflib.test_container.TestContainer.test_r()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def checkFormulaStore(store, configString):
    """Auto-generated function: checkFormulaStore"""
    try:
        response = rdflib.test_graph_formula.checkFormulaStore(store, configString)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_formula_stores_tests():
    """Auto-generated function: get_formula_stores_tests"""
    try:
        response = rdflib.test_graph_formula.get_formula_stores_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_formula_stores(checker, name):
    """Auto-generated function: test_formula_stores"""
    try:
        response = rdflib.test_graph_formula.test_formula_stores(checker, name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_batch_size_zero_denied():
    """Auto-generated function: test_batch_size_zero_denied"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_batch_size_zero_denied()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_batch_size_none_denied():
    """Auto-generated function: test_batch_size_none_denied"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_batch_size_none_denied()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_batch_size_one_denied():
    """Auto-generated function: test_batch_size_one_denied"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_batch_size_one_denied()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_batch_size_negative_denied():
    """Auto-generated function: test_batch_size_negative_denied"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_batch_size_negative_denied()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_exit_submits_partial_batch():
    """Auto-generated function: test_exit_submits_partial_batch"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_exit_submits_partial_batch()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_more_than_batch_size():
    """Auto-generated function: test_add_more_than_batch_size"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_add_more_than_batch_size()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_quad_for_non_conjunctive_empty():
    """Auto-generated function: test_add_quad_for_non_conjunctive_empty"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_add_quad_for_non_conjunctive_empty()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_quad_for_non_conjunctive_pass_on_context_matches():
    """Auto-generated function: test_add_quad_for_non_conjunctive_pass_on_context_matches"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_add_quad_for_non_conjunctive_pass_on_context_matches()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_addN_on_exception():
    """Auto-generated function: test_no_addN_on_exception"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_no_addN_on_exception()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_addN_batching_addN():
    """Auto-generated function: test_addN_batching_addN"""
    try:
        response = rdflib.test_batch_add.TestBatchAddGraph.test_addN_batching_addN()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_aggregate_raw():
    """Auto-generated function: test_aggregate_raw"""
    try:
        response = rdflib.test_aggregate_graphs.test_aggregate_raw()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_aggregate2():
    """Auto-generated function: test_aggregate2"""
    try:
        response = rdflib.test_aggregate_graphs.test_aggregate2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_items():
    """Auto-generated function: test_items"""
    try:
        response = rdflib.test_graph_items.test_items()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_recursive_list_detection():
    """Auto-generated function: test_recursive_list_detection"""
    try:
        response = rdflib.test_graph_items.test_recursive_list_detection()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setUp():
    """Auto-generated function: setUp"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.setUp()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def tearDown():
    """Auto-generated function: tearDown"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.tearDown()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_stuff():
    """Auto-generated function: add_stuff"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.add_stuff()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_stuff():
    """Auto-generated function: remove_stuff"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.remove_stuff()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_stuff_in_multiple_contexts():
    """Auto-generated function: add_stuff_in_multiple_contexts"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.add_stuff_in_multiple_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_conjunction():
    """Auto-generated function: test_conjunction"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_conjunction()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add():
    """Auto-generated function: test_add"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_add()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove():
    """Auto-generated function: test_remove"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_remove()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_len_in_one_context():
    """Auto-generated function: test_len_in_one_context"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_len_in_one_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_len_in_multiple_contexts():
    """Auto-generated function: test_len_in_multiple_contexts"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_len_in_multiple_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_in_multiple_contexts():
    """Auto-generated function: test_remove_in_multiple_contexts"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_remove_in_multiple_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_contexts():
    """Auto-generated function: test_contexts"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_context():
    """Auto-generated function: test_remove_context"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_remove_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_any():
    """Auto-generated function: test_remove_any"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_remove_any()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_triples():
    """Auto-generated function: test_triples"""
    try:
        response = rdflib.test_graph_context.ContextTestCase.test_triples()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_skolemization(node, expected_uri):
    """Auto-generated function: test_skolemization"""
    try:
        response = rdflib.test_skolemization.test_skolemization(node, expected_uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_deskolemization(iri, expected_bnode_value):
    """Auto-generated function: test_deskolemization"""
    try:
        response = rdflib.test_skolemization.test_deskolemization(iri, expected_bnode_value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_binding_replace():
    """Auto-generated function: test_binding_replace"""
    try:
        response = rdflib.test_namespace_rebinding.test_binding_replace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prefix_alias_disallowed():
    """Auto-generated function: test_prefix_alias_disallowed"""
    try:
        response = rdflib.test_namespace_rebinding.test_prefix_alias_disallowed()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebind_prefix_succeeds():
    """Auto-generated function: test_rebind_prefix_succeeds"""
    try:
        response = rdflib.test_namespace_rebinding.test_rebind_prefix_succeeds()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_rebinds_prefix():
    """Auto-generated function: test_parse_rebinds_prefix"""
    try:
        response = rdflib.test_namespace_rebinding.test_parse_rebinds_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_automatic_handling_of_unknown_predicates():
    """Auto-generated function: test_automatic_handling_of_unknown_predicates"""
    try:
        response = rdflib.test_namespace_rebinding.test_automatic_handling_of_unknown_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_automatic_handling_of_unknown_predicates_only_effected_after_serialization():
    """Auto-generated function: test_automatic_handling_of_unknown_predicates_only_effected_after_serialization"""
    try:
        response = rdflib.test_namespace_rebinding.test_automatic_handling_of_unknown_predicates_only_effected_after_serialization()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multigraph_bindings():
    """Auto-generated function: test_multigraph_bindings"""
    try:
        response = rdflib.test_namespace_rebinding.test_multigraph_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_new_namespace_new_prefix():
    """Auto-generated function: test_new_namespace_new_prefix"""
    try:
        response = rdflib.test_namespace_rebinding.test_new_namespace_new_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_change_prefix_override_true():
    """Auto-generated function: test_change_prefix_override_true"""
    try:
        response = rdflib.test_namespace_rebinding.test_change_prefix_override_true()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_change_prefix_override_false():
    """Auto-generated function: test_change_prefix_override_false"""
    try:
        response = rdflib.test_namespace_rebinding.test_change_prefix_override_false()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_change_namespace_override_true():
    """Auto-generated function: test_change_namespace_override_true"""
    try:
        response = rdflib.test_namespace_rebinding.test_change_namespace_override_true()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_change_namespace_override_false():
    """Auto-generated function: test_change_namespace_override_false"""
    try:
        response = rdflib.test_namespace_rebinding.test_change_namespace_override_false()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_new_namespace_override_false():
    """Auto-generated function: test_new_namespace_override_false"""
    try:
        response = rdflib.test_namespace_rebinding.test_new_namespace_override_false()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_change_namespace_and_prefix():
    """Auto-generated function: test_change_namespace_and_prefix"""
    try:
        response = rdflib.test_namespace_rebinding.test_change_namespace_and_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def info_dict(cls):
    """Auto-generated function: info_dict"""
    try:
        response = rdflib.result.ResultFormat.info_dict(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def info():
    """Auto-generated function: info"""
    try:
        response = rdflib.result.ResultFormat.info()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def set(cls):
    """Auto-generated function: set"""
    try:
        response = rdflib.result.ResultFormat.set(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_dict(cls):
    """Auto-generated function: make_dict"""
    try:
        response = rdflib.result.ResultFormatInfo.make_dict(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def comparable_node(node):
    """Auto-generated function: comparable_node"""
    try:
        response = rdflib.result.comparable_node(node)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def comparable_bindings(bindings):
    """Auto-generated function: comparable_bindings"""
    try:
        response = rdflib.result.comparable_bindings(bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bindings_diff(lhs, rhs):
    """Auto-generated function: bindings_diff"""
    try:
        response = rdflib.result.bindings_diff(lhs, rhs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def comparable_collection(bcollection, skip_duplicates):
    """Auto-generated function: comparable_collection"""
    try:
        response = rdflib.result.comparable_collection(bcollection, skip_duplicates)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_bindings_collections_equal(lhs, rhs, invert, skip_duplicates):
    """Auto-generated function: assert_bindings_collections_equal"""
    try:
        response = rdflib.result.assert_bindings_collections_equal(lhs, rhs, invert, skip_duplicates)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def info_set(cls):
    """Auto-generated function: info_set"""
    try:
        response = rdflib.result.ResultFormat.info_set(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def name():
    """Auto-generated function: name"""
    try:
        response = rdflib.result.ResultFormatInfo.name()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_chdir(newdir):
    """Auto-generated function: ctx_chdir"""
    try:
        response = rdflib.path.ctx_chdir(newdir)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_spypair(method):
    """Auto-generated function: make_spypair"""
    try:
        response = rdflib.httpservermock.make_spypair(method)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_do_handler(cls, method_name, requests, responses):
    """Auto-generated function: make_do_handler"""
    try:
        response = rdflib.httpservermock.BaseHTTPServerMock.make_do_handler(cls, method_name, requests, responses)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.httpservermock.BaseHTTPServerMock.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def call_count():
    """Auto-generated function: call_count"""
    try:
        response = rdflib.httpservermock.BaseHTTPServerMock.call_count()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def stop():
    """Auto-generated function: stop"""
    try:
        response = rdflib.httpservermock.ServedBaseHTTPServerMock.stop()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def address_string():
    """Auto-generated function: address_string"""
    try:
        response = rdflib.httpservermock.ServedBaseHTTPServerMock.address_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def url():
    """Auto-generated function: url"""
    try:
        response = rdflib.httpservermock.ServedBaseHTTPServerMock.url()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_ref(tmp_path, encoding, path_factory):
    """Auto-generated function: make_ref"""
    try:
        response = rdflib.destination.DestinationType.make_ref(tmp_path, encoding, path_factory)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def context_urlopener(opener):
    """Auto-generated function: context_urlopener"""
    try:
        response = rdflib.urlopen.context_urlopener(opener)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def header_items(headers):
    """Auto-generated function: header_items"""
    try:
        response = rdflib.http.header_items(headers)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def apply_headers_to(headers, handler):
    """Auto-generated function: apply_headers_to"""
    try:
        response = rdflib.http.apply_headers_to(headers, handler)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_random_ip(ip_prefix):
    """Auto-generated function: get_random_ip"""
    try:
        response = rdflib.http.get_random_ip(ip_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_http_handler(handler, host):
    """Auto-generated function: ctx_http_handler"""
    try:
        response = rdflib.http.ctx_http_handler(handler, host)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_http_server(server):
    """Auto-generated function: ctx_http_server"""
    try:
        response = rdflib.http.ctx_http_server(server)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def headers_as_message(headers):
    """Auto-generated function: headers_as_message"""
    try:
        response = rdflib.http.headers_as_message(headers)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check(actual):
    """Auto-generated function: check"""
    try:
        response = rdflib.literal.LiteralChecker.check(actual)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def literal_idfn(value):
    """Auto-generated function: literal_idfn"""
    try:
        response = rdflib.literal.literal_idfn(value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path():
    """Auto-generated function: path"""
    try:
        response = rdflib.httpfileserver.HTTPFileInfo.path()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def request_url():
    """Auto-generated function: request_url"""
    try:
        response = rdflib.httpfileserver.HTTPFileInfo.request_url()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def effective_url():
    """Auto-generated function: effective_url"""
    try:
        response = rdflib.httpfileserver.HTTPFileInfo.effective_url()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def url():
    """Auto-generated function: url"""
    try:
        response = rdflib.httpfileserver.HTTPFileServer.url()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_file_with_caching(proto_file, proto_redirects, suffix):
    """Auto-generated function: add_file_with_caching"""
    try:
        response = rdflib.httpfileserver.HTTPFileServer.add_file_with_caching(proto_file, proto_redirects, suffix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_file(proto_file, proto_redirects, suffix):
    """Auto-generated function: add_file"""
    try:
        response = rdflib.httpfileserver.HTTPFileServer.add_file(proto_file, proto_redirects, suffix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_handler():
    """Auto-generated function: make_handler"""
    try:
        response = rdflib.httpfileserver.HTTPFileServer.make_handler()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query_with_retry(graph, query):
    """Auto-generated function: query_with_retry"""
    try:
        response = rdflib.helper.query_with_retry(graph, query)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def read_manifest(f, base, legacy):
    """Auto-generated function: read_manifest"""
    try:
        response = rdflib.manifest.read_manifest(f, base, legacy)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def guess_format(cls, path):
    """Auto-generated function: guess_format"""
    try:
        response = rdflib.graph.GraphSource.guess_format(cls, path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_path(cls, path, public_id, format):
    """Auto-generated function: from_path"""
    try:
        response = rdflib.graph.GraphSource.from_path(cls, path, public_id, format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_paths(cls):
    """Auto-generated function: from_paths"""
    try:
        response = rdflib.graph.GraphSource.from_paths(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_source(cls, source, public_id):
    """Auto-generated function: from_source"""
    try:
        response = rdflib.graph.GraphSource.from_source(cls, source, public_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def public_id_or_path_uri():
    """Auto-generated function: public_id_or_path_uri"""
    try:
        response = rdflib.graph.GraphSource.public_id_or_path_uri()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load(graph, public_id, graph_type):
    """Auto-generated function: load"""
    try:
        response = rdflib.graph.GraphSource.load(graph, public_id, graph_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def idfn(cls, val):
    """Auto-generated function: idfn"""
    try:
        response = rdflib.graph.GraphSource.idfn(cls, val)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load_sources():
    """Auto-generated function: load_sources"""
    try:
        response = rdflib.graph.load_sources()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def cached_graph(sources, public_id, graph_type):
    """Auto-generated function: cached_graph"""
    try:
        response = rdflib.graph.cached_graph(sources, public_id, graph_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load_from_python(path, graph, graph_type):
    """Auto-generated function: load_from_python"""
    try:
        response = rdflib.graph.load_from_python(path, graph, graph_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.dawg_manifest.ManifestEntry.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uri_mapper():
    """Auto-generated function: uri_mapper"""
    try:
        response = rdflib.dawg_manifest.ManifestEntry.uri_mapper()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def param(mark_dict, markers):
    """Auto-generated function: param"""
    try:
        response = rdflib.dawg_manifest.ManifestEntry.param(mark_dict, markers)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def value(predicate, value_type):
    """Auto-generated function: value"""
    try:
        response = rdflib.dawg_manifest.ManifestEntry.value(predicate, value_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_filters(filters):
    """Auto-generated function: check_filters"""
    try:
        response = rdflib.dawg_manifest.ManifestEntry.check_filters(filters)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_graph(cls, uri_mapper, graph, report_prefix):
    """Auto-generated function: from_graph"""
    try:
        response = rdflib.dawg_manifest.Manifest.from_graph(cls, uri_mapper, graph, report_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_sources(cls, uri_mapper):
    """Auto-generated function: from_sources"""
    try:
        response = rdflib.dawg_manifest.Manifest.from_sources(cls, uri_mapper)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def included():
    """Auto-generated function: included"""
    try:
        response = rdflib.dawg_manifest.Manifest.included()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def entires(entry_type, exclude, include):
    """Auto-generated function: entires"""
    try:
        response = rdflib.dawg_manifest.Manifest.entires(entry_type, exclude, include)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def params(entry_type, exclude, include, mark_dict, markers):
    """Auto-generated function: params"""
    try:
        response = rdflib.dawg_manifest.Manifest.params(entry_type, exclude, include, mark_dict, markers)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def params_from_sources(uri_mapper, entry_type):
    """Auto-generated function: params_from_sources"""
    try:
        response = rdflib.dawg_manifest.params_from_sources(uri_mapper, entry_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_dict(cls):
    """Auto-generated function: make_dict"""
    try:
        response = rdflib.sparql_checker.TypeInfo.make_dict(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_graph(cls, graph, identifier):
    """Auto-generated function: from_graph"""
    try:
        response = rdflib.sparql_checker.GraphData.from_graph(cls, graph, identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load_into(manifest, dataset):
    """Auto-generated function: load_into"""
    try:
        response = rdflib.sparql_checker.GraphData.load_into(manifest, dataset)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load_dataset(data, graph_data_set):
    """Auto-generated function: load_dataset"""
    try:
        response = rdflib.sparql_checker.SPARQLEntry.load_dataset(data, graph_data_set)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def action_dataset():
    """Auto-generated function: action_dataset"""
    try:
        response = rdflib.sparql_checker.SPARQLEntry.action_dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def result_dataset():
    """Auto-generated function: result_dataset"""
    try:
        response = rdflib.sparql_checker.SPARQLEntry.result_dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query_text():
    """Auto-generated function: query_text"""
    try:
        response = rdflib.sparql_checker.SPARQLEntry.query_text()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query_base():
    """Auto-generated function: query_base"""
    try:
        response = rdflib.sparql_checker.SPARQLEntry.query_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load_result(cls, uri_mapper, result_uri):
    """Auto-generated function: load_result"""
    try:
        response = rdflib.sparql_checker.ResultFileHelper.load_result(cls, uri_mapper, result_uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_configure_rdflib():
    """Auto-generated function: ctx_configure_rdflib"""
    try:
        response = rdflib.sparql_checker.ctx_configure_rdflib()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_syntax(monkeypatch, entry):
    """Auto-generated function: check_syntax"""
    try:
        response = rdflib.sparql_checker.check_syntax(monkeypatch, entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_update(monkeypatch, entry):
    """Auto-generated function: check_update"""
    try:
        response = rdflib.sparql_checker.check_update(monkeypatch, entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_query(exit_stack, entry):
    """Auto-generated function: check_query"""
    try:
        response = rdflib.sparql_checker.check_query(exit_stack, entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_entry(monkeypatch, exit_stack, entry):
    """Auto-generated function: check_entry"""
    try:
        response = rdflib.sparql_checker.check_entry(monkeypatch, exit_stack, entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def file_uri_to_path(file_uri, path_class, url2pathname):
    """Auto-generated function: file_uri_to_path"""
    try:
        response = rdflib.iri.file_uri_to_path(file_uri, path_class, url2pathname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rebase_url(old_url, old_base, new_base):
    """Auto-generated function: rebase_url"""
    try:
        response = rdflib.iri.rebase_url(old_url, old_base, new_base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_tuple(cls, value):
    """Auto-generated function: from_tuple"""
    try:
        response = rdflib.iri.URIMapping.from_tuple(cls, value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_local_uri(remote):
    """Auto-generated function: to_local_uri"""
    try:
        response = rdflib.iri.URIMapper.to_local_uri(remote)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_local_path(remote):
    """Auto-generated function: to_local_path"""
    try:
        response = rdflib.iri.URIMapper.to_local_path(remote)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_local(remote):
    """Auto-generated function: to_local"""
    try:
        response = rdflib.iri.URIMapper.to_local(remote)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_remote(local):
    """Auto-generated function: to_remote"""
    try:
        response = rdflib.iri.URIMapper.to_remote(local)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_mappings(cls):
    """Auto-generated function: from_mappings"""
    try:
        response = rdflib.iri.URIMapper.from_mappings(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def opener():
    """Auto-generated function: opener"""
    try:
        response = rdflib.iri.URIMapper.opener()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def http_open(req):
    """Auto-generated function: http_open"""
    try:
        response = rdflib.iri.URIMapperHTTPHandler.http_open(req)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check(actual):
    """Auto-generated function: check"""
    try:
        response = rdflib.outcome.ExceptionChecker.check(actual)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def context():
    """Auto-generated function: context"""
    try:
        response = rdflib.outcome.ExceptionChecker.context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_primitive(cls, primitive):
    """Auto-generated function: from_primitive"""
    try:
        response = rdflib.outcome.OutcomeChecker.from_primitive(cls, primitive)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_primitives(cls, primitives):
    """Auto-generated function: from_primitives"""
    try:
        response = rdflib.outcome.OutcomeChecker.from_primitives(cls, primitives)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_test_outcome(test_id, outcome, info):
    """Auto-generated function: add_test_outcome"""
    try:
        response = rdflib.earl.EARLReport.add_test_outcome(test_id, outcome, info)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write():
    """Auto-generated function: write"""
    try:
        response = rdflib.earl.EARLReport.write()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_addoption(parser):
    """Auto-generated function: pytest_addoption"""
    try:
        response = rdflib.earl.pytest_addoption(parser)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convert_optional(optional, converter):
    """Auto-generated function: convert_optional"""
    try:
        response = rdflib.earl.convert_optional(optional, converter)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_configure(config):
    """Auto-generated function: pytest_configure"""
    try:
        response = rdflib.earl.pytest_configure(config)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_unconfigure(config):
    """Auto-generated function: pytest_unconfigure"""
    try:
        response = rdflib.earl.pytest_unconfigure(config)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_rdf_test_uri(cls, rdf_test_uri, manifest_entry):
    """Auto-generated function: get_rdf_test_uri"""
    try:
        response = rdflib.earl.EARLReporter.get_rdf_test_uri(cls, rdf_test_uri, manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_manifest_entry(cls, report):
    """Auto-generated function: get_manifest_entry"""
    try:
        response = rdflib.earl.TestReportHelper.get_manifest_entry(cls, report)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_report_graph(graph):
    """Auto-generated function: setup_report_graph"""
    try:
        response = rdflib.earl.EARLReporter.setup_report_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_report_graph():
    """Auto-generated function: make_report_graph"""
    try:
        response = rdflib.earl.EARLReporter.make_report_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_report_with_prefix(report_prefix):
    """Auto-generated function: make_report_with_prefix"""
    try:
        response = rdflib.earl.EARLReporter.make_report_with_prefix(report_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_report_for(entry):
    """Auto-generated function: get_report_for"""
    try:
        response = rdflib.earl.EARLReporter.get_report_for(entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_runtest_makereport(item, call):
    """Auto-generated function: pytest_runtest_makereport"""
    try:
        response = rdflib.earl.EARLReporter.pytest_runtest_makereport(item, call)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def append_result(report, test_result):
    """Auto-generated function: append_result"""
    try:
        response = rdflib.earl.EARLReporter.append_result(report, test_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_runtest_logreport(report):
    """Auto-generated function: pytest_runtest_logreport"""
    try:
        response = rdflib.earl.EARLReporter.pytest_runtest_logreport(report)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_sessionfinish(session):
    """Auto-generated function: pytest_sessionfinish"""
    try:
        response = rdflib.earl.EARLReporter.pytest_sessionfinish(session)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_report(output_file):
    """Auto-generated function: make_report"""
    try:
        response = rdflib.earl.EARLReporter.make_report(output_file)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def audit(name, args):
    """Auto-generated function: audit"""
    try:
        response = rdflib.audit.AuditHookDispatcher.audit(name, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ctx_hook(name, hook):
    """Auto-generated function: ctx_hook"""
    try:
        response = rdflib.audit.AuditHookDispatcher.ctx_hook(name, hook)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_unique_plugins(type_):
    """Auto-generated function: get_unique_plugins"""
    try:
        response = rdflib.__init__.get_unique_plugins(type_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_unique_plugin_names(type_):
    """Auto-generated function: get_unique_plugin_names"""
    try:
        response = rdflib.__init__.get_unique_plugin_names(type_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_triples(cls, graph, triples):
    """Auto-generated function: add_triples"""
    try:
        response = rdflib.__init__.GraphHelper.add_triples(cls, graph, triples)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def node(cls, node, bnode_handling):
    """Auto-generated function: node"""
    try:
        response = rdflib.__init__.GraphHelper.node(cls, node, bnode_handling)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def nodes(cls, nodes, bnode_handling):
    """Auto-generated function: nodes"""
    try:
        response = rdflib.__init__.GraphHelper.nodes(cls, nodes, bnode_handling)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple_set(cls, graph, bnode_handling):
    """Auto-generated function: triple_set"""
    try:
        response = rdflib.__init__.GraphHelper.triple_set(cls, graph, bnode_handling)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple_sets(cls, graphs, bnode_handling):
    """Auto-generated function: triple_sets"""
    try:
        response = rdflib.__init__.GraphHelper.triple_sets(cls, graphs, bnode_handling)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def quad_set(cls, graph, bnode_handling):
    """Auto-generated function: quad_set"""
    try:
        response = rdflib.__init__.GraphHelper.quad_set(cls, graph, bnode_handling)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple_or_quad_set(cls, graph, bnode_handling):
    """Auto-generated function: triple_or_quad_set"""
    try:
        response = rdflib.__init__.GraphHelper.triple_or_quad_set(cls, graph, bnode_handling)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_triple_sets_equals(cls, lhs, rhs, bnode_handling, negate):
    """Auto-generated function: assert_triple_sets_equals"""
    try:
        response = rdflib.__init__.GraphHelper.assert_triple_sets_equals(cls, lhs, rhs, bnode_handling, negate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_quad_sets_equals(cls, lhs, rhs, bnode_handling, negate):
    """Auto-generated function: assert_quad_sets_equals"""
    try:
        response = rdflib.__init__.GraphHelper.assert_quad_sets_equals(cls, lhs, rhs, bnode_handling, negate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_collection_graphs_equal(cls, lhs, rhs):
    """Auto-generated function: assert_collection_graphs_equal"""
    try:
        response = rdflib.__init__.GraphHelper.assert_collection_graphs_equal(cls, lhs, rhs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_sets_equals(cls, lhs, rhs, bnode_handling, negate):
    """Auto-generated function: assert_sets_equals"""
    try:
        response = rdflib.__init__.GraphHelper.assert_sets_equals(cls, lhs, rhs, bnode_handling, negate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def format_set(cls, item_set, indent, sort):
    """Auto-generated function: format_set"""
    try:
        response = rdflib.__init__.GraphHelper.format_set(cls, item_set, indent, sort)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def format_graph_set(cls, graph, indent, sort):
    """Auto-generated function: format_graph_set"""
    try:
        response = rdflib.__init__.GraphHelper.format_graph_set(cls, graph, indent, sort)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_isomorphic(cls, lhs, rhs, message):
    """Auto-generated function: assert_isomorphic"""
    try:
        response = rdflib.__init__.GraphHelper.assert_isomorphic(cls, lhs, rhs, message)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def assert_cgraph_isomorphic(cls, lhs, rhs, exclude_bnodes, message):
    """Auto-generated function: assert_cgraph_isomorphic"""
    try:
        response = rdflib.__init__.GraphHelper.assert_cgraph_isomorphic(cls, lhs, rhs, exclude_bnodes, message)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def strip_literal_datatypes(cls, graph, datatypes):
    """Auto-generated function: strip_literal_datatypes"""
    try:
        response = rdflib.__init__.GraphHelper.strip_literal_datatypes(cls, graph, datatypes)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def non_default_graph_names(cls, container):
    """Auto-generated function: non_default_graph_names"""
    try:
        response = rdflib.__init__.GraphHelper.non_default_graph_names(cls, container)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def non_default_graphs(cls, container):
    """Auto-generated function: non_default_graphs"""
    try:
        response = rdflib.__init__.GraphHelper.non_default_graphs(cls, container)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eq_(lhs, rhs, msg):
    """Auto-generated function: eq_"""
    try:
        response = rdflib.__init__.eq_(lhs, rhs, msg)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def marks_to_list(mark):
    """Auto-generated function: marks_to_list"""
    try:
        response = rdflib.__init__.marks_to_list(mark)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_mark_filter(param_sets, mark_dict):
    """Auto-generated function: pytest_mark_filter"""
    try:
        response = rdflib.__init__.pytest_mark_filter(param_sets, mark_dict)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def affix_tuples(prefix, tuples, suffix):
    """Auto-generated function: affix_tuples"""
    try:
        response = rdflib.__init__.affix_tuples(prefix, tuples, suffix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ensure_suffix(value, suffix):
    """Auto-generated function: ensure_suffix"""
    try:
        response = rdflib.__init__.ensure_suffix(value, suffix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def idfns():
    """Auto-generated function: idfns"""
    try:
        response = rdflib.__init__.idfns()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_checker(action, checker, expected_exception):
    """Auto-generated function: test_checker"""
    try:
        response = rdflib.test.test_outcome.test_checker(action, checker, expected_exception)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bindings_equal(lhs, rhs, expected_result):
    """Auto-generated function: test_bindings_equal"""
    try:
        response = rdflib.test.test_result.test_bindings_equal(lhs, rhs, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_file_uri_to_path(file_uri, path_class, expected_result):
    """Auto-generated function: test_file_uri_to_path"""
    try:
        response = rdflib.test.test_iri.test_file_uri_to_path(file_uri, path_class, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebase_url(old_url, old_base, new_base, expected_result):
    """Auto-generated function: test_rebase_url"""
    try:
        response = rdflib.test.test_iri.test_rebase_url(old_url, old_base, new_base, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check(file_uri, expected_windows_path, expected_posix_path):
    """Auto-generated function: check"""
    try:
        response = rdflib.test.test_testutils.check(file_uri, expected_windows_path, expected_posix_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_paths(file_uri, expected_windows_path, expected_posix_path):
    """Auto-generated function: test_paths"""
    try:
        response = rdflib.test.test_testutils.test_paths(file_uri, expected_windows_path, expected_posix_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def lhs_format():
    """Auto-generated function: lhs_format"""
    try:
        response = rdflib.test.test_testutils.SetsEqualTestCase.lhs_format()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rhs_format():
    """Auto-generated function: rhs_format"""
    try:
        response = rdflib.test.test_testutils.SetsEqualTestCase.rhs_format()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_assert_sets_equal(test_case):
    """Auto-generated function: test_assert_sets_equal"""
    try:
        response = rdflib.test.test_testutils.test_assert_sets_equal(test_case)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prefix_tuples(tuples, prefix, suffix, expected_result):
    """Auto-generated function: test_prefix_tuples"""
    try:
        response = rdflib.test.test_testutils.test_prefix_tuples(tuples, prefix, suffix, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_assert_cgraph_isomorphic(graph_type, format, lhs, rhs, expected_result):
    """Auto-generated function: test_assert_cgraph_isomorphic"""
    try:
        response = rdflib.test.test_testutils.test_assert_cgraph_isomorphic(graph_type, format, lhs, rhs, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_base():
    """Auto-generated function: test_base"""
    try:
        response = rdflib.test.test_httpservermock.test_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_served():
    """Auto-generated function: test_served"""
    try:
        response = rdflib.test.test_httpservermock.test_served()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_norm_url_xfail(base, url, expected_result):
    """Auto-generated function: test_norm_url_xfail"""
    try:
        response = rdflib.test_util.test_norm_url_xfail(base, url, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph():
    """Auto-generated function: test_graph"""
    try:
        response = rdflib.test_named_graphs.test_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_conjunctive_graph():
    """Auto-generated function: test_conjunctive_graph"""
    try:
        response = rdflib.test_named_graphs.test_conjunctive_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_dataset():
    """Auto-generated function: test_dataset"""
    try:
        response = rdflib.test_named_graphs.test_dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_fake_urlinputsource(input_uri, format, suite_base, options):
    """Auto-generated function: make_fake_urlinputsource"""
    try:
        response = rdflib.runner.make_fake_urlinputsource(input_uri, format, suite_base, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_test_json(suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: do_test_json"""
    try:
        response = rdflib.runner.do_test_json(suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_test_parser(suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: do_test_parser"""
    try:
        response = rdflib.runner.do_test_parser(suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_test_serializer(suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: do_test_serializer"""
    try:
        response = rdflib.runner.do_test_serializer(suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_test_html(suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: do_test_html"""
    try:
        response = rdflib.runner.do_test_html(suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def case(source, data):
    """Auto-generated function: case"""
    try:
        response = rdflib.test_compaction.case(source, data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def run(data, expected):
    """Auto-generated function: run"""
    try:
        response = rdflib.test_compaction.run(data, expected)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sort_graph(data):
    """Auto-generated function: sort_graph"""
    try:
        response = rdflib.test_compaction.sort_graph(data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cases(data, expected):
    """Auto-generated function: test_cases"""
    try:
        response = rdflib.test_compaction.test_cases(data, expected)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_create_context():
    """Auto-generated function: test_create_context"""
    try:
        response = rdflib.test_context.test_create_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_term_based_on_value_characteristics():
    """Auto-generated function: test_select_term_based_on_value_characteristics"""
    try:
        response = rdflib.test_context.test_select_term_based_on_value_characteristics()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_getting_keyword_values_from_nodes():
    """Auto-generated function: test_getting_keyword_values_from_nodes"""
    try:
        response = rdflib.test_context.test_getting_keyword_values_from_nodes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parsing_a_context_expands_prefixes():
    """Auto-generated function: test_parsing_a_context_expands_prefixes"""
    try:
        response = rdflib.test_context.test_parsing_a_context_expands_prefixes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_resolving_iris():
    """Auto-generated function: test_resolving_iris"""
    try:
        response = rdflib.test_context.test_resolving_iris()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_accessing_keyword_values_by_alias():
    """Auto-generated function: test_accessing_keyword_values_by_alias"""
    try:
        response = rdflib.test_context.test_accessing_keyword_values_by_alias()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_creating_a_subcontext():
    """Auto-generated function: test_creating_a_subcontext"""
    try:
        response = rdflib.test_context.test_creating_a_subcontext()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prefix_like_vocab():
    """Auto-generated function: test_prefix_like_vocab"""
    try:
        response = rdflib.test_context.test_prefix_like_vocab()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_loading_contexts():
    """Auto-generated function: test_loading_contexts"""
    try:
        response = rdflib.test_context.test_loading_contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_use_base_in_local_context():
    """Auto-generated function: test_use_base_in_local_context"""
    try:
        response = rdflib.test_context.test_use_base_in_local_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_override_base():
    """Auto-generated function: test_override_base"""
    try:
        response = rdflib.test_context.test_override_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_resolve_relative_base():
    """Auto-generated function: test_resolve_relative_base"""
    try:
        response = rdflib.test_context.test_resolve_relative_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_set_null_base():
    """Auto-generated function: test_set_null_base"""
    try:
        response = rdflib.test_context.test_set_null_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ignore_base_remote_context():
    """Auto-generated function: test_ignore_base_remote_context"""
    try:
        response = rdflib.test_context.test_ignore_base_remote_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_recursive_context_inclusion_error():
    """Auto-generated function: test_recursive_context_inclusion_error"""
    try:
        response = rdflib.test_context.test_recursive_context_inclusion_error()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_invalid_remote_context():
    """Auto-generated function: test_invalid_remote_context"""
    try:
        response = rdflib.test_context.test_invalid_remote_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_file_source(tmp_path):
    """Auto-generated function: test_file_source"""
    try:
        response = rdflib.test_context.test_file_source(tmp_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_dict_source(tmp_path):
    """Auto-generated function: test_dict_source"""
    try:
        response = rdflib.test_context.test_dict_source(tmp_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parsing():
    """Auto-generated function: test_parsing"""
    try:
        response = rdflib.test_context.test_parsing()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_to_dict():
    """Auto-generated function: test_to_dict"""
    try:
        response = rdflib.test_context.test_to_dict()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_reassign_id():
    """Auto-generated function: test_reassign_id"""
    try:
        response = rdflib.test_reassign_id.test_reassign_id()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def read_manifest():
    """Auto-generated function: read_manifest"""
    try:
        response = rdflib.test_localsuite.read_manifest()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_test_suite_cases():
    """Auto-generated function: get_test_suite_cases"""
    try:
        response = rdflib.test_localsuite.get_test_suite_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def testsuide_dir():
    """Auto-generated function: testsuide_dir"""
    try:
        response = rdflib.test_localsuite.testsuide_dir()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: test_suite"""
    try:
        response = rdflib.test_localsuite.test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def read_manifest(skiptests):
    """Auto-generated function: read_manifest"""
    try:
        response = rdflib.test_testsuite.read_manifest(skiptests)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_test_suite_cases(skip_known_bugs):
    """Auto-generated function: get_test_suite_cases"""
    try:
        response = rdflib.test_testsuite.get_test_suite_cases(skip_known_bugs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def global_state():
    """Auto-generated function: global_state"""
    try:
        response = rdflib.test_testsuite.global_state()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: test_suite"""
    try:
        response = rdflib.test_testsuite.test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def read_manifest(skiptests):
    """Auto-generated function: read_manifest"""
    try:
        response = rdflib.test_onedotone.read_manifest(skiptests)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_test_suite_cases():
    """Auto-generated function: get_test_suite_cases"""
    try:
        response = rdflib.test_onedotone.get_test_suite_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def global_state():
    """Auto-generated function: global_state"""
    try:
        response = rdflib.test_onedotone.global_state()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options):
    """Auto-generated function: test_suite"""
    try:
        response = rdflib.test_onedotone.test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_norm_urn():
    """Auto-generated function: test_norm_urn"""
    try:
        response = rdflib.test_norm_urn.test_norm_urn()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_wrap():
    """Auto-generated function: test_wrap"""
    try:
        response = rdflib.test_pythonparse.test_wrap()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def walk(data, path):
    """Auto-generated function: walk"""
    try:
        response = rdflib.test_pythonparse.walk(data, path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse():
    """Auto-generated function: test_parse"""
    try:
        response = rdflib.test_api.test_parse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_container_list():
    """Auto-generated function: test_container_list"""
    try:
        response = rdflib.test_nested_arrays.test_container_list()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_container():
    """Auto-generated function: test_no_container"""
    try:
        response = rdflib.test_nested_arrays.test_no_container()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, sink):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugin.parser.__init__.ExampleParser.parse(source, sink)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(cls):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.plugin.parser.__init__.ExampleParser.namespace(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def constant_output(cls):
    """Auto-generated function: constant_output"""
    try:
        response = rdflib.plugin.parser.__init__.ExampleParser.constant_output(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def custom_eval_extended(ctx, extend):
    """Auto-generated function: custom_eval_extended"""
    try:
        response = rdflib.plugin.sparqleval.__init__.custom_eval_extended(ctx, extend)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def custom_eval(ctx, part):
    """Auto-generated function: custom_eval"""
    try:
        response = rdflib.plugin.sparqleval.__init__.custom_eval(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def configure_rdflib():
    """Auto-generated function: configure_rdflib"""
    try:
        response = rdflib.test_sparql_rdflib.configure_rdflib()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry_rdflib(monkeypatch, exit_stack, manifest_entry):
    """Auto-generated function: test_entry_rdflib"""
    try:
        response = rdflib.test_sparql_rdflib.test_entry_rdflib(monkeypatch, exit_stack, manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_entry(entry):
    """Auto-generated function: check_entry"""
    try:
        response = rdflib.test_rdfxml_w3c.check_entry(entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry(manifest_entry):
    """Auto-generated function: test_entry"""
    try:
        response = rdflib.test_rdfxml_w3c.test_entry(manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_non_normative_entry(manifest_entry):
    """Auto-generated function: test_non_normative_entry"""
    try:
        response = rdflib.test_rdfxml_w3c.test_non_normative_entry(manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_entry(entry):
    """Auto-generated function: check_entry"""
    try:
        response = rdflib.test_nquads_w3c.check_entry(entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry(manifest_entry):
    """Auto-generated function: test_entry"""
    try:
        response = rdflib.test_nquads_w3c.test_entry(manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_entry(entry):
    """Auto-generated function: check_entry"""
    try:
        response = rdflib.test_turtle_w3c.check_entry(entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry(manifest_entry):
    """Auto-generated function: test_entry"""
    try:
        response = rdflib.test_turtle_w3c.test_entry(manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_entry(entry):
    """Auto-generated function: check_entry"""
    try:
        response = rdflib.test_trig_w3c.check_entry(entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry(manifest_entry):
    """Auto-generated function: test_entry"""
    try:
        response = rdflib.test_trig_w3c.test_entry(manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def configure_rdflib():
    """Auto-generated function: configure_rdflib"""
    try:
        response = rdflib.test_sparql10_w3c.configure_rdflib()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry_sparql10(monkeypatch, exit_stack, manifest_entry):
    """Auto-generated function: test_entry_sparql10"""
    try:
        response = rdflib.test_sparql10_w3c.test_entry_sparql10(monkeypatch, exit_stack, manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_entry(entry):
    """Auto-generated function: check_entry"""
    try:
        response = rdflib.test_nt_w3c.check_entry(entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry(manifest_entry):
    """Auto-generated function: test_entry"""
    try:
        response = rdflib.test_nt_w3c.test_entry(manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def configure_rdflib():
    """Auto-generated function: configure_rdflib"""
    try:
        response = rdflib.test_sparql11_w3c.configure_rdflib()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_entry_sparql11(monkeypatch, exit_stack, manifest_entry):
    """Auto-generated function: test_entry_sparql11"""
    try:
        response = rdflib.test_sparql11_w3c.test_entry_sparql11(monkeypatch, exit_stack, manifest_entry)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def n3(test):
    """Auto-generated function: n3"""
    try:
        response = rdflib.test_n3_w3c.n3(test)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_manifest(rdf_test_uri, type, rdf_test):
    """Auto-generated function: test_manifest"""
    try:
        response = rdflib.test_n3_w3c.test_manifest(rdf_test_uri, type, rdf_test)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue():
    """Auto-generated function: test_issue"""
    try:
        response = rdflib.test_issue545.test_issue()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test():
    """Auto-generated function: test"""
    try:
        response = rdflib.test_issue1808.test()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_error_implicit_bind():
    """Auto-generated function: test_sparql_error_implicit_bind"""
    try:
        response = rdflib.test_issue1873.test_sparql_error_implicit_bind()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_error_explicit_bind():
    """Auto-generated function: test_sparql_error_explicit_bind"""
    try:
        response = rdflib.test_issue1873.test_sparql_error_explicit_bind()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_escaping_of_triple_doublequotes():
    """Auto-generated function: test_escaping_of_triple_doublequotes"""
    try:
        response = rdflib.test_issue184.test_escaping_of_triple_doublequotes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_failing_parse_of_literal_with_xmllang_attr():
    """Auto-generated function: test_failing_parse_of_literal_with_xmllang_attr"""
    try:
        response = rdflib.test_issue247.test_failing_parse_of_literal_with_xmllang_attr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue492():
    """Auto-generated function: test_issue492"""
    try:
        response = rdflib.test_issue492.test_issue492()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_733():
    """Auto-generated function: test_issue_733"""
    try:
        response = rdflib.test_issue733.test_issue_733()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_733_independant():
    """Auto-generated function: test_issue_733_independant"""
    try:
        response = rdflib.test_issue733.test_issue_733_independant()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_a():
    """Auto-generated function: test_a"""
    try:
        response = rdflib.test_issue910.test_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_b():
    """Auto-generated function: test_b"""
    try:
        response = rdflib.test_issue910.test_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_c():
    """Auto-generated function: test_c"""
    try:
        response = rdflib.test_issue910.test_c()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_d():
    """Auto-generated function: test_d"""
    try:
        response = rdflib.test_issue910.test_d()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_923():
    """Auto-generated function: test_issue_923"""
    try:
        response = rdflib.test_issue923.test_issue_923()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1043():
    """Auto-generated function: test_issue_1043"""
    try:
        response = rdflib.test_issue1043.test_issue_1043()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_broken_rdfxml():
    """Auto-generated function: test_broken_rdfxml"""
    try:
        response = rdflib.test_issue363.test_broken_rdfxml()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parsetype_resource():
    """Auto-generated function: test_parsetype_resource"""
    try:
        response = rdflib.test_issue363.test_parsetype_resource()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sample():
    """Auto-generated function: test_sample"""
    try:
        response = rdflib.test_issue563.test_sample()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_count():
    """Auto-generated function: test_count"""
    try:
        response = rdflib.test_issue563.test_count()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue893_ds_unpickle():
    """Auto-generated function: test_issue893_ds_unpickle"""
    try:
        response = rdflib.test_issue893.test_issue893_ds_unpickle()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue604():
    """Auto-generated function: test_issue604"""
    try:
        response = rdflib.test_issue604.test_issue604()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_715():
    """Auto-generated function: test_issue_715"""
    try:
        response = rdflib.test_issue715.test_issue_715()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue579():
    """Auto-generated function: test_issue579"""
    try:
        response = rdflib.test_issue579.test_issue579()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix_data():
    """Auto-generated function: prefix_data"""
    try:
        response = rdflib.test_issue379.prefix_data()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def base_data():
    """Auto-generated function: base_data"""
    try:
        response = rdflib.test_issue379.base_data()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_issue379.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_successful_prefix_with_hash(graph, prefix_data):
    """Auto-generated function: test_parse_successful_prefix_with_hash"""
    try:
        response = rdflib.test_issue379.test_parse_successful_prefix_with_hash(graph, prefix_data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_successful_base_with_hash(graph, base_data):
    """Auto-generated function: test_parse_successful_base_with_hash"""
    try:
        response = rdflib.test_issue379.test_parse_successful_base_with_hash(graph, base_data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_id_differs_in_fork():
    """Auto-generated function: test_bnode_id_differs_in_fork"""
    try:
        response = rdflib.test_issue200.test_bnode_id_differs_in_fork()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1484_json():
    """Auto-generated function: test_issue_1484_json"""
    try:
        response = rdflib.test_issue1484.test_issue_1484_json()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1484_str():
    """Auto-generated function: test_issue_1484_str"""
    try:
        response = rdflib.test_issue1484.test_issue_1484_str()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_spurious_semicolon():
    """Auto-generated function: test_no_spurious_semicolon"""
    try:
        response = rdflib.test_issue381.test_no_spurious_semicolon()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_one_spurious_semicolon():
    """Auto-generated function: test_one_spurious_semicolon"""
    try:
        response = rdflib.test_issue381.test_one_spurious_semicolon()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_one_spurious_semicolon_no_perdiod():
    """Auto-generated function: test_one_spurious_semicolon_no_perdiod"""
    try:
        response = rdflib.test_issue381.test_one_spurious_semicolon_no_perdiod()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_two_spurious_semicolons_no_period():
    """Auto-generated function: test_two_spurious_semicolons_no_period"""
    try:
        response = rdflib.test_issue381.test_two_spurious_semicolons_no_period()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_one_spurious_semicolons_bnode():
    """Auto-generated function: test_one_spurious_semicolons_bnode"""
    try:
        response = rdflib.test_issue381.test_one_spurious_semicolons_bnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_pathological():
    """Auto-generated function: test_pathological"""
    try:
        response = rdflib.test_issue381.test_pathological()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_mixing_spurious_semicolons_and_commas():
    """Auto-generated function: test_mixing_spurious_semicolons_and_commas"""
    try:
        response = rdflib.test_issue381.test_mixing_spurious_semicolons_and_commas()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue655():
    """Auto-generated function: test_issue655"""
    try:
        response = rdflib.test_issue655.test_issue655()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_skolem_de_skolem_roundtrip():
    """Auto-generated function: test_skolem_de_skolem_roundtrip"""
    try:
        response = rdflib.test_issue1404.test_skolem_de_skolem_roundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue523():
    """Auto-generated function: test_issue523"""
    try:
        response = rdflib.test_issue523.test_issue523()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_graph_with_fragment():
    """Auto-generated function: test_named_graph_with_fragment"""
    try:
        response = rdflib.test_issue1160.test_named_graph_with_fragment()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_801():
    """Auto-generated function: test_issue_801"""
    try:
        response = rdflib.test_issue801.test_issue_801()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test1():
    """Auto-generated function: test1"""
    try:
        response = rdflib.test_issue190.test1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test2():
    """Auto-generated function: test2"""
    try:
        response = rdflib.test_issue190.test2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_1998():
    """Auto-generated function: test_1998"""
    try:
        response = rdflib.test_issue1998.test_1998()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_unicode():
    """Auto-generated function: test_sparql_unicode"""
    try:
        response = rdflib.test_issue446.test_sparql_unicode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph(request):
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.test_issue1003.get_graph(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_1(get_graph):
    """Auto-generated function: test_scenarios_1"""
    try:
        response = rdflib.test_issue1003.test_scenarios_1(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_2(get_graph):
    """Auto-generated function: test_scenarios_2"""
    try:
        response = rdflib.test_issue1003.test_scenarios_2(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_3(get_graph):
    """Auto-generated function: test_scenarios_3"""
    try:
        response = rdflib.test_issue1003.test_scenarios_3(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_4(get_graph):
    """Auto-generated function: test_scenarios_4"""
    try:
        response = rdflib.test_issue1003.test_scenarios_4(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_5(get_graph):
    """Auto-generated function: test_scenarios_5"""
    try:
        response = rdflib.test_issue1003.test_scenarios_5(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_6(get_graph):
    """Auto-generated function: test_scenarios_6"""
    try:
        response = rdflib.test_issue1003.test_scenarios_6(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_7(get_graph):
    """Auto-generated function: test_scenarios_7"""
    try:
        response = rdflib.test_issue1003.test_scenarios_7(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_8(get_graph):
    """Auto-generated function: test_scenarios_8"""
    try:
        response = rdflib.test_issue1003.test_scenarios_8(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_scenarios_9(get_graph):
    """Auto-generated function: test_scenarios_9"""
    try:
        response = rdflib.test_issue1003.test_scenarios_9(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_248():
    """Auto-generated function: test_issue_248"""
    try:
        response = rdflib.test_issue248.test_issue_248()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1141_1():
    """Auto-generated function: test_issue_1141_1"""
    try:
        response = rdflib.test_issue1141.test_issue_1141_1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1141_2():
    """Auto-generated function: test_issue_1141_2"""
    try:
        response = rdflib.test_issue1141.test_issue_1141_2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_1141_3():
    """Auto-generated function: test_issue_1141_3"""
    try:
        response = rdflib.test_issue1141.test_issue_1141_3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_920():
    """Auto-generated function: test_issue_920"""
    try:
        response = rdflib.test_issue920.test_issue_920()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_broken_add():
    """Auto-generated function: test_broken_add"""
    try:
        response = rdflib.test_issue_git_200.test_broken_add()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue532():
    """Auto-generated function: test_issue532"""
    try:
        response = rdflib.test_issue532.test_issue532()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.test_issue977.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_namespace_manager(graph):
    """Auto-generated function: test_namespace_manager"""
    try:
        response = rdflib.test_issue977.test_namespace_manager(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_turtle_serialization(graph):
    """Auto-generated function: test_turtle_serialization"""
    try:
        response = rdflib.test_issue977.test_turtle_serialization(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_trig_default_graph():
    """Auto-generated function: test_trig_default_graph"""
    try:
        response = rdflib.test_issue432.test_trig_default_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_empty_no_row():
    """Auto-generated function: test_sparql_empty_no_row"""
    try:
        response = rdflib.test_issue554.test_sparql_empty_no_row()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_node():
    """Auto-generated function: make_node"""
    try:
        response = rdflib.test_issue209.make_node()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bnode_id_gen_in_thread():
    """Auto-generated function: test_bnode_id_gen_in_thread"""
    try:
        response = rdflib.test_issue209.test_bnode_id_gen_in_thread()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_collection_render():
    """Auto-generated function: test_collection_render"""
    try:
        response = rdflib.test_issue160.test_collection_render()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nquads_default_graph():
    """Auto-generated function: test_nquads_default_graph"""
    try:
        response = rdflib.test_issue535.test_nquads_default_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_a():
    """Auto-generated function: test_a"""
    try:
        response = rdflib.test_issue084.test_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_b():
    """Auto-generated function: test_b"""
    try:
        response = rdflib.test_issue084.test_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_c():
    """Auto-generated function: test_c"""
    try:
        response = rdflib.test_issue084.test_c()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_d():
    """Auto-generated function: test_d"""
    try:
        response = rdflib.test_issue084.test_d()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_e():
    """Auto-generated function: test_e"""
    try:
        response = rdflib.test_issue084.test_e()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xml_a():
    """Auto-generated function: test_xml_a"""
    try:
        response = rdflib.test_issue084.test_xml_a()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xml_b():
    """Auto-generated function: test_xml_b"""
    try:
        response = rdflib.test_issue084.test_xml_b()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xml_e():
    """Auto-generated function: test_xml_e"""
    try:
        response = rdflib.test_issue084.test_xml_e()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_turtle_namespace_prefixes():
    """Auto-generated function: test_turtle_namespace_prefixes"""
    try:
        response = rdflib.test_issue161.test_turtle_namespace_prefixes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_collection_with_duplicates():
    """Auto-generated function: test_collection_with_duplicates"""
    try:
        response = rdflib.test_issue223.test_collection_with_duplicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_980():
    """Auto-generated function: test_980"""
    try:
        response = rdflib.test_issue980.test_980()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ns_localname_roundtrip():
    """Auto-generated function: test_ns_localname_roundtrip"""
    try:
        response = rdflib.test_issue_git_336.test_ns_localname_roundtrip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_issue_939():
    """Auto-generated function: test_issue_939"""
    try:
        response = rdflib.test_issue953.test_issue_939()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(querystr, initNs, initBindings):
    """Auto-generated function: query"""
    try:
        response = rdflib.test_issue274.query(querystr, initNs, initBindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup():
    """Auto-generated function: setup"""
    try:
        response = rdflib.test_issue274.setup()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown():
    """Auto-generated function: teardown"""
    try:
        response = rdflib.test_issue274.teardown()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_string():
    """Auto-generated function: test_cast_string_to_string"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_int_to_string():
    """Auto-generated function: test_cast_int_to_string"""
    try:
        response = rdflib.test_issue274.test_cast_int_to_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_float_to_string():
    """Auto-generated function: test_cast_float_to_string"""
    try:
        response = rdflib.test_issue274.test_cast_float_to_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_bool_to_string():
    """Auto-generated function: test_cast_bool_to_string"""
    try:
        response = rdflib.test_issue274.test_cast_bool_to_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_iri_to_string():
    """Auto-generated function: test_cast_iri_to_string"""
    try:
        response = rdflib.test_issue274.test_cast_iri_to_string()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_datetime_to_datetime():
    """Auto-generated function: test_cast_datetime_to_datetime"""
    try:
        response = rdflib.test_issue274.test_cast_datetime_to_datetime()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_datetime():
    """Auto-generated function: test_cast_string_to_datetime"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_datetime()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_float():
    """Auto-generated function: test_cast_string_to_float"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_float()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_int_to_float():
    """Auto-generated function: test_cast_int_to_float"""
    try:
        response = rdflib.test_issue274.test_cast_int_to_float()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_float_to_float():
    """Auto-generated function: test_cast_float_to_float"""
    try:
        response = rdflib.test_issue274.test_cast_float_to_float()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_double_to_float():
    """Auto-generated function: test_cast_double_to_float"""
    try:
        response = rdflib.test_issue274.test_cast_double_to_float()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_decimal_to_float():
    """Auto-generated function: test_cast_decimal_to_float"""
    try:
        response = rdflib.test_issue274.test_cast_decimal_to_float()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_double():
    """Auto-generated function: test_cast_string_to_double"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_double()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_int_to_double():
    """Auto-generated function: test_cast_int_to_double"""
    try:
        response = rdflib.test_issue274.test_cast_int_to_double()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_float_to_double():
    """Auto-generated function: test_cast_float_to_double"""
    try:
        response = rdflib.test_issue274.test_cast_float_to_double()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_double_to_double():
    """Auto-generated function: test_cast_double_to_double"""
    try:
        response = rdflib.test_issue274.test_cast_double_to_double()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_decimal_to_double():
    """Auto-generated function: test_cast_decimal_to_double"""
    try:
        response = rdflib.test_issue274.test_cast_decimal_to_double()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_decimal():
    """Auto-generated function: test_cast_string_to_decimal"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_decimal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_int_to_decimal():
    """Auto-generated function: test_cast_int_to_decimal"""
    try:
        response = rdflib.test_issue274.test_cast_int_to_decimal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_float_to_decimal():
    """Auto-generated function: test_cast_float_to_decimal"""
    try:
        response = rdflib.test_issue274.test_cast_float_to_decimal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_double_to_decimal():
    """Auto-generated function: test_cast_double_to_decimal"""
    try:
        response = rdflib.test_issue274.test_cast_double_to_decimal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_decimal_to_decimal():
    """Auto-generated function: test_cast_decimal_to_decimal"""
    try:
        response = rdflib.test_issue274.test_cast_decimal_to_decimal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_int():
    """Auto-generated function: test_cast_string_to_int"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_int()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_int_to_int():
    """Auto-generated function: test_cast_int_to_int"""
    try:
        response = rdflib.test_issue274.test_cast_int_to_int()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_string_to_bool():
    """Auto-generated function: test_cast_string_to_bool"""
    try:
        response = rdflib.test_issue274.test_cast_string_to_bool()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_cast_bool_to_bool():
    """Auto-generated function: test_cast_bool_to_bool"""
    try:
        response = rdflib.test_issue274.test_cast_bool_to_bool()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_call_exf():
    """Auto-generated function: test_call_exf"""
    try:
        response = rdflib.test_issue274.test_call_exf()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def f(x, y):
    """Auto-generated function: f"""
    try:
        response = rdflib.test_issue274.TestCustom.f(x, y)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setUp():
    """Auto-generated function: setUp"""
    try:
        response = rdflib.test_issue274.TestCustom.setUp()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def tearDown():
    """Auto-generated function: tearDown"""
    try:
        response = rdflib.test_issue274.TestCustom.tearDown()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_register_twice_fail():
    """Auto-generated function: test_register_twice_fail"""
    try:
        response = rdflib.test_issue274.TestCustom.test_register_twice_fail()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_register_override():
    """Auto-generated function: test_register_override"""
    try:
        response = rdflib.test_issue274.TestCustom.test_register_override()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_wrong_unregister_warns():
    """Auto-generated function: test_wrong_unregister_warns"""
    try:
        response = rdflib.test_issue274.TestCustom.test_wrong_unregister_warns()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_f():
    """Auto-generated function: test_f"""
    try:
        response = rdflib.test_issue274.TestCustom.test_f()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_f_too_few_args():
    """Auto-generated function: test_f_too_few_args"""
    try:
        response = rdflib.test_issue274.TestCustom.test_f_too_few_args()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_f_too_many_args():
    """Auto-generated function: test_f_too_many_args"""
    try:
        response = rdflib.test_issue274.TestCustom.test_f_too_many_args()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_chunk_by_triples(tmp_path):
    """Auto-generated function: test_chunk_by_triples"""
    try:
        response = rdflib.test_chunk_serializer.test_chunk_by_triples(tmp_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_chunk_by_size(tmp_path):
    """Auto-generated function: test_chunk_by_size"""
    try:
        response = rdflib.test_chunk_serializer.test_chunk_by_size(tmp_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_chuking(tmp_path, test_graph_path, max_triples, max_file_size_kb, write_prefixes, set_output_dir, expected_file_count):
    """Auto-generated function: test_chuking"""
    try:
        response = rdflib.test_chunk_serializer.test_chuking(tmp_path, test_graph_path, max_triples, max_file_size_kb, write_prefixes, set_output_dir, expected_file_count)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_csv2rdf_cli():
    """Auto-generated function: test_csv2rdf_cli"""
    try:
        response = rdflib.test_csv2rdf.TestCSV2RDF.test_csv2rdf_cli()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_csv2rdf_cli_fileout():
    """Auto-generated function: test_csv2rdf_cli_fileout"""
    try:
        response = rdflib.test_csv2rdf.TestCSV2RDF.test_csv2rdf_cli_fileout()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_csv2rdf_config_file_opened(config_mock):
    """Auto-generated function: test_csv2rdf_config_file_opened"""
    try:
        response = rdflib.test_csv2rdf.TestCSV2RDF.test_csv2rdf_config_file_opened(config_mock)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datetime_datetime_subs_issue():
    """Auto-generated function: test_datetime_datetime_subs_issue"""
    try:
        response = rdflib.test_datetime_processing.test_datetime_datetime_subs_issue()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datetime_duration_subs():
    """Auto-generated function: test_datetime_duration_subs"""
    try:
        response = rdflib.test_datetime_processing.test_datetime_duration_subs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datetime_duration_add():
    """Auto-generated function: test_datetime_duration_add"""
    try:
        response = rdflib.test_datetime_processing.test_datetime_duration_add()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datetime_datetime_subs():
    """Auto-generated function: test_datetime_datetime_subs"""
    try:
        response = rdflib.test_datetime_processing.test_datetime_datetime_subs()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def data_path():
    """Auto-generated function: data_path"""
    try:
        response = rdflib.test_translate_algebra.data_path()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def filename():
    """Auto-generated function: filename"""
    try:
        response = rdflib.test_translate_algebra.AlgebraTest.filename()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pytest_param():
    """Auto-generated function: pytest_param"""
    try:
        response = rdflib.test_translate_algebra.AlgebraTest.pytest_param()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_all_files_used(data_path):
    """Auto-generated function: test_all_files_used"""
    try:
        response = rdflib.test_translate_algebra.test_all_files_used(data_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_roundtrip(test_spec, data_path):
    """Auto-generated function: test_roundtrip"""
    try:
        response = rdflib.test_translate_algebra.test_roundtrip(test_spec, data_path)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_group_concat():
    """Auto-generated function: test_sparql_group_concat"""
    try:
        response = rdflib.test_translate_algebra.test_sparql_group_concat()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_blank_node_comma():
    """Auto-generated function: test_sparql_blank_node_comma"""
    try:
        response = rdflib.test_translate_algebra.test_sparql_blank_node_comma()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple_set(graph):
    """Auto-generated function: triple_set"""
    try:
        response = rdflib.test_sparql_parser.triple_set(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_insert_recursionlimit():
    """Auto-generated function: test_insert_recursionlimit"""
    try:
        response = rdflib.test_sparql_parser.TestSPARQLParser.test_insert_recursionlimit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_insert_large():
    """Auto-generated function: test_insert_large"""
    try:
        response = rdflib.test_sparql_parser.TestSPARQLParser.test_insert_large()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_insert(resource_count):
    """Auto-generated function: do_insert"""
    try:
        response = rdflib.test_sparql_parser.TestSPARQLParser.do_insert(resource_count)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_tsvresults_bindings():
    """Auto-generated function: test_empty_tsvresults_bindings"""
    try:
        response = rdflib.test_tsvresults.test_empty_tsvresults_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_result_parse(data, format, parse_outcome):
    """Auto-generated function: test_select_result_parse"""
    try:
        response = rdflib.test_result.test_select_result_parse(data, format, parse_outcome)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_xsv_serialize(node, format, expected_result):
    """Auto-generated function: test_xsv_serialize"""
    try:
        response = rdflib.test_result.test_xsv_serialize(node, format, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def select_result(rdfs_graph):
    """Auto-generated function: select_result"""
    try:
        response = rdflib.test_result.select_result(rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_serialized(format, result, data):
    """Auto-generated function: check_serialized"""
    try:
        response = rdflib.test_result.check_serialized(format, result, data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def narrow_dest_param(param):
    """Auto-generated function: narrow_dest_param"""
    try:
        response = rdflib.test_result.narrow_dest_param(param)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_select_result_serialize_parse_tests():
    """Auto-generated function: make_select_result_serialize_parse_tests"""
    try:
        response = rdflib.test_result.make_select_result_serialize_parse_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_result_serialize_parse(tmp_path, select_result, test_args):
    """Auto-generated function: test_select_result_serialize_parse"""
    try:
        response = rdflib.test_result.test_select_result_serialize_parse(tmp_path, select_result, test_args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize_select(select_result, format, encoding):
    """Auto-generated function: serialize_select"""
    try:
        response = rdflib.test_result.serialize_select(select_result, format, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_select_result_parse_serialized_tests():
    """Auto-generated function: make_select_result_parse_serialized_tests"""
    try:
        response = rdflib.test_result.make_select_result_parse_serialized_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_result_parse_serialized(tmp_path, select_result, test_args):
    """Auto-generated function: test_select_result_parse_serialized"""
    try:
        response = rdflib.test_result.test_select_result_parse_serialized(tmp_path, select_result, test_args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_test_serialize_to_strdest_tests():
    """Auto-generated function: make_test_serialize_to_strdest_tests"""
    try:
        response = rdflib.test_result.make_test_serialize_to_strdest_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_strdest(tmp_path, select_result, destination_type, name_prefix):
    """Auto-generated function: test_serialize_to_strdest"""
    try:
        response = rdflib.test_result.test_serialize_to_strdest(tmp_path, select_result, destination_type, name_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_serialize_to_fileuri_with_authortiy(tmp_path, select_result, authority):
    """Auto-generated function: test_serialize_to_fileuri_with_authortiy"""
    try:
        response = rdflib.test_result.test_serialize_to_fileuri_with_authortiy(tmp_path, select_result, authority)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service():
    """Auto-generated function: test_service"""
    try:
        response = rdflib.test_service.test_service()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_bind():
    """Auto-generated function: test_service_with_bind"""
    try:
        response = rdflib.test_service.test_service_with_bind()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_bound_solutions():
    """Auto-generated function: test_service_with_bound_solutions"""
    try:
        response = rdflib.test_service.test_service_with_bound_solutions()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_values():
    """Auto-generated function: test_service_with_values"""
    try:
        response = rdflib.test_service.test_service_with_values()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_implicit_select():
    """Auto-generated function: test_service_with_implicit_select"""
    try:
        response = rdflib.test_service.test_service_with_implicit_select()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_implicit_select_and_prefix():
    """Auto-generated function: test_service_with_implicit_select_and_prefix"""
    try:
        response = rdflib.test_service.test_service_with_implicit_select_and_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_implicit_select_and_base():
    """Auto-generated function: test_service_with_implicit_select_and_base"""
    try:
        response = rdflib.test_service.test_service_with_implicit_select_and_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_with_implicit_select_and_allcaps():
    """Auto-generated function: test_service_with_implicit_select_and_allcaps"""
    try:
        response = rdflib.test_service.test_service_with_implicit_select_and_allcaps()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def freeze_bindings(bindings):
    """Auto-generated function: freeze_bindings"""
    try:
        response = rdflib.test_service.freeze_bindings(bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_simple_not_null():
    """Auto-generated function: test_simple_not_null"""
    try:
        response = rdflib.test_service.test_simple_not_null()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_service_node_types():
    """Auto-generated function: test_service_node_types"""
    try:
        response = rdflib.test_service.test_service_node_types()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_with_mock(function_httpmock, response_bindings, expected_result):
    """Auto-generated function: test_with_mock"""
    try:
        response = rdflib.test_service.test_with_mock(function_httpmock, response_bindings, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_inclusive():
    """Auto-generated function: test_inclusive"""
    try:
        response = rdflib.test_dataset_inclusive.test_inclusive()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_default_from_1():
    """Auto-generated function: test_default_from_1"""
    try:
        response = rdflib.test_dataset_inclusive.test_default_from_1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_default_from_2():
    """Auto-generated function: test_default_from_2"""
    try:
        response = rdflib.test_dataset_inclusive.test_default_from_2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_from():
    """Auto-generated function: test_named_from"""
    try:
        response = rdflib.test_dataset_inclusive.test_named_from()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_from_named_1():
    """Auto-generated function: test_named_from_named_1"""
    try:
        response = rdflib.test_dataset_inclusive.test_named_from_named_1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_from_named_2():
    """Auto-generated function: test_named_from_named_2"""
    try:
        response = rdflib.test_dataset_inclusive.test_named_from_named_2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_default_from_named():
    """Auto-generated function: test_default_from_named"""
    try:
        response = rdflib.test_dataset_inclusive.test_default_from_named()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_from_and_from_named():
    """Auto-generated function: test_from_and_from_named"""
    try:
        response = rdflib.test_dataset_inclusive.test_from_and_from_named()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_parse_reserved_char_percent_encoded(reserved_char_percent_encoded):
    """Auto-generated function: test_sparql_parse_reserved_char_percent_encoded"""
    try:
        response = rdflib.test_prefixed_name.test_sparql_parse_reserved_char_percent_encoded(reserved_char_percent_encoded)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def blank_graph():
    """Auto-generated function: blank_graph"""
    try:
        response = rdflib.test_prefixed_name.blank_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_pnames(pname_ns, pname, expected_result, blank_graph):
    """Auto-generated function: test_pnames"""
    try:
        response = rdflib.test_prefixed_name.test_pnames(pname_ns, pname, expected_result, blank_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def template_tst(agg_func, first, second):
    """Auto-generated function: template_tst"""
    try:
        response = rdflib.test_agg_undef.template_tst(agg_func, first, second)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_aggregates_tests():
    """Auto-generated function: get_aggregates_tests"""
    try:
        response = rdflib.test_agg_undef.get_aggregates_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_aggregates(checker, agg_func, first, second):
    """Auto-generated function: test_aggregates"""
    try:
        response = rdflib.test_agg_undef.test_aggregates(checker, agg_func, first, second)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_group_by_null():
    """Auto-generated function: test_group_by_null"""
    try:
        response = rdflib.test_agg_undef.test_group_by_null()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_values_outside_group_by():
    """Auto-generated function: test_values_outside_group_by"""
    try:
        response = rdflib.test_agg_undef.test_values_outside_group_by()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_regex():
    """Auto-generated function: test_regex"""
    try:
        response = rdflib.test_expressions.test_regex()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_arithmetic():
    """Auto-generated function: test_arithmetic"""
    try:
        response = rdflib.test_expressions.test_arithmetic()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_arithmetic_var():
    """Auto-generated function: test_arithmetic_var"""
    try:
        response = rdflib.test_expressions.test_arithmetic_var()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_comparisons():
    """Auto-generated function: test_comparisons"""
    try:
        response = rdflib.test_expressions.test_comparisons()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_comparisons_var():
    """Auto-generated function: test_comparisons_var"""
    try:
        response = rdflib.test_expressions.test_comparisons_var()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_and_or():
    """Auto-generated function: test_and_or"""
    try:
        response = rdflib.test_expressions.test_and_or()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_load_into_default(graph_factory, source):
    """Auto-generated function: test_load_into_default"""
    try:
        response = rdflib.test_update.test_load_into_default(graph_factory, source)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_load_into_named(graph_factory, source):
    """Auto-generated function: test_load_into_named"""
    try:
        response = rdflib.test_update.test_load_into_named(graph_factory, source)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_group_concat_distinct():
    """Auto-generated function: test_group_concat_distinct"""
    try:
        response = rdflib.test_agg_distinct.test_group_concat_distinct()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sum_distinct():
    """Auto-generated function: test_sum_distinct"""
    try:
        response = rdflib.test_agg_distinct.test_sum_distinct()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_avg_distinct():
    """Auto-generated function: test_avg_distinct"""
    try:
        response = rdflib.test_agg_distinct.test_avg_distinct()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_count_distinct():
    """Auto-generated function: test_count_distinct"""
    try:
        response = rdflib.test_agg_distinct.test_count_distinct()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_count_optional_values():
    """Auto-generated function: test_count_optional_values"""
    try:
        response = rdflib.test_agg_distinct.test_count_optional_values()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_prepares_expanded():
    """Auto-generated function: test_query_prepares_expanded"""
    try:
        response = rdflib.test_forward_slash_escapes.test_query_prepares_expanded()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_prepares_prefixed():
    """Auto-generated function: test_query_prepares_prefixed"""
    try:
        response = rdflib.test_forward_slash_escapes.test_query_prepares_prefixed()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_escapes_and_query_turtle_expanded():
    """Auto-generated function: test_escapes_and_query_turtle_expanded"""
    try:
        response = rdflib.test_forward_slash_escapes.test_escapes_and_query_turtle_expanded()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_escapes_and_query_turtle_prefixed():
    """Auto-generated function: test_escapes_and_query_turtle_prefixed"""
    try:
        response = rdflib.test_forward_slash_escapes.test_escapes_and_query_turtle_prefixed()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_escapes_and_query_jsonld_expanded():
    """Auto-generated function: test_escapes_and_query_jsonld_expanded"""
    try:
        response = rdflib.test_forward_slash_escapes.test_escapes_and_query_jsonld_expanded()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_escapes_and_query_jsonld_prefixed():
    """Auto-generated function: test_escapes_and_query_jsonld_prefixed"""
    try:
        response = rdflib.test_forward_slash_escapes.test_escapes_and_query_jsonld_prefixed()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nested_filter_outer_binding_propagation():
    """Auto-generated function: test_nested_filter_outer_binding_propagation"""
    try:
        response = rdflib.test_nested_filters.test_nested_filter_outer_binding_propagation()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_nested_filter_outermost_binding_propagation():
    """Auto-generated function: test_nested_filter_outermost_binding_propagation"""
    try:
        response = rdflib.test_nested_filters.test_nested_filter_outermost_binding_propagation()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_prefix():
    """Auto-generated function: test_graph_prefix"""
    try:
        response = rdflib.test_sparql.test_graph_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_variable_order():
    """Auto-generated function: test_variable_order"""
    try:
        response = rdflib.test_sparql.test_variable_order()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_bnodelist():
    """Auto-generated function: test_sparql_bnodelist"""
    try:
        response = rdflib.test_sparql.test_sparql_bnodelist()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_polist():
    """Auto-generated function: test_sparql_polist"""
    try:
        response = rdflib.test_sparql.test_sparql_polist()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_complex_sparql_construct():
    """Auto-generated function: test_complex_sparql_construct"""
    try:
        response = rdflib.test_sparql.test_complex_sparql_construct()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_update_with_bnode():
    """Auto-generated function: test_sparql_update_with_bnode"""
    try:
        response = rdflib.test_sparql.test_sparql_update_with_bnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_update_with_bnode_serialize_parse():
    """Auto-generated function: test_sparql_update_with_bnode_serialize_parse"""
    try:
        response = rdflib.test_sparql.test_sparql_update_with_bnode_serialize_parse()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bindings():
    """Auto-generated function: test_bindings"""
    try:
        response = rdflib.test_sparql.test_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_filter_graph_query():
    """Auto-generated function: test_named_filter_graph_query"""
    try:
        response = rdflib.test_sparql.test_named_filter_graph_query()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_txtresult():
    """Auto-generated function: test_txtresult"""
    try:
        response = rdflib.test_sparql.test_txtresult()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_property_bindings(rdfs_graph):
    """Auto-generated function: test_property_bindings"""
    try:
        response = rdflib.test_sparql.test_property_bindings(rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_call_function():
    """Auto-generated function: test_call_function"""
    try:
        response = rdflib.test_sparql.test_call_function()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_custom_eval():
    """Auto-generated function: test_custom_eval"""
    try:
        response = rdflib.test_sparql.test_custom_eval()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_custom_eval_exception(result_consumer, exception_type):
    """Auto-generated function: test_custom_eval_exception"""
    try:
        response = rdflib.test_sparql.test_custom_eval_exception(result_consumer, exception_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_operator_exception(result_consumer, exception_type, monkeypatch):
    """Auto-generated function: test_operator_exception"""
    try:
        response = rdflib.test_sparql.test_operator_exception(result_consumer, exception_type, monkeypatch)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_queries(query_string, expected_bindings, rdfs_graph):
    """Auto-generated function: test_queries"""
    try:
        response = rdflib.test_sparql.test_queries(query_string, expected_bindings, rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_describe(query_string, expected_subjects, expected_size, rdfs_graph):
    """Auto-generated function: test_sparql_describe"""
    try:
        response = rdflib.test_sparql.test_sparql_describe(query_string, expected_subjects, expected_size, rdfs_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_expand_unicode_escapes(arg, expected_result, expected_valid):
    """Auto-generated function: test_expand_unicode_escapes"""
    try:
        response = rdflib.test_sparql.test_expand_unicode_escapes(arg, expected_result, expected_valid)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_star_sub_select():
    """Auto-generated function: test_select_star_sub_select"""
    try:
        response = rdflib.test_subselect.test_select_star_sub_select()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_star_multiple_sub_select_star():
    """Auto-generated function: test_select_star_multiple_sub_select_star"""
    try:
        response = rdflib.test_subselect.test_select_star_multiple_sub_select_star()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_star_multiple_sub_select_mixed_projections():
    """Auto-generated function: test_select_star_multiple_sub_select_mixed_projections"""
    try:
        response = rdflib.test_subselect.test_select_star_multiple_sub_select_mixed_projections()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_select_star_multiple_sub_select_defined_projections():
    """Auto-generated function: test_select_star_multiple_sub_select_defined_projections"""
    try:
        response = rdflib.test_subselect.test_select_star_multiple_sub_select_defined_projections()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_construct_init_bindings():
    """Auto-generated function: test_construct_init_bindings"""
    try:
        response = rdflib.test_construct_bindings.TestConstructInitBindings.test_construct_init_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prepare_update():
    """Auto-generated function: test_prepare_update"""
    try:
        response = rdflib.test_prepare.test_prepare_update()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prepare_query():
    """Auto-generated function: test_prepare_query"""
    try:
        response = rdflib.test_prepare.test_prepare_query()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_str():
    """Auto-generated function: test_str"""
    try:
        response = rdflib.test_initbindings.test_str()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_is_iri():
    """Auto-generated function: test_is_iri"""
    try:
        response = rdflib.test_initbindings.test_is_iri()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_is_blank():
    """Auto-generated function: test_is_blank"""
    try:
        response = rdflib.test_initbindings.test_is_blank()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_is_literal():
    """Auto-generated function: test_is_literal"""
    try:
        response = rdflib.test_initbindings.test_is_literal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ucase():
    """Auto-generated function: test_ucase"""
    try:
        response = rdflib.test_initbindings.test_ucase()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_func():
    """Auto-generated function: test_no_func"""
    try:
        response = rdflib.test_initbindings.test_no_func()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_order_by():
    """Auto-generated function: test_order_by"""
    try:
        response = rdflib.test_initbindings.test_order_by()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_order_by_func():
    """Auto-generated function: test_order_by_func"""
    try:
        response = rdflib.test_initbindings.test_order_by_func()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_func_limit():
    """Auto-generated function: test_no_func_limit"""
    try:
        response = rdflib.test_initbindings.test_no_func_limit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_order_by_limit():
    """Auto-generated function: test_order_by_limit"""
    try:
        response = rdflib.test_initbindings.test_order_by_limit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_order_by_func_limit():
    """Auto-generated function: test_order_by_func_limit"""
    try:
        response = rdflib.test_initbindings.test_order_by_func_limit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_func_offset():
    """Auto-generated function: test_no_func_offset"""
    try:
        response = rdflib.test_initbindings.test_no_func_offset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_no_func_limit_offset():
    """Auto-generated function: test_no_func_limit_offset"""
    try:
        response = rdflib.test_initbindings.test_no_func_limit_offset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_order_by_limit_offset():
    """Auto-generated function: test_order_by_limit_offset"""
    try:
        response = rdflib.test_initbindings.test_order_by_limit_offset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_order_by_func_limit_offset():
    """Auto-generated function: test_order_by_func_limit_offset"""
    try:
        response = rdflib.test_initbindings.test_order_by_func_limit_offset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_distinct():
    """Auto-generated function: test_distinct"""
    try:
        response = rdflib.test_initbindings.test_distinct()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_distinct_order_by():
    """Auto-generated function: test_distinct_order_by"""
    try:
        response = rdflib.test_initbindings.test_distinct_order_by()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_distinct_order_by_limit():
    """Auto-generated function: test_distinct_order_by_limit"""
    try:
        response = rdflib.test_initbindings.test_distinct_order_by_limit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_prepare():
    """Auto-generated function: test_prepare"""
    try:
        response = rdflib.test_initbindings.test_prepare()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_data():
    """Auto-generated function: test_data"""
    try:
        response = rdflib.test_initbindings.test_data()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ask():
    """Auto-generated function: test_ask"""
    try:
        response = rdflib.test_initbindings.test_ask()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_string_key():
    """Auto-generated function: test_string_key"""
    try:
        response = rdflib.test_initbindings.test_string_key()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_string_key_with_question_mark():
    """Auto-generated function: test_string_key_with_question_mark"""
    try:
        response = rdflib.test_initbindings.test_string_key_with_question_mark()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_variable_key():
    """Auto-generated function: test_variable_key"""
    try:
        response = rdflib.test_initbindings.test_variable_key()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_variable_key_with_question_mark():
    """Auto-generated function: test_variable_key_with_question_mark"""
    try:
        response = rdflib.test_initbindings.test_variable_key_with_question_mark()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_filter():
    """Auto-generated function: test_filter"""
    try:
        response = rdflib.test_initbindings.test_filter()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_date_cast():
    """Auto-generated function: test_date_cast"""
    try:
        response = rdflib.test_operators.test_date_cast()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datetime_cast():
    """Auto-generated function: test_datetime_cast"""
    try:
        response = rdflib.test_operators.test_datetime_cast()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_datetime_cast_type_error():
    """Auto-generated function: test_datetime_cast_type_error"""
    try:
        response = rdflib.test_operators.test_datetime_cast_type_error()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_function(expression, expected_result):
    """Auto-generated function: test_function"""
    try:
        response = rdflib.test_functions.test_function(expression, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_lang_range_check(literal, range, expected_result):
    """Auto-generated function: test_lang_range_check"""
    try:
        response = rdflib.test_functions.test_lang_range_check(literal, range, expected_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_exclusive():
    """Auto-generated function: test_exclusive"""
    try:
        response = rdflib.test_dataset_exclusive.test_exclusive()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_from():
    """Auto-generated function: test_from"""
    try:
        response = rdflib.test_dataset_exclusive.test_from()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_from_named():
    """Auto-generated function: test_from_named"""
    try:
        response = rdflib.test_dataset_exclusive.test_from_named()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_from_and_from_named():
    """Auto-generated function: test_from_and_from_named"""
    try:
        response = rdflib.test_dataset_exclusive.test_from_and_from_named()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_ask_from():
    """Auto-generated function: test_ask_from"""
    try:
        response = rdflib.test_dataset_exclusive.test_ask_from()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_bind_tests():
    """Auto-generated function: get_bind_tests"""
    try:
        response = rdflib.test_evaluate_bind.get_bind_tests()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bind(checker, expr, var, obj):
    """Auto-generated function: test_bind"""
    try:
        response = rdflib.test_evaluate_bind.test_bind(checker, expr, var, obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_class(cls):
    """Auto-generated function: setup_class"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.setup_class(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_class(cls):
    """Auto-generated function: teardown_class"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.teardown_class(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_method():
    """Auto-generated function: teardown_method"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.teardown_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_update():
    """Auto-generated function: test_graph_update"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.test_graph_update()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_update_encoding():
    """Auto-generated function: test_update_encoding"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.test_update_encoding()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_content_type():
    """Auto-generated function: test_content_type"""
    try:
        response = rdflib.test_store_sparqlupdatestore_mock.TestSPARQLConnector.test_content_type()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph(request):
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.test_store_memorystore.get_graph(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_memory_store(get_graph):
    """Auto-generated function: test_memory_store"""
    try:
        response = rdflib.test_store_memorystore.test_memory_store(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_test_query_construct_format_cases():
    """Auto-generated function: make_test_query_construct_format_cases"""
    try:
        response = rdflib.test_store_sparqlstore_query.make_test_query_construct_format_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_construct_format(function_httpmock, expected_graph, response_body, response_headers):
    """Auto-generated function: test_query_construct_format"""
    try:
        response = rdflib.test_store_sparqlstore_query.test_query_construct_format(function_httpmock, expected_graph, response_body, response_headers)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph():
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.test_store_berkeleydb.get_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_write(get_graph):
    """Auto-generated function: test_write"""
    try:
        response = rdflib.test_store_berkeleydb.test_write(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_read(get_graph):
    """Auto-generated function: test_read"""
    try:
        response = rdflib.test_store_berkeleydb.test_read(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_query(get_graph):
    """Auto-generated function: test_sparql_query"""
    try:
        response = rdflib.test_store_berkeleydb.test_sparql_query(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_sparql_insert(get_graph):
    """Auto-generated function: test_sparql_insert"""
    try:
        response = rdflib.test_store_berkeleydb.test_sparql_insert(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multigraph(get_graph):
    """Auto-generated function: test_multigraph"""
    try:
        response = rdflib.test_store_berkeleydb.test_multigraph(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_open_shut(get_graph):
    """Auto-generated function: test_open_shut"""
    try:
        response = rdflib.test_store_berkeleydb.test_open_shut(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_url_construct_format(function_httpmock, graph_identifier):
    """Auto-generated function: test_query_url_construct_format"""
    try:
        response = rdflib.test_store_sparqlstore_sparqlconnector.test_query_url_construct_format(function_httpmock, graph_identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_to_bits_from_bits_round_trip():
    """Auto-generated function: test_to_bits_from_bits_round_trip"""
    try:
        response = rdflib.test_nodepickler.TestUtil.test_to_bits_from_bits_round_trip()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_literal_cases():
    """Auto-generated function: test_literal_cases"""
    try:
        response = rdflib.test_nodepickler.TestUtil.test_literal_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_pickle():
    """Auto-generated function: test_pickle"""
    try:
        response = rdflib.test_nodepickler.TestUtil.test_pickle()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_modify_fails(call, exception_type):
    """Auto-generated function: test_graph_modify_fails"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreGraph.test_graph_modify_fails(call, exception_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_class(cls):
    """Auto-generated function: setup_class"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.setup_class(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_class(cls):
    """Auto-generated function: teardown_class"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.teardown_class(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_method():
    """Auto-generated function: setup_method"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreUpdate.setup_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def teardown_method():
    """Auto-generated function: teardown_method"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreUpdate.teardown_method()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query():
    """Auto-generated function: test_query"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLMock.test_query()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_init_ns():
    """Auto-generated function: test_init_ns"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.test_init_ns()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_noinit_ns():
    """Auto-generated function: test_noinit_ns"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.test_noinit_ns()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_with_added_prolog():
    """Auto-generated function: test_query_with_added_prolog"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.test_query_with_added_prolog()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_query_with_added_rdf_prolog():
    """Auto-generated function: test_query_with_added_rdf_prolog"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.test_query_with_added_rdf_prolog()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_counting_graph_and_store_queries():
    """Auto-generated function: test_counting_graph_and_store_queries"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreFakeDBPedia.test_counting_graph_and_store_queries()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup_mocked_endpoint():
    """Auto-generated function: setup_mocked_endpoint"""
    try:
        response = rdflib.test_store_sparqlstore.TestSPARQLStoreUpdate.setup_mocked_endpoint()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_POST():
    """Auto-generated function: do_POST"""
    try:
        response = rdflib.test_store_sparqlstore.SPARQL11ProtocolStoreMock.do_POST()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def do_GET():
    """Auto-generated function: do_GET"""
    try:
        response = rdflib.test_store_sparqlstore.SPARQL11ProtocolStoreMock.do_GET()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_store(request):
    """Auto-generated function: get_store"""
    try:
        response = rdflib.test_store_triple_store.get_store(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add(get_store):
    """Auto-generated function: test_add"""
    try:
        response = rdflib.test_store_triple_store.test_add(get_store)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove(get_store):
    """Auto-generated function: test_remove"""
    try:
        response = rdflib.test_store_triple_store.test_remove(get_store)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_triples(get_store):
    """Auto-generated function: test_triples"""
    try:
        response = rdflib.test_store_triple_store.test_triples(get_store)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph():
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.test_store_auditable.get_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_commit(get_graph):
    """Auto-generated function: test_add_commit"""
    try:
        response = rdflib.test_store_auditable.test_add_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_commit(get_graph):
    """Auto-generated function: test_remove_commit"""
    try:
        response = rdflib.test_store_auditable.test_remove_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multiple_remove_commit(get_graph):
    """Auto-generated function: test_multiple_remove_commit"""
    try:
        response = rdflib.test_store_auditable.test_multiple_remove_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_noop_add_commit(get_graph):
    """Auto-generated function: test_noop_add_commit"""
    try:
        response = rdflib.test_store_auditable.test_noop_add_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_noop_remove_commit(get_graph):
    """Auto-generated function: test_noop_remove_commit"""
    try:
        response = rdflib.test_store_auditable.test_noop_remove_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_remove_commit(get_graph):
    """Auto-generated function: test_add_remove_commit"""
    try:
        response = rdflib.test_store_auditable.test_add_remove_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_add_commit(get_graph):
    """Auto-generated function: test_remove_add_commit"""
    try:
        response = rdflib.test_store_auditable.test_remove_add_commit(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_rollback(get_graph):
    """Auto-generated function: test_add_rollback"""
    try:
        response = rdflib.test_store_auditable.test_add_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_rollback(get_graph):
    """Auto-generated function: test_remove_rollback"""
    try:
        response = rdflib.test_store_auditable.test_remove_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multiple_remove_rollback(get_graph):
    """Auto-generated function: test_multiple_remove_rollback"""
    try:
        response = rdflib.test_store_auditable.test_multiple_remove_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_noop_add_rollback(get_graph):
    """Auto-generated function: test_noop_add_rollback"""
    try:
        response = rdflib.test_store_auditable.test_noop_add_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_noop_remove_rollback(get_graph):
    """Auto-generated function: test_noop_remove_rollback"""
    try:
        response = rdflib.test_store_auditable.test_noop_remove_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_remove_rollback(get_graph):
    """Auto-generated function: test_add_remove_rollback"""
    try:
        response = rdflib.test_store_auditable.test_add_remove_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_remove_add_rollback(get_graph):
    """Auto-generated function: test_remove_add_rollback"""
    try:
        response = rdflib.test_store_auditable.test_remove_add_rollback(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_empty_graph():
    """Auto-generated function: get_empty_graph"""
    try:
        response = rdflib.test_store_auditable.get_empty_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_commit_empty(get_empty_graph):
    """Auto-generated function: test_add_commit_empty"""
    try:
        response = rdflib.test_store_auditable.test_add_commit_empty(get_empty_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_add_rollback_empty(get_empty_graph):
    """Auto-generated function: test_add_rollback_empty"""
    try:
        response = rdflib.test_store_auditable.test_add_rollback_empty(get_empty_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_concurrent_graph():
    """Auto-generated function: get_concurrent_graph"""
    try:
        response = rdflib.test_store_auditable.get_concurrent_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_commit_commit(get_concurrent_graph):
    """Auto-generated function: test_commit_commit"""
    try:
        response = rdflib.test_store_auditable.test_commit_commit(get_concurrent_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_commit_rollback(get_concurrent_graph):
    """Auto-generated function: test_commit_rollback"""
    try:
        response = rdflib.test_store_auditable.test_commit_rollback(get_concurrent_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rollback_commit(get_concurrent_graph):
    """Auto-generated function: test_rollback_commit"""
    try:
        response = rdflib.test_store_auditable.test_rollback_commit(get_concurrent_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rollback_rollback(get_concurrent_graph):
    """Auto-generated function: test_rollback_rollback"""
    try:
        response = rdflib.test_store_auditable.test_rollback_rollback(get_concurrent_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_embedded_graph():
    """Auto-generated function: get_embedded_graph"""
    try:
        response = rdflib.test_store_auditable.get_embedded_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_commit_commit_embedded(get_embedded_graph):
    """Auto-generated function: test_commit_commit_embedded"""
    try:
        response = rdflib.test_store_auditable.test_commit_commit_embedded(get_embedded_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_commit_rollback_embedded(get_embedded_graph):
    """Auto-generated function: test_commit_rollback_embedded"""
    try:
        response = rdflib.test_store_auditable.test_commit_rollback_embedded(get_embedded_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rollback_commit_embedded(get_embedded_graph):
    """Auto-generated function: test_rollback_commit_embedded"""
    try:
        response = rdflib.test_store_auditable.test_rollback_commit_embedded(get_embedded_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rollback_rollback_embedded(get_embedded_graph):
    """Auto-generated function: test_rollback_rollback_embedded"""
    try:
        response = rdflib.test_store_auditable.test_rollback_rollback_embedded(get_embedded_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_graph(tmp_path, store_name):
    """Auto-generated function: make_graph"""
    try:
        response = rdflib.test_namespace_binding.make_graph(tmp_path, store_name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_store_info_dict():
    """Auto-generated function: make_store_info_dict"""
    try:
        response = rdflib.test_namespace_binding.make_store_info_dict()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def store_name(request):
    """Auto-generated function: store_name"""
    try:
        response = rdflib.test_namespace_binding.store_name(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def check_ns(graph, expected_bindings):
    """Auto-generated function: check_ns"""
    try:
        response = rdflib.test_namespace_binding.check_ns(graph, expected_bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_simple_bind(tmp_path, store_name, override, replace):
    """Auto-generated function: test_simple_bind"""
    try:
        response = rdflib.test_namespace_binding.test_simple_bind(tmp_path, store_name, override, replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_bind_two_bind(tmp_path, store_name, override, replace):
    """Auto-generated function: test_bind_two_bind"""
    try:
        response = rdflib.test_namespace_binding.test_bind_two_bind(tmp_path, store_name, override, replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebind_uri_override(tmp_path, store_name, replace):
    """Auto-generated function: test_rebind_uri_override"""
    try:
        response = rdflib.test_namespace_binding.test_rebind_uri_override(tmp_path, store_name, replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebind_uri_no_override(tmp_path, store_name, replace):
    """Auto-generated function: test_rebind_uri_no_override"""
    try:
        response = rdflib.test_namespace_binding.test_rebind_uri_no_override(tmp_path, store_name, replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebind_prefix_replace(tmp_path, store_name, override):
    """Auto-generated function: test_rebind_prefix_replace"""
    try:
        response = rdflib.test_namespace_binding.test_rebind_prefix_replace(tmp_path, store_name, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_rebind_prefix_reuse_uri_replace(tmp_path, store_name, reuse_override, reuse_replace):
    """Auto-generated function: test_rebind_prefix_reuse_uri_replace"""
    try:
        response = rdflib.test_namespace_binding.test_rebind_prefix_reuse_uri_replace(tmp_path, store_name, reuse_override, reuse_replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph():
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.test_store_sparqlupdatestore.get_graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_simple_graph(get_graph):
    """Auto-generated function: test_simple_graph"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_simple_graph(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_conjunctive_default(get_graph):
    """Auto-generated function: test_conjunctive_default"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_conjunctive_default(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_u_update(get_graph):
    """Auto-generated function: test_u_update"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_u_update(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_u_update_with_initns(get_graph):
    """Auto-generated function: test_u_update_with_initns"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_u_update_with_initns(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_update_with_init_bindings(get_graph):
    """Auto-generated function: test_update_with_init_bindings"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_update_with_init_bindings(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_update_with_blank_node(get_graph):
    """Auto-generated function: test_update_with_blank_node"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_update_with_blank_node(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_update_w_with_blank_node_serialize_and_parse(get_graph):
    """Auto-generated function: test_update_w_with_blank_node_serialize_and_parse"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_update_w_with_blank_node_serialize_and_parse(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_multiple_update_with_init_bindings(get_graph):
    """Auto-generated function: test_multiple_update_with_init_bindings"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_multiple_update_with_init_bindings(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_graph_update(get_graph):
    """Auto-generated function: test_named_graph_update"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_named_graph_update(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_named_graph_update_with_init_bindings(get_graph):
    """Auto-generated function: test_named_graph_update_with_init_bindings"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_named_graph_update_with_init_bindings(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_named_graph(get_graph):
    """Auto-generated function: test_empty_named_graph"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_empty_named_graph(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_empty_literal(get_graph):
    """Auto-generated function: test_empty_literal"""
    try:
        response = rdflib.test_store_sparqlupdatestore.test_empty_literal(get_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_namespaces():
    """Auto-generated function: test_namespaces"""
    try:
        response = rdflib.test_store.test_namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_namespaces_via_manager():
    """Auto-generated function: test_namespaces_via_manager"""
    try:
        response = rdflib.test_store.test_namespaces_via_manager()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_propery_node_pickler():
    """Auto-generated function: test_propery_node_pickler"""
    try:
        response = rdflib.test_store.test_propery_node_pickler()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_dataset(request):
    """Auto-generated function: get_dataset"""
    try:
        response = rdflib.test_dataset.get_dataset(request)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_aware(get_dataset):
    """Auto-generated function: test_graph_aware"""
    try:
        response = rdflib.test_dataset.test_graph_aware(get_dataset)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_default_graph(get_dataset):
    """Auto-generated function: test_default_graph"""
    try:
        response = rdflib.test_dataset.test_default_graph(get_dataset)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_not_union(get_dataset):
    """Auto-generated function: test_not_union"""
    try:
        response = rdflib.test_dataset.test_not_union(get_dataset)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_iter(get_dataset):
    """Auto-generated function: test_iter"""
    try:
        response = rdflib.test_dataset.test_iter(get_dataset)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_graph_without_identifier():
    """Auto-generated function: test_graph_without_identifier"""
    try:
        response = rdflib.test_dataset.test_graph_without_identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_not_deprecated():
    """Auto-generated function: test_not_deprecated"""
    try:
        response = rdflib.test_dataset.test_not_deprecated()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_load_default_and_named():
    """Auto-generated function: make_load_default_and_named"""
    try:
        response = rdflib.test_dataset_default_graph.make_load_default_and_named()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_load_default_and_named(container_type, file_extension):
    """Auto-generated function: test_load_default_and_named"""
    try:
        response = rdflib.test_dataset_default_graph.test_load_default_and_named(container_type, file_extension)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_load_default_only_cases():
    """Auto-generated function: make_load_default_only_cases"""
    try:
        response = rdflib.test_dataset_default_graph.make_load_default_only_cases()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_load_default_only(container_type, file_extension):
    """Auto-generated function: test_load_default_only"""
    try:
        response = rdflib.test_dataset_default_graph.test_load_default_only(container_type, file_extension)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_stuff(graph):
    """Auto-generated function: add_stuff"""
    try:
        response = rdflib.test_dataset_generators.add_stuff(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subjects():
    """Auto-generated function: test_unique_subjects"""
    try:
        response = rdflib.test_dataset_generators.test_unique_subjects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_predicates():
    """Auto-generated function: test_unique_predicates"""
    try:
        response = rdflib.test_dataset_generators.test_unique_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_objects():
    """Auto-generated function: test_unique_objects"""
    try:
        response = rdflib.test_dataset_generators.test_unique_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subject_predicates():
    """Auto-generated function: test_unique_subject_predicates"""
    try:
        response = rdflib.test_dataset_generators.test_unique_subject_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_predicate_objects():
    """Auto-generated function: test_unique_predicate_objects"""
    try:
        response = rdflib.test_dataset_generators.test_unique_predicate_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_unique_subject_objects():
    """Auto-generated function: test_unique_subject_objects"""
    try:
        response = rdflib.test_dataset_generators.test_unique_subject_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_berners_lee_card_into_dataset_default():
    """Auto-generated function: test_parse_berners_lee_card_into_dataset_default"""
    try:
        response = rdflib.test_dataset_generators.test_parse_berners_lee_card_into_dataset_default()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def test_parse_berners_lee_card_into_dataset_context():
    """Auto-generated function: test_parse_berners_lee_card_into_dataset_context"""
    try:
        response = rdflib.test_dataset_generators.test_parse_berners_lee_card_into_dataset_context()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def autodoc_skip_member_handler(app, what, name, obj, skip, options):
    """Auto-generated function: autodoc_skip_member_handler"""
    try:
        response = rdflib.docs.conf.autodoc_skip_member_handler(app, what, name, obj, skip, options)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setup(app):
    """Auto-generated function: setup"""
    try:
        response = rdflib.docs.conf.setup(app)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def hr():
    """Auto-generated function: hr"""
    try:
        response = rdflib.docs.plugintable.hr()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def n3():
    """Auto-generated function: n3"""
    try:
        response = rdflib.container.Container.n3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def type_of_conatiner():
    """Auto-generated function: type_of_conatiner"""
    try:
        response = rdflib.container.Container.type_of_conatiner()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def type_of_container():
    """Auto-generated function: type_of_container"""
    try:
        response = rdflib.container.Container.type_of_container()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def index(item):
    """Auto-generated function: index"""
    try:
        response = rdflib.container.Container.index(item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def items():
    """Auto-generated function: items"""
    try:
        response = rdflib.container.Container.items()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def end():
    """Auto-generated function: end"""
    try:
        response = rdflib.container.Container.end()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def append(item):
    """Auto-generated function: append"""
    try:
        response = rdflib.container.Container.append(item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def append_multiple(other):
    """Auto-generated function: append_multiple"""
    try:
        response = rdflib.container.Container.append_multiple(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clear():
    """Auto-generated function: clear"""
    try:
        response = rdflib.container.Container.clear()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def anyone():
    """Auto-generated function: anyone"""
    try:
        response = rdflib.container.Alt.anyone()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_at_position(pos, item):
    """Auto-generated function: add_at_position"""
    try:
        response = rdflib.container.Seq.add_at_position(pos, item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, sink):
    """Auto-generated function: parse"""
    try:
        response = rdflib.parser.Parser.parse(source, sink)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def name():
    """Auto-generated function: name"""
    try:
        response = rdflib.parser.BytesIOWrapper.name()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def closed():
    """Auto-generated function: closed"""
    try:
        response = rdflib.parser.BytesIOWrapper.closed()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def readable():
    """Auto-generated function: readable"""
    try:
        response = rdflib.parser.BytesIOWrapper.readable()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def writable():
    """Auto-generated function: writable"""
    try:
        response = rdflib.parser.BytesIOWrapper.writable()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def truncate(size):
    """Auto-generated function: truncate"""
    try:
        response = rdflib.parser.BytesIOWrapper.truncate(size)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isatty():
    """Auto-generated function: isatty"""
    try:
        response = rdflib.parser.BytesIOWrapper.isatty()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def fileno():
    """Auto-generated function: fileno"""
    try:
        response = rdflib.parser.BytesIOWrapper.fileno()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close():
    """Auto-generated function: close"""
    try:
        response = rdflib.parser.PythonInputSource.close()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def flush():
    """Auto-generated function: flush"""
    try:
        response = rdflib.parser.BytesIOWrapper.flush()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def read():
    """Auto-generated function: read"""
    try:
        response = rdflib.parser.BytesIOWrapper.read()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def read1():
    """Auto-generated function: read1"""
    try:
        response = rdflib.parser.BytesIOWrapper.read1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def readinto():
    """Auto-generated function: readinto"""
    try:
        response = rdflib.parser.BytesIOWrapper.readinto()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def readinto1():
    """Auto-generated function: readinto1"""
    try:
        response = rdflib.parser.BytesIOWrapper.readinto1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def seek():
    """Auto-generated function: seek"""
    try:
        response = rdflib.parser.BytesIOWrapper.seek()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def seekable():
    """Auto-generated function: seekable"""
    try:
        response = rdflib.parser.BytesIOWrapper.seekable()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def tell():
    """Auto-generated function: tell"""
    try:
        response = rdflib.parser.BytesIOWrapper.tell()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write():
    """Auto-generated function: write"""
    try:
        response = rdflib.parser.BytesIOWrapper.write()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getPublicId():
    """Auto-generated function: getPublicId"""
    try:
        response = rdflib.parser.PythonInputSource.getPublicId()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setPublicId(public_id):
    """Auto-generated function: setPublicId"""
    try:
        response = rdflib.parser.PythonInputSource.setPublicId(public_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getSystemId():
    """Auto-generated function: getSystemId"""
    try:
        response = rdflib.parser.PythonInputSource.getSystemId()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setSystemId(system_id):
    """Auto-generated function: setSystemId"""
    try:
        response = rdflib.parser.PythonInputSource.setSystemId(system_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getallmatchingheaders(cls, message, name):
    """Auto-generated function: getallmatchingheaders"""
    try:
        response = rdflib.parser.URLInputSource.getallmatchingheaders(cls, message, name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_links(cls, response):
    """Auto-generated function: get_links"""
    try:
        response = rdflib.parser.URLInputSource.get_links(cls, response)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_alternates(type_):
    """Auto-generated function: get_alternates"""
    try:
        response = rdflib.parser.URLInputSource.get_alternates(type_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def create_input_source(source, publicID, location, file, data, format):
    """Auto-generated function: create_input_source"""
    try:
        response = rdflib.parser.create_input_source(source, publicID, location, file, data, format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph():
    """Auto-generated function: graph"""
    try:
        response = rdflib.resource.Resource.graph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def identifier():
    """Auto-generated function: identifier"""
    try:
        response = rdflib.resource.Resource.identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(p, o):
    """Auto-generated function: add"""
    try:
        response = rdflib.resource.Resource.add(p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(p, o):
    """Auto-generated function: remove"""
    try:
        response = rdflib.resource.Resource.remove(p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def set(p, o):
    """Auto-generated function: set"""
    try:
        response = rdflib.resource.Resource.set(p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subjects(predicate):
    """Auto-generated function: subjects"""
    try:
        response = rdflib.resource.Resource.subjects(predicate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicates(o):
    """Auto-generated function: predicates"""
    try:
        response = rdflib.resource.Resource.predicates(o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def objects(predicate):
    """Auto-generated function: objects"""
    try:
        response = rdflib.resource.Resource.objects(predicate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject_predicates():
    """Auto-generated function: subject_predicates"""
    try:
        response = rdflib.resource.Resource.subject_predicates()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject_objects():
    """Auto-generated function: subject_objects"""
    try:
        response = rdflib.resource.Resource.subject_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicate_objects():
    """Auto-generated function: predicate_objects"""
    try:
        response = rdflib.resource.Resource.predicate_objects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def value(p, o, default, any):
    """Auto-generated function: value"""
    try:
        response = rdflib.resource.Resource.value(p, o, default, any)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def items():
    """Auto-generated function: items"""
    try:
        response = rdflib.resource.Resource.items()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def transitive_objects(predicate, remember):
    """Auto-generated function: transitive_objects"""
    try:
        response = rdflib.resource.Resource.transitive_objects(predicate, remember)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def transitive_subjects(predicate, remember):
    """Auto-generated function: transitive_subjects"""
    try:
        response = rdflib.resource.Resource.transitive_subjects(predicate, remember)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def qname():
    """Auto-generated function: qname"""
    try:
        response = rdflib.resource.Resource.qname()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eval(graph, subj, obj):
    """Auto-generated function: eval"""
    try:
        response = rdflib.paths.NegatedPath.eval(graph, subj, obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def n3(namespace_manager):
    """Auto-generated function: n3"""
    try:
        response = rdflib.paths.NegatedPath.n3(namespace_manager)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path_alternative(other):
    """Auto-generated function: path_alternative"""
    try:
        response = rdflib.paths.path_alternative(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path_sequence(other):
    """Auto-generated function: path_sequence"""
    try:
        response = rdflib.paths.path_sequence(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalPath(graph, t):
    """Auto-generated function: evalPath"""
    try:
        response = rdflib.paths.evalPath(graph, t)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eval_path(graph, t):
    """Auto-generated function: eval_path"""
    try:
        response = rdflib.paths.eval_path(graph, t)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def mul_path(p, mul):
    """Auto-generated function: mul_path"""
    try:
        response = rdflib.paths.mul_path(p, mul)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def inv_path(p):
    """Auto-generated function: inv_path"""
    try:
        response = rdflib.paths.inv_path(p)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def neg_path(p):
    """Auto-generated function: neg_path"""
    try:
        response = rdflib.paths.neg_path(p)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def cast_bytes(s, enc):
    """Auto-generated function: cast_bytes"""
    try:
        response = rdflib.compat.cast_bytes(s, enc)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ascii(stream):
    """Auto-generated function: ascii"""
    try:
        response = rdflib.compat.ascii(stream)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bopen():
    """Auto-generated function: bopen"""
    try:
        response = rdflib.compat.bopen()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sign(n):
    """Auto-generated function: sign"""
    try:
        response = rdflib.compat.sign(n)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def decodeStringEscape(s):
    """Auto-generated function: decodeStringEscape"""
    try:
        response = rdflib.compat.decodeStringEscape(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def decodeUnicodeEscape(escaped):
    """Auto-generated function: decodeUnicodeEscape"""
    try:
        response = rdflib.compat.decodeUnicodeEscape(escaped)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.serializer.Serializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def relativize(uri):
    """Auto-generated function: relativize"""
    try:
        response = rdflib.serializer.Serializer.relativize(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def n3(namespace_manager):
    """Auto-generated function: n3"""
    try:
        response = rdflib.term.Variable.n3(namespace_manager)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eq(other):
    """Auto-generated function: eq"""
    try:
        response = rdflib.term.Literal.eq(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def neq(other):
    """Auto-generated function: neq"""
    try:
        response = rdflib.term.Literal.neq(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startswith(prefix, start, end):
    """Auto-generated function: startswith"""
    try:
        response = rdflib.term.Identifier.startswith(prefix, start, end)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def identifier():
    """Auto-generated function: identifier"""
    try:
        response = rdflib.term.Identifier.identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def toPython():
    """Auto-generated function: toPython"""
    try:
        response = rdflib.term.Variable.toPython()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def defrag():
    """Auto-generated function: defrag"""
    try:
        response = rdflib.term.URIRef.defrag()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def fragment():
    """Auto-generated function: fragment"""
    try:
        response = rdflib.term.URIRef.fragment()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def de_skolemize():
    """Auto-generated function: de_skolemize"""
    try:
        response = rdflib.term.URIRef.de_skolemize()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def skolemize(authority, basepath):
    """Auto-generated function: skolemize"""
    try:
        response = rdflib.term.BNode.skolemize(authority, basepath)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def normalize():
    """Auto-generated function: normalize"""
    try:
        response = rdflib.term.Literal.normalize()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ill_typed():
    """Auto-generated function: ill_typed"""
    try:
        response = rdflib.term.Literal.ill_typed()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def value():
    """Auto-generated function: value"""
    try:
        response = rdflib.term.Literal.value()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def language():
    """Auto-generated function: language"""
    try:
        response = rdflib.term.Literal.language()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def datatype():
    """Auto-generated function: datatype"""
    try:
        response = rdflib.term.Literal.datatype()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(datatype, pythontype, constructor, lexicalizer, datatype_specific):
    """Auto-generated function: bind"""
    try:
        response = rdflib.term.bind(datatype, pythontype, constructor, lexicalizer, datatype_specific)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def store():
    """Auto-generated function: store"""
    try:
        response = rdflib.graph.Graph.store()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def identifier():
    """Auto-generated function: identifier"""
    try:
        response = rdflib.graph.Graph.identifier()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace_manager(nm):
    """Auto-generated function: namespace_manager"""
    try:
        response = rdflib.graph.Graph.namespace_manager(nm)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def toPython():
    """Auto-generated function: toPython"""
    try:
        response = rdflib.graph.Seq.toPython()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def destroy(configuration):
    """Auto-generated function: destroy"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.destroy(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def commit():
    """Auto-generated function: commit"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.commit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rollback():
    """Auto-generated function: rollback"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.rollback()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def open(configuration, create):
    """Auto-generated function: open"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.open(configuration, create)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close():
    """Auto-generated function: close"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.close()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple_or_quad):
    """Auto-generated function: add"""
    try:
        response = rdflib.graph.BatchAddGraph.add(triple_or_quad)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def addN(quads):
    """Auto-generated function: addN"""
    try:
        response = rdflib.graph.BatchAddGraph.addN(quads)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(triple):
    """Auto-generated function: remove"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.remove(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(triple):
    """Auto-generated function: triples"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.triples(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def set(triple):
    """Auto-generated function: set"""
    try:
        response = rdflib.graph.Graph.set(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subjects(predicate, object, unique):
    """Auto-generated function: subjects"""
    try:
        response = rdflib.graph.Graph.subjects(predicate, object, unique)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicates(subject, object, unique):
    """Auto-generated function: predicates"""
    try:
        response = rdflib.graph.Graph.predicates(subject, object, unique)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def objects(subject, predicate, unique):
    """Auto-generated function: objects"""
    try:
        response = rdflib.graph.Graph.objects(subject, predicate, unique)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject_predicates(object, unique):
    """Auto-generated function: subject_predicates"""
    try:
        response = rdflib.graph.Graph.subject_predicates(object, unique)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject_objects(predicate, unique):
    """Auto-generated function: subject_objects"""
    try:
        response = rdflib.graph.Graph.subject_objects(predicate, unique)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicate_objects(subject, unique):
    """Auto-generated function: predicate_objects"""
    try:
        response = rdflib.graph.Graph.predicate_objects(subject, unique)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples_choices(triple, context):
    """Auto-generated function: triples_choices"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.triples_choices(triple, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def value(subject, predicate, object, default, any):
    """Auto-generated function: value"""
    try:
        response = rdflib.graph.Graph.value(subject, predicate, object, default, any)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def items(list):
    """Auto-generated function: items"""
    try:
        response = rdflib.graph.Graph.items(list)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def transitiveClosure(func, arg, seen):
    """Auto-generated function: transitiveClosure"""
    try:
        response = rdflib.graph.Graph.transitiveClosure(func, arg, seen)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def transitive_objects(subject, predicate, remember):
    """Auto-generated function: transitive_objects"""
    try:
        response = rdflib.graph.Graph.transitive_objects(subject, predicate, remember)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def transitive_subjects(predicate, object, remember):
    """Auto-generated function: transitive_subjects"""
    try:
        response = rdflib.graph.Graph.transitive_subjects(predicate, object, remember)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def qname(uri):
    """Auto-generated function: qname"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.qname(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def compute_qname(uri, generate):
    """Auto-generated function: compute_qname"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.compute_qname(uri, generate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def absolutize(uri, defrag):
    """Auto-generated function: absolutize"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.absolutize(uri, defrag)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(destination, format, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.graph.Graph.serialize(destination, format, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def print(format, encoding, out):
    """Auto-generated function: print"""
    try:
        response = rdflib.graph.Graph.print(format, encoding, out)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, publicID, format):
    """Auto-generated function: parse"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.parse(source, publicID, format)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(query_object, processor, result, initNs, initBindings, use_store_provided):
    """Auto-generated function: query"""
    try:
        response = rdflib.graph.Graph.query(query_object, processor, result, initNs, initBindings, use_store_provided)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(update_object, processor, initNs, initBindings, use_store_provided):
    """Auto-generated function: update"""
    try:
        response = rdflib.graph.Graph.update(update_object, processor, initNs, initBindings, use_store_provided)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def n3(namespace_manager):
    """Auto-generated function: n3"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.n3(namespace_manager)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isomorphic(other):
    """Auto-generated function: isomorphic"""
    try:
        response = rdflib.graph.Graph.isomorphic(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def connected():
    """Auto-generated function: connected"""
    try:
        response = rdflib.graph.Graph.connected()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def all_nodes():
    """Auto-generated function: all_nodes"""
    try:
        response = rdflib.graph.Graph.all_nodes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def collection(identifier):
    """Auto-generated function: collection"""
    try:
        response = rdflib.graph.Graph.collection(identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def resource(identifier):
    """Auto-generated function: resource"""
    try:
        response = rdflib.graph.Graph.resource(identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def skolemize(new_graph, bnode, authority, basepath):
    """Auto-generated function: skolemize"""
    try:
        response = rdflib.graph.Graph.skolemize(new_graph, bnode, authority, basepath)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def de_skolemize(new_graph, uriref):
    """Auto-generated function: de_skolemize"""
    try:
        response = rdflib.graph.Graph.de_skolemize(new_graph, uriref)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def cbd(resource):
    """Auto-generated function: cbd"""
    try:
        response = rdflib.graph.Graph.cbd(resource)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def quads(triple_or_quad):
    """Auto-generated function: quads"""
    try:
        response = rdflib.graph.ReadOnlyGraphAggregate.quads(triple_or_quad)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts(triple):
    """Auto-generated function: contexts"""
    try:
        response = rdflib.graph.Dataset.contexts(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph(identifier):
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.graph.ConjunctiveGraph.get_graph(identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_context(identifier, quoted, base):
    """Auto-generated function: get_context"""
    try:
        response = rdflib.graph.ConjunctiveGraph.get_context(identifier, quoted, base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_context(context):
    """Auto-generated function: remove_context"""
    try:
        response = rdflib.graph.ConjunctiveGraph.remove_context(context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def context_id(uri, context_id):
    """Auto-generated function: context_id"""
    try:
        response = rdflib.graph.ConjunctiveGraph.context_id(uri, context_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph(identifier, base):
    """Auto-generated function: graph"""
    try:
        response = rdflib.graph.Dataset.graph(identifier, base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_graph(g):
    """Auto-generated function: add_graph"""
    try:
        response = rdflib.graph.Dataset.add_graph(g)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_graph(g):
    """Auto-generated function: remove_graph"""
    try:
        response = rdflib.graph.Dataset.remove_graph(g)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.graph.BatchAddGraph.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generateVoID(g, dataset, res, distinctForPartitions):
    """Auto-generated function: generateVoID"""
    try:
        response = rdflib.void.generateVoID(g, dataset, res, distinctForPartitions)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(strOrQuery, initBindings, initNs, DEBUG):
    """Auto-generated function: query"""
    try:
        response = rdflib.query.Processor.query(strOrQuery, initBindings, initNs, DEBUG)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(strOrQuery, initBindings, initNs):
    """Auto-generated function: update"""
    try:
        response = rdflib.query.UpdateProcessor.update(strOrQuery, initBindings, initNs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write(arg):
    """Auto-generated function: write"""
    try:
        response = rdflib.query.EncodeOnlyUnicode.write(arg)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get(name, default):
    """Auto-generated function: get"""
    try:
        response = rdflib.query.ResultRow.get(name, default)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def asdict():
    """Auto-generated function: asdict"""
    try:
        response = rdflib.query.ResultRow.asdict()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bindings(b):
    """Auto-generated function: bindings"""
    try:
        response = rdflib.query.Result.bindings(b)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source):
    """Auto-generated function: parse"""
    try:
        response = rdflib.query.ResultParser.parse(source)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.query.ResultSerializer.serialize(stream, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def set_map(amap):
    """Auto-generated function: set_map"""
    try:
        response = rdflib.events.Dispatcher.set_map(amap)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_map():
    """Auto-generated function: get_map"""
    try:
        response = rdflib.events.Dispatcher.get_map()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subscribe(event_type, handler):
    """Auto-generated function: subscribe"""
    try:
        response = rdflib.events.Dispatcher.subscribe(event_type, handler)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dispatch(event):
    """Auto-generated function: dispatch"""
    try:
        response = rdflib.events.Dispatcher.dispatch(event)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def fquotmod(val, low, high):
    """Auto-generated function: fquotmod"""
    try:
        response = rdflib.xsd_datetime.fquotmod(val, low, high)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def max_days_in_month(year, month):
    """Auto-generated function: max_days_in_month"""
    try:
        response = rdflib.xsd_datetime.max_days_in_month(year, month)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def totimedelta(start, end):
    """Auto-generated function: totimedelta"""
    try:
        response = rdflib.xsd_datetime.Duration.totimedelta(start, end)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_xsd_duration(dur_string, as_timedelta_if_possible):
    """Auto-generated function: parse_xsd_duration"""
    try:
        response = rdflib.xsd_datetime.parse_xsd_duration(dur_string, as_timedelta_if_possible)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def duration_isoformat(tdt, in_weeks):
    """Auto-generated function: duration_isoformat"""
    try:
        response = rdflib.xsd_datetime.duration_isoformat(tdt, in_weeks)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def xsd_datetime_isoformat(dt):
    """Auto-generated function: xsd_datetime_isoformat"""
    try:
        response = rdflib.xsd_datetime.xsd_datetime_isoformat(dt)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_xsd_date(date_string):
    """Auto-generated function: parse_xsd_date"""
    try:
        response = rdflib.xsd_datetime.parse_xsd_date(date_string)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_xsd_gyear(gyear_string):
    """Auto-generated function: parse_xsd_gyear"""
    try:
        response = rdflib.xsd_datetime.parse_xsd_gyear(gyear_string)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_xsd_gyearmonth(gym_string):
    """Auto-generated function: parse_xsd_gyearmonth"""
    try:
        response = rdflib.xsd_datetime.parse_xsd_gyearmonth(gym_string)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getClass():
    """Auto-generated function: getClass"""
    try:
        response = rdflib.plugin.PKGPlugin.getClass()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def register(name, kind, module_path, class_name):
    """Auto-generated function: register"""
    try:
        response = rdflib.plugin.register(name, kind, module_path, class_name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get(name, kind):
    """Auto-generated function: get"""
    try:
        response = rdflib.plugin.get(name, kind)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def plugins(name, kind):
    """Auto-generated function: plugins"""
    try:
        response = rdflib.plugin.plugins(name, kind)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph_digest(stats):
    """Auto-generated function: graph_digest"""
    try:
        response = rdflib.compare.IsomorphicGraph.graph_digest(stats)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def internal_hash(stats):
    """Auto-generated function: internal_hash"""
    try:
        response = rdflib.compare.IsomorphicGraph.internal_hash(stats)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def key():
    """Auto-generated function: key"""
    try:
        response = rdflib.compare.Color.key()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def hash_color(color):
    """Auto-generated function: hash_color"""
    try:
        response = rdflib.compare.Color.hash_color(color)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def distinguish(W, graph):
    """Auto-generated function: distinguish"""
    try:
        response = rdflib.compare.Color.distinguish(W, graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def discrete():
    """Auto-generated function: discrete"""
    try:
        response = rdflib.compare.Color.discrete()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def copy():
    """Auto-generated function: copy"""
    try:
        response = rdflib.compare.Color.copy()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_hash(stats):
    """Auto-generated function: to_hash"""
    try:
        response = rdflib.compare._TripleCanonicalizer.to_hash(stats)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def canonical_triples(stats):
    """Auto-generated function: canonical_triples"""
    try:
        response = rdflib.compare._TripleCanonicalizer.canonical_triples(stats)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_isomorphic(graph):
    """Auto-generated function: to_isomorphic"""
    try:
        response = rdflib.compare.to_isomorphic(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isomorphic(graph1, graph2):
    """Auto-generated function: isomorphic"""
    try:
        response = rdflib.compare.isomorphic(graph1, graph2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_canonical_graph(g1, stats):
    """Auto-generated function: to_canonical_graph"""
    try:
        response = rdflib.compare.to_canonical_graph(g1, stats)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph_diff(g1, g2):
    """Auto-generated function: graph_diff"""
    try:
        response = rdflib.compare.graph_diff(g1, g2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def similar(g1, g2):
    """Auto-generated function: similar"""
    try:
        response = rdflib.compare.similar(g1, g2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def register(object, id):
    """Auto-generated function: register"""
    try:
        response = rdflib.store.NodePickler.register(object, id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def loads(s):
    """Auto-generated function: loads"""
    try:
        response = rdflib.store.NodePickler.loads(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dumps(obj, protocol, bin):
    """Auto-generated function: dumps"""
    try:
        response = rdflib.store.NodePickler.dumps(obj, protocol, bin)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def node_pickler():
    """Auto-generated function: node_pickler"""
    try:
        response = rdflib.store.Store.node_pickler()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def create(configuration):
    """Auto-generated function: create"""
    try:
        response = rdflib.store.Store.create(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def open(configuration, create):
    """Auto-generated function: open"""
    try:
        response = rdflib.store.Store.open(configuration, create)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close(commit_pending_transaction):
    """Auto-generated function: close"""
    try:
        response = rdflib.store.Store.close(commit_pending_transaction)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def destroy(configuration):
    """Auto-generated function: destroy"""
    try:
        response = rdflib.store.Store.destroy(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def gc():
    """Auto-generated function: gc"""
    try:
        response = rdflib.store.Store.gc()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple, context, quoted):
    """Auto-generated function: add"""
    try:
        response = rdflib.store.Store.add(triple, context, quoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def addN(quads):
    """Auto-generated function: addN"""
    try:
        response = rdflib.store.Store.addN(quads)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(triple, context):
    """Auto-generated function: remove"""
    try:
        response = rdflib.store.Store.remove(triple, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples_choices(triple, context):
    """Auto-generated function: triples_choices"""
    try:
        response = rdflib.store.Store.triples_choices(triple, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(triple_pattern, context):
    """Auto-generated function: triples"""
    try:
        response = rdflib.store.Store.triples(triple_pattern, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts(triple):
    """Auto-generated function: contexts"""
    try:
        response = rdflib.store.Store.contexts(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(query, initNs, initBindings, queryGraph):
    """Auto-generated function: query"""
    try:
        response = rdflib.store.Store.query(query, initNs, initBindings, queryGraph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(update, initNs, initBindings, queryGraph):
    """Auto-generated function: update"""
    try:
        response = rdflib.store.Store.update(update, initNs, initBindings, queryGraph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.store.Store.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix(namespace):
    """Auto-generated function: prefix"""
    try:
        response = rdflib.store.Store.prefix(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(prefix):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.store.Store.namespace(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.store.Store.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def commit():
    """Auto-generated function: commit"""
    try:
        response = rdflib.store.Store.commit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rollback():
    """Auto-generated function: rollback"""
    try:
        response = rdflib.store.Store.rollback()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_graph(graph):
    """Auto-generated function: add_graph"""
    try:
        response = rdflib.store.Store.add_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_graph(graph):
    """Auto-generated function: remove_graph"""
    try:
        response = rdflib.store.Store.remove_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def list2set(seq):
    """Auto-generated function: list2set"""
    try:
        response = rdflib.util.list2set(seq)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def first(seq):
    """Auto-generated function: first"""
    try:
        response = rdflib.util.first(seq)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uniq(sequence, strip):
    """Auto-generated function: uniq"""
    try:
        response = rdflib.util.uniq(sequence, strip)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def more_than(sequence, number):
    """Auto-generated function: more_than"""
    try:
        response = rdflib.util.more_than(sequence, number)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_term(s, default):
    """Auto-generated function: to_term"""
    try:
        response = rdflib.util.to_term(s, default)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_n3(s, default, backend, nsm):
    """Auto-generated function: from_n3"""
    try:
        response = rdflib.util.from_n3(s, default, backend, nsm)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def date_time(t, local_time_zone):
    """Auto-generated function: date_time"""
    try:
        response = rdflib.util.date_time(t, local_time_zone)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_date_time(val):
    """Auto-generated function: parse_date_time"""
    try:
        response = rdflib.util.parse_date_time(val)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def guess_format(fpath, fmap):
    """Auto-generated function: guess_format"""
    try:
        response = rdflib.util.guess_format(fpath, fmap)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def find_roots(graph, prop, roots):
    """Auto-generated function: find_roots"""
    try:
        response = rdflib.util.find_roots(graph, prop, roots)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_tree(graph, root, prop, mapper, sortkey, done, dir):
    """Auto-generated function: get_tree"""
    try:
        response = rdflib.util.get_tree(graph, root, prop, mapper, sortkey, done, dir)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def n3():
    """Auto-generated function: n3"""
    try:
        response = rdflib.collection.Collection.n3()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def index(item):
    """Auto-generated function: index"""
    try:
        response = rdflib.collection.Collection.index(item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def append(item):
    """Auto-generated function: append"""
    try:
        response = rdflib.collection.Collection.append(item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clear():
    """Auto-generated function: clear"""
    try:
        response = rdflib.collection.Collection.clear()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdflib_to_networkx_multidigraph(graph, edge_attrs):
    """Auto-generated function: rdflib_to_networkx_multidigraph"""
    try:
        response = rdflib.extras.external_graph_libs.rdflib_to_networkx_multidigraph(graph, edge_attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdflib_to_networkx_digraph(graph, calc_weights, edge_attrs):
    """Auto-generated function: rdflib_to_networkx_digraph"""
    try:
        response = rdflib.extras.external_graph_libs.rdflib_to_networkx_digraph(graph, calc_weights, edge_attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdflib_to_networkx_graph(graph, calc_weights, edge_attrs):
    """Auto-generated function: rdflib_to_networkx_graph"""
    try:
        response = rdflib.extras.external_graph_libs.rdflib_to_networkx_graph(graph, calc_weights, edge_attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdflib_to_graphtool(graph, v_prop_names, e_prop_names, transform_s, transform_p, transform_o):
    """Auto-generated function: rdflib_to_graphtool"""
    try:
        response = rdflib.extras.external_graph_libs.rdflib_to_graphtool(graph, v_prop_names, e_prop_names, transform_s, transform_p, transform_o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_shacl_path(shapes_graph, path_identifier):
    """Auto-generated function: parse_shacl_path"""
    try:
        response = rdflib.extras.shacl.parse_shacl_path(shapes_graph, path_identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def build_shacl_path(path, target_graph):
    """Auto-generated function: build_shacl_path"""
    try:
        response = rdflib.extras.shacl.build_shacl_path(path, target_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main(target, _help, options, stdin):
    """Auto-generated function: main"""
    try:
        response = rdflib.extras.cmdlineutils.main(target, _help, options, stdin)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def about(subject):
    """Auto-generated function: about"""
    try:
        response = rdflib.extras.describer.Describer.about(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def value(p, v):
    """Auto-generated function: value"""
    try:
        response = rdflib.extras.describer.Describer.value(p, v)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rel(p, o):
    """Auto-generated function: rel"""
    try:
        response = rdflib.extras.describer.Describer.rel(p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rev(p, s):
    """Auto-generated function: rev"""
    try:
        response = rdflib.extras.describer.Describer.rev(p, s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdftype(t):
    """Auto-generated function: rdftype"""
    try:
        response = rdflib.extras.describer.Describer.rdftype(t)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def cast_value(v):
    """Auto-generated function: cast_value"""
    try:
        response = rdflib.extras.describer.cast_value(v)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def cast_identifier(ref):
    """Auto-generated function: cast_identifier"""
    try:
        response = rdflib.extras.describer.cast_identifier(ref)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def generateQName(graph, uri):
    """Auto-generated function: generateQName"""
    try:
        response = rdflib.extras.infixowl.generateQName(graph, uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def classOrTerm(thing):
    """Auto-generated function: classOrTerm"""
    try:
        response = rdflib.extras.infixowl.classOrTerm(thing)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def classOrIdentifier(thing):
    """Auto-generated function: classOrIdentifier"""
    try:
        response = rdflib.extras.infixowl.classOrIdentifier(thing)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def propertyOrIdentifier(thing):
    """Auto-generated function: propertyOrIdentifier"""
    try:
        response = rdflib.extras.infixowl.propertyOrIdentifier(thing)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def manchesterSyntax(thing, store, boolean, transientList):
    """Auto-generated function: manchesterSyntax"""
    try:
        response = rdflib.extras.infixowl.manchesterSyntax(thing, store, boolean, transientList)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def GetIdentifiedClasses(graph):
    """Auto-generated function: GetIdentifiedClasses"""
    try:
        response = rdflib.extras.infixowl.GetIdentifiedClasses(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(graph):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.extras.infixowl.Property.serialize(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clearInDegree():
    """Auto-generated function: clearInDegree"""
    try:
        response = rdflib.extras.infixowl.Individual.clearInDegree()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clearOutDegree():
    """Auto-generated function: clearOutDegree"""
    try:
        response = rdflib.extras.infixowl.Individual.clearOutDegree()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def delete():
    """Auto-generated function: delete"""
    try:
        response = rdflib.extras.infixowl.Individual.delete()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def replace(other):
    """Auto-generated function: replace"""
    try:
        response = rdflib.extras.infixowl.Property.replace(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def handleAnnotation(val):
    """Auto-generated function: handleAnnotation"""
    try:
        response = rdflib.extras.infixowl.AnnotatableTerms.handleAnnotation(val)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setupACEAnnotations():
    """Auto-generated function: setupACEAnnotations"""
    try:
        response = rdflib.extras.infixowl.AnnotatableTerms.setupACEAnnotations()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setVersion(version):
    """Auto-generated function: setVersion"""
    try:
        response = rdflib.extras.infixowl.Ontology.setVersion(version)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def AllClasses(graph):
    """Auto-generated function: AllClasses"""
    try:
        response = rdflib.extras.infixowl.AllClasses(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def AllProperties(graph):
    """Auto-generated function: AllProperties"""
    try:
        response = rdflib.extras.infixowl.AllProperties(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def term(name):
    """Auto-generated function: term"""
    try:
        response = rdflib.extras.infixowl.ClassNamespaceFactory.term(name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ComponentTerms(cls):
    """Auto-generated function: ComponentTerms"""
    try:
        response = rdflib.extras.infixowl.ComponentTerms(cls)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def DeepClassClear(class_to_prune):
    """Auto-generated function: DeepClassClear"""
    try:
        response = rdflib.extras.infixowl.DeepClassClear(class_to_prune)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def CastClass(c, graph):
    """Auto-generated function: CastClass"""
    try:
        response = rdflib.extras.infixowl.CastClass(c, graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setupNounAnnotations(noun_annotations):
    """Auto-generated function: setupNounAnnotations"""
    try:
        response = rdflib.extras.infixowl.Class.setupNounAnnotations(noun_annotations)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isPrimitive():
    """Auto-generated function: isPrimitive"""
    try:
        response = rdflib.extras.infixowl.Restriction.isPrimitive()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subSumpteeIds():
    """Auto-generated function: subSumpteeIds"""
    try:
        response = rdflib.extras.infixowl.Class.subSumpteeIds()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def manchesterClass(full, normalization):
    """Auto-generated function: manchesterClass"""
    try:
        response = rdflib.extras.infixowl.Class.manchesterClass(full, normalization)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def index(item):
    """Auto-generated function: index"""
    try:
        response = rdflib.extras.infixowl.OWLRDFListProxy.index(item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clear():
    """Auto-generated function: clear"""
    try:
        response = rdflib.extras.infixowl.OWLRDFListProxy.clear()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def append(item):
    """Auto-generated function: append"""
    try:
        response = rdflib.extras.infixowl.OWLRDFListProxy.append(item)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getIntersections():
    """Auto-generated function: getIntersections"""
    try:
        response = rdflib.extras.infixowl.BooleanClass.getIntersections()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getUnions():
    """Auto-generated function: getUnions"""
    try:
        response = rdflib.extras.infixowl.BooleanClass.getUnions()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def copy():
    """Auto-generated function: copy"""
    try:
        response = rdflib.extras.infixowl.BooleanClass.copy()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def changeOperator(newOperator):
    """Auto-generated function: changeOperator"""
    try:
        response = rdflib.extras.infixowl.BooleanClass.changeOperator(newOperator)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def AllDifferent(members):
    """Auto-generated function: AllDifferent"""
    try:
        response = rdflib.extras.infixowl.AllDifferent(members)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def restrictionKind():
    """Auto-generated function: restrictionKind"""
    try:
        response = rdflib.extras.infixowl.Restriction.restrictionKind()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setupVerbAnnotations(verb_annotations):
    """Auto-generated function: setupVerbAnnotations"""
    try:
        response = rdflib.extras.infixowl.Property.setupVerbAnnotations(verb_annotations)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def CommonNSBindings(graph, additionalNS):
    """Auto-generated function: CommonNSBindings"""
    try:
        response = rdflib.extras.infixowl.CommonNSBindings(graph, additionalNS)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def title():
    """Auto-generated function: title"""
    try:
        response = rdflib.namespace.__init__.Namespace.title()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def term(name):
    """Auto-generated function: term"""
    try:
        response = rdflib.namespace.__init__.ClosedNamespace.term(name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def format():
    """Auto-generated function: format"""
    try:
        response = rdflib.namespace.__init__.URIPattern.format()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def as_jsonld_context(pfx):
    """Auto-generated function: as_jsonld_context"""
    try:
        response = rdflib.namespace.__init__.DefinedNamespaceMeta.as_jsonld_context(pfx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uri():
    """Auto-generated function: uri"""
    try:
        response = rdflib.namespace.__init__.ClosedNamespace.uri()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def store():
    """Auto-generated function: store"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.store()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def qname(uri):
    """Auto-generated function: qname"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.qname(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def curie(uri, generate):
    """Auto-generated function: curie"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.curie(uri, generate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def qname_strict(uri):
    """Auto-generated function: qname_strict"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.qname_strict(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def normalizeUri(rdfTerm):
    """Auto-generated function: normalizeUri"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.normalizeUri(rdfTerm)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def compute_qname(uri, generate):
    """Auto-generated function: compute_qname"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.compute_qname(uri, generate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def compute_qname_strict(uri, generate):
    """Auto-generated function: compute_qname_strict"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.compute_qname_strict(uri, generate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expand_curie(curie):
    """Auto-generated function: expand_curie"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.expand_curie(curie)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override, replace):
    """Auto-generated function: bind"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.bind(prefix, namespace, override, replace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def absolutize(uri, defrag):
    """Auto-generated function: absolutize"""
    try:
        response = rdflib.namespace.__init__.NamespaceManager.absolutize(uri, defrag)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def is_ncname(name):
    """Auto-generated function: is_ncname"""
    try:
        response = rdflib.namespace.__init__.is_ncname(name)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def split_uri(uri, split_start):
    """Auto-generated function: split_uri"""
    try:
        response = rdflib.namespace.__init__.split_uri(uri, split_start)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def insert_trie(trie, value):
    """Auto-generated function: insert_trie"""
    try:
        response = rdflib.namespace.__init__.insert_trie(trie, value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def insert_strie(strie, trie, value):
    """Auto-generated function: insert_strie"""
    try:
        response = rdflib.namespace.__init__.insert_strie(strie, trie, value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_longest_namespace(trie, value):
    """Auto-generated function: get_longest_namespace"""
    try:
        response = rdflib.namespace.__init__.get_longest_namespace(trie, value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def validate_namespace(namespace):
    """Auto-generated function: validate_namespace"""
    try:
        response = rdflib.tools.defined_namespace_creator.validate_namespace(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def validate_object_id(object_id):
    """Auto-generated function: validate_object_id"""
    try:
        response = rdflib.tools.defined_namespace_creator.validate_object_id(object_id)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_target_namespace_elements(g, target_namespace):
    """Auto-generated function: get_target_namespace_elements"""
    try:
        response = rdflib.tools.defined_namespace_creator.get_target_namespace_elements(g, target_namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_dn_file(output_file_name, target_namespace, elements_strs, non_python_elements_strs, object_id, fail):
    """Auto-generated function: make_dn_file"""
    try:
        response = rdflib.tools.defined_namespace_creator.make_dn_file(output_file_name, target_namespace, elements_strs, non_python_elements_strs, object_id, fail)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse_and_serialize(input_files, input_format, guess, outfile, output_format, ns_bindings, store_conn, store_type):
    """Auto-generated function: parse_and_serialize"""
    try:
        response = rdflib.tools.rdfpipe.parse_and_serialize(input_files, input_format, guess, outfile, output_format, ns_bindings, store_conn, store_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def make_option_parser():
    """Auto-generated function: make_option_parser"""
    try:
        response = rdflib.tools.rdfpipe.make_option_parser()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.tools.rdfpipe.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdfs2dot(g, stream, opts):
    """Auto-generated function: rdfs2dot"""
    try:
        response = rdflib.tools.rdfs2dot.rdfs2dot(g, stream, opts)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.tools.rdfs2dot.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def toProperty(label):
    """Auto-generated function: toProperty"""
    try:
        response = rdflib.tools.csv2rdf.toProperty(label)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def toPropertyLabel(label):
    """Auto-generated function: toPropertyLabel"""
    try:
        response = rdflib.tools.csv2rdf.toPropertyLabel(label)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def index(l_, i):
    """Auto-generated function: index"""
    try:
        response = rdflib.tools.csv2rdf.index(l_, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def csv_reader(csv_data, dialect):
    """Auto-generated function: csv_reader"""
    try:
        response = rdflib.tools.csv2rdf.csv_reader(csv_data, dialect)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefixuri(x, prefix, class_):
    """Auto-generated function: prefixuri"""
    try:
        response = rdflib.tools.csv2rdf.prefixuri(x, prefix, class_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def range():
    """Auto-generated function: range"""
    try:
        response = rdflib.tools.csv2rdf.NodeSplit.range()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def column(v):
    """Auto-generated function: column"""
    try:
        response = rdflib.tools.csv2rdf.column(v)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple(s, p, o):
    """Auto-generated function: triple"""
    try:
        response = rdflib.tools.csv2rdf.CSV2RDF.triple(s, p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convert(csvreader):
    """Auto-generated function: convert"""
    try:
        response = rdflib.tools.csv2rdf.CSV2RDF.convert(csvreader)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.tools.csv2rdf.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rdf2dot(g, stream, opts):
    """Auto-generated function: rdf2dot"""
    try:
        response = rdflib.tools.rdf2dot.rdf2dot(g, stream, opts)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.tools.rdf2dot.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize_in_chunks(g, max_triples, max_file_size_kb, file_name_stem, output_dir, write_prefixes):
    """Auto-generated function: serialize_in_chunks"""
    try:
        response = rdflib.tools.chunk_serializer.serialize_in_chunks(g, max_triples, max_file_size_kb, file_name_stem, output_dir, write_prefixes)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def internal_hash():
    """Auto-generated function: internal_hash"""
    try:
        response = rdflib.tools.graphisomorphism.IsomorphicTestableGraph.internal_hash()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def hashtriples():
    """Auto-generated function: hashtriples"""
    try:
        response = rdflib.tools.graphisomorphism.IsomorphicTestableGraph.hashtriples()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def vhash(term, done):
    """Auto-generated function: vhash"""
    try:
        response = rdflib.tools.graphisomorphism.IsomorphicTestableGraph.vhash(term, done)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def vhashtriples(term, done):
    """Auto-generated function: vhashtriples"""
    try:
        response = rdflib.tools.graphisomorphism.IsomorphicTestableGraph.vhashtriples(term, done)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def vhashtriple(triple, term, done):
    """Auto-generated function: vhashtriple"""
    try:
        response = rdflib.tools.graphisomorphism.IsomorphicTestableGraph.vhashtriple(triple, term, done)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.tools.graphisomorphism.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.rdfxml.PrettyXMLSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject(subject, depth):
    """Auto-generated function: subject"""
    try:
        response = rdflib.plugins.serializers.rdfxml.PrettyXMLSerializer.subject(subject, depth)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicate(predicate, object, depth):
    """Auto-generated function: predicate"""
    try:
        response = rdflib.plugins.serializers.rdfxml.PrettyXMLSerializer.predicate(predicate, object, depth)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def fix(val):
    """Auto-generated function: fix"""
    try:
        response = rdflib.plugins.serializers.rdfxml.fix(val)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def preprocess():
    """Auto-generated function: preprocess"""
    try:
        response = rdflib.plugins.serializers.trig.TrigSerializer.preprocess()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.plugins.serializers.trig.TrigSerializer.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding, spacious):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.trig.TrigSerializer.serialize(stream, base, encoding, spacious)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endDocument():
    """Auto-generated function: endDocument"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.endDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def indent(modifier):
    """Auto-generated function: indent"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.indent(modifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def preprocessTriple(triple):
    """Auto-generated function: preprocessTriple"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.preprocessTriple(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getQName(uri, gen_prefix):
    """Auto-generated function: getQName"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.getQName(uri, gen_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def statement(subject):
    """Auto-generated function: statement"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.statement(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path(node, position, newline):
    """Auto-generated function: path"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.path(node, position, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def s_clause(subject):
    """Auto-generated function: s_clause"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.s_clause(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def p_clause(node, position):
    """Auto-generated function: p_clause"""
    try:
        response = rdflib.plugins.serializers.n3.N3Serializer.p_clause(node, position)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.patch.PatchSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def addNamespace(prefix, namespace):
    """Auto-generated function: addNamespace"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.addNamespace(prefix, namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def checkSubject(subject):
    """Auto-generated function: checkSubject"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.checkSubject(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isDone(subject):
    """Auto-generated function: isDone"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.isDone(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def orderSubjects():
    """Auto-generated function: orderSubjects"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.orderSubjects()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def preprocess():
    """Auto-generated function: preprocess"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.preprocess()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def preprocessTriple(triple):
    """Auto-generated function: preprocessTriple"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.preprocessTriple(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def buildPredicateHash(subject):
    """Auto-generated function: buildPredicateHash"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.buildPredicateHash(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sortProperties(properties):
    """Auto-generated function: sortProperties"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.sortProperties(properties)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subjectDone(subject):
    """Auto-generated function: subjectDone"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.subjectDone(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def indent(modifier):
    """Auto-generated function: indent"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.indent(modifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write(text):
    """Auto-generated function: write"""
    try:
        response = rdflib.plugins.serializers.turtle.RecursiveSerializer.write(text)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding, spacious):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.serialize(stream, base, encoding, spacious)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getQName(uri, gen_prefix):
    """Auto-generated function: getQName"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.getQName(uri, gen_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startDocument():
    """Auto-generated function: startDocument"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.startDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endDocument():
    """Auto-generated function: endDocument"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.endDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def statement(subject):
    """Auto-generated function: statement"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.statement(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def s_default(subject):
    """Auto-generated function: s_default"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.s_default(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def s_squared(subject):
    """Auto-generated function: s_squared"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.s_squared(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path(node, position, newline):
    """Auto-generated function: path"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.path(node, position, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def p_default(node, position, newline):
    """Auto-generated function: p_default"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.p_default(node, position, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def label(node, position):
    """Auto-generated function: label"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.label(node, position)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def p_squared(node, position, newline):
    """Auto-generated function: p_squared"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.p_squared(node, position, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isValidList(l_):
    """Auto-generated function: isValidList"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.isValidList(l_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def doList(l_):
    """Auto-generated function: doList"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.doList(l_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicateList(subject, newline):
    """Auto-generated function: predicateList"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.predicateList(subject, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def verb(node, newline):
    """Auto-generated function: verb"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.verb(node, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def objectList(objects):
    """Auto-generated function: objectList"""
    try:
        response = rdflib.plugins.serializers.turtle.TurtleSerializer.objectList(objects)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.jsonld.JsonLDSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_rdf(graph, context_data, base, use_native_types, use_rdf_type, auto_compact, startnode, index):
    """Auto-generated function: from_rdf"""
    try:
        response = rdflib.plugins.serializers.jsonld.from_rdf(graph, context_data, base, use_native_types, use_rdf_type, auto_compact, startnode, index)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convert(graph):
    """Auto-generated function: convert"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.convert(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_graph(graph):
    """Auto-generated function: from_graph"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.from_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def process_subject(graph, s, nodemap):
    """Auto-generated function: process_subject"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.process_subject(graph, s, nodemap)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_to_node(graph, s, p, o, s_node, nodemap):
    """Auto-generated function: add_to_node"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.add_to_node(graph, s, p, o, s_node, nodemap)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def type_coerce(o, coerce_type):
    """Auto-generated function: type_coerce"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.type_coerce(o, coerce_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_raw_value(graph, s, o, nodemap):
    """Auto-generated function: to_raw_value"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.to_raw_value(graph, s, o, nodemap)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_collection(graph, l_):
    """Auto-generated function: to_collection"""
    try:
        response = rdflib.plugins.serializers.jsonld.Converter.to_collection(graph, l_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.trix.TriXSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def addNamespace(prefix, namespace):
    """Auto-generated function: addNamespace"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.addNamespace(prefix, namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding, spacious):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.serialize(stream, base, encoding, spacious)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def preprocessTriple(triple):
    """Auto-generated function: preprocessTriple"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.preprocessTriple(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def getQName(uri, gen_prefix):
    """Auto-generated function: getQName"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.getQName(uri, gen_prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startDocument():
    """Auto-generated function: startDocument"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.startDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endDocument():
    """Auto-generated function: endDocument"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.endDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def statement(subject):
    """Auto-generated function: statement"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.statement(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def s_default(subject):
    """Auto-generated function: s_default"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.s_default(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def s_squared(subject):
    """Auto-generated function: s_squared"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.s_squared(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path(node, position, newline):
    """Auto-generated function: path"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.path(node, position, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def p_default(node, position, newline):
    """Auto-generated function: p_default"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.p_default(node, position, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def label(node, position):
    """Auto-generated function: label"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.label(node, position)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def p_squared(node, position):
    """Auto-generated function: p_squared"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.p_squared(node, position)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isValidList(l_):
    """Auto-generated function: isValidList"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.isValidList(l_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def doList(l_):
    """Auto-generated function: doList"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.doList(l_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicateList(subject, newline):
    """Auto-generated function: predicateList"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.predicateList(subject, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def verb(node, newline):
    """Auto-generated function: verb"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.verb(node, newline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def objectList(objects):
    """Auto-generated function: objectList"""
    try:
        response = rdflib.plugins.serializers.longturtle.LongTurtleSerializer.objectList(objects)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.nt.NTSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.hext.HextuplesSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def push(uri):
    """Auto-generated function: push"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.push(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pop(uri):
    """Auto-generated function: pop"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.pop(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def element(uri, content, attributes):
    """Auto-generated function: element"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.element(uri, content, attributes)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces(namespaces):
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.namespaces(namespaces)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def attribute(uri, value):
    """Auto-generated function: attribute"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.attribute(uri, value)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def text(text):
    """Auto-generated function: text"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.text(text)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def qname(uri):
    """Auto-generated function: qname"""
    try:
        response = rdflib.plugins.serializers.xmlwriter.XMLWriter.qname(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, base, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.serializers.nquads.NQuadsSerializer.serialize(stream, base, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def next_li():
    """Auto-generated function: next_li"""
    try:
        response = rdflib.plugins.parsers.rdfxml.ElementHandler.next_li()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setDocumentLocator(locator):
    """Auto-generated function: setDocumentLocator"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.setDocumentLocator(locator)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startDocument():
    """Auto-generated function: startDocument"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.startDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startPrefixMapping(prefix, namespace):
    """Auto-generated function: startPrefixMapping"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.startPrefixMapping(prefix, namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endPrefixMapping(prefix):
    """Auto-generated function: endPrefixMapping"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.endPrefixMapping(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startElementNS(name, qname, attrs):
    """Auto-generated function: startElementNS"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.startElementNS(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endElementNS(name, qname):
    """Auto-generated function: endElementNS"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.endElementNS(name, qname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def characters(content):
    """Auto-generated function: characters"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.characters(content)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ignorableWhitespace(content):
    """Auto-generated function: ignorableWhitespace"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.ignorableWhitespace(content)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def processingInstruction(target, data):
    """Auto-generated function: processingInstruction"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.processingInstruction(target, data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_reified(sid, spo):
    """Auto-generated function: add_reified"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.add_reified(sid, spo)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def error(message):
    """Auto-generated function: error"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.error(message)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_current():
    """Auto-generated function: get_current"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.get_current()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_next():
    """Auto-generated function: get_next"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.get_next()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_parent():
    """Auto-generated function: get_parent"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.get_parent()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def absolutize(uri):
    """Auto-generated function: absolutize"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.absolutize(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convert(name, qname, attrs):
    """Auto-generated function: convert"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.convert(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def document_element_start(name, qname, attrs):
    """Auto-generated function: document_element_start"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.document_element_start(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def node_element_start(name, qname, attrs):
    """Auto-generated function: node_element_start"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.node_element_start(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def node_element_end(name, qname):
    """Auto-generated function: node_element_end"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.node_element_end(name, qname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def property_element_start(name, qname, attrs):
    """Auto-generated function: property_element_start"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.property_element_start(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def property_element_char(data):
    """Auto-generated function: property_element_char"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.property_element_char(data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def property_element_end(name, qname):
    """Auto-generated function: property_element_end"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.property_element_end(name, qname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def list_node_element_end(name, qname):
    """Auto-generated function: list_node_element_end"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.list_node_element_end(name, qname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def literal_element_start(name, qname, attrs):
    """Auto-generated function: literal_element_start"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.literal_element_start(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def literal_element_char(data):
    """Auto-generated function: literal_element_char"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.literal_element_char(data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def literal_element_end(name, qname):
    """Auto-generated function: literal_element_end"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLHandler.literal_element_end(name, qname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def create_parser(target, store):
    """Auto-generated function: create_parser"""
    try:
        response = rdflib.plugins.parsers.rdfxml.create_parser(target, store)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, sink):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.rdfxml.RDFXMLParser.parse(source, sink)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def becauseSubGraph():
    """Auto-generated function: becauseSubGraph"""
    try:
        response = rdflib.plugins.parsers.trig.becauseSubGraph()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def directiveOrStatement(argstr, h):
    """Auto-generated function: directiveOrStatement"""
    try:
        response = rdflib.plugins.parsers.trig.TrigSinkParser.directiveOrStatement(argstr, h)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def labelOrSubject(argstr, i, res):
    """Auto-generated function: labelOrSubject"""
    try:
        response = rdflib.plugins.parsers.trig.TrigSinkParser.labelOrSubject(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def graph(argstr, i):
    """Auto-generated function: graph"""
    try:
        response = rdflib.plugins.parsers.trig.TrigSinkParser.graph(argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, graph, encoding):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.trig.TrigParser.parse(source, graph, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(inputsource, sink, bnode_context, skolemize):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.parse(inputsource, sink, bnode_context, skolemize)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parsepatch(bnode_context):
    """Auto-generated function: parsepatch"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.parsepatch(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_or_remove_triple_or_quad(operation, bnode_context):
    """Auto-generated function: add_or_remove_triple_or_quad"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.add_or_remove_triple_or_quad(operation, bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_prefix():
    """Auto-generated function: add_prefix"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.add_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def delete_prefix():
    """Auto-generated function: delete_prefix"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.delete_prefix()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def operation():
    """Auto-generated function: operation"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.operation()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eat_op(op):
    """Auto-generated function: eat_op"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.eat_op(op)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def nodeid(bnode_context):
    """Auto-generated function: nodeid"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.nodeid(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def labeled_bnode():
    """Auto-generated function: labeled_bnode"""
    try:
        response = rdflib.plugins.parsers.patch.RDFPatchParser.labeled_bnode()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(data, context, dataset):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.jsonld.Parser.parse(data, context, dataset)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_rdf(data, dataset, base, context_data, version, generalized_rdf, allow_lists_of_lists, skolemize):
    """Auto-generated function: to_rdf"""
    try:
        response = rdflib.plugins.parsers.jsonld.to_rdf(data, dataset, base, context_data, version, generalized_rdf, allow_lists_of_lists, skolemize)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reset():
    """Auto-generated function: reset"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.reset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setDocumentLocator(locator):
    """Auto-generated function: setDocumentLocator"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.setDocumentLocator(locator)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startDocument():
    """Auto-generated function: startDocument"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.startDocument()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startPrefixMapping(prefix, namespace):
    """Auto-generated function: startPrefixMapping"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.startPrefixMapping(prefix, namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endPrefixMapping(prefix):
    """Auto-generated function: endPrefixMapping"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.endPrefixMapping(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startElementNS(name, qname, attrs):
    """Auto-generated function: startElementNS"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.startElementNS(name, qname, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endElementNS(name, qname):
    """Auto-generated function: endElementNS"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.endElementNS(name, qname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_bnode(label):
    """Auto-generated function: get_bnode"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.get_bnode(label)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def characters(content):
    """Auto-generated function: characters"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.characters(content)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ignorableWhitespace(content):
    """Auto-generated function: ignorableWhitespace"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.ignorableWhitespace(content)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def processingInstruction(target, data):
    """Auto-generated function: processingInstruction"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.processingInstruction(target, data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def error(message):
    """Auto-generated function: error"""
    try:
        response = rdflib.plugins.parsers.trix.TriXHandler.error(message)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def create_parser(store):
    """Auto-generated function: create_parser"""
    try:
        response = rdflib.plugins.parsers.trix.create_parser(store)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, sink):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.trix.TriXParser.parse(source, sink)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, graph, skolemize):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.hext.HextuplesParser.parse(source, graph, skolemize)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def splitFragP(uriref, punc):
    """Auto-generated function: splitFragP"""
    try:
        response = rdflib.plugins.parsers.notation3.splitFragP(uriref, punc)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def join(here, there):
    """Auto-generated function: join"""
    try:
        response = rdflib.plugins.parsers.notation3.join(here, there)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def base():
    """Auto-generated function: base"""
    try:
        response = rdflib.plugins.parsers.notation3.base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def runNamespace():
    """Auto-generated function: runNamespace"""
    try:
        response = rdflib.plugins.parsers.notation3.runNamespace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uniqueURI():
    """Auto-generated function: uniqueURI"""
    try:
        response = rdflib.plugins.parsers.notation3.uniqueURI()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def BecauseOfData():
    """Auto-generated function: BecauseOfData"""
    try:
        response = rdflib.plugins.parsers.notation3.BecauseOfData()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def becauseSubexpression():
    """Auto-generated function: becauseSubexpression"""
    try:
        response = rdflib.plugins.parsers.notation3.becauseSubexpression()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def unicodeExpand(m):
    """Auto-generated function: unicodeExpand"""
    try:
        response = rdflib.plugins.parsers.notation3.unicodeExpand(m)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def here(i):
    """Auto-generated function: here"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.here(i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def formula():
    """Auto-generated function: formula"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.formula()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def loadStream(stream):
    """Auto-generated function: loadStream"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.loadStream(stream)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def loadBuf(buf):
    """Auto-generated function: loadBuf"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.loadBuf(buf)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def feed(octets):
    """Auto-generated function: feed"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.feed(octets)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def directiveOrStatement(argstr, h):
    """Auto-generated function: directiveOrStatement"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.directiveOrStatement(argstr, h)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def tok(tok, argstr, i, colon):
    """Auto-generated function: tok"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.tok(tok, argstr, i, colon)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sparqlTok(tok, argstr, i):
    """Auto-generated function: sparqlTok"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.sparqlTok(tok, argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def directive(argstr, i):
    """Auto-generated function: directive"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.directive(argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sparqlDirective(argstr, i):
    """Auto-generated function: sparqlDirective"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.sparqlDirective(argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(pfx, uri):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.bind(pfx, uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setKeywords(k):
    """Auto-generated function: setKeywords"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.setKeywords(k)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def startDoc(formula):
    """Auto-generated function: startDoc"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.startDoc(formula)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def endDoc(formula):
    """Auto-generated function: endDoc"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.endDoc(formula)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def makeStatement(quadruple, why):
    """Auto-generated function: makeStatement"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.makeStatement(quadruple, why)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def statement(argstr, i):
    """Auto-generated function: statement"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.statement(argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject(argstr, i, res):
    """Auto-generated function: subject"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.subject(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def verb(argstr, i, res):
    """Auto-generated function: verb"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.verb(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prop(argstr, i, res):
    """Auto-generated function: prop"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.prop(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def item(argstr, i, res):
    """Auto-generated function: item"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.item(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def blankNode(uri):
    """Auto-generated function: blankNode"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.blankNode(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def path(argstr, i, res):
    """Auto-generated function: path"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.path(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def anonymousNode(ln):
    """Auto-generated function: anonymousNode"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.anonymousNode(ln)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def node(argstr, i, res, subjectAlready):
    """Auto-generated function: node"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.node(argstr, i, res, subjectAlready)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def property_list(argstr, i, subj):
    """Auto-generated function: property_list"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.property_list(argstr, i, subj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def commaSeparatedList(argstr, j, res, what):
    """Auto-generated function: commaSeparatedList"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.commaSeparatedList(argstr, j, res, what)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def objectList(argstr, i, res):
    """Auto-generated function: objectList"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.objectList(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def checkDot(argstr, i):
    """Auto-generated function: checkDot"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.checkDot(argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uri_ref2(argstr, i, res):
    """Auto-generated function: uri_ref2"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.uri_ref2(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def skipSpace(argstr, i):
    """Auto-generated function: skipSpace"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.skipSpace(argstr, i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def variable(argstr, i, res):
    """Auto-generated function: variable"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.variable(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bareWord(argstr, i, res):
    """Auto-generated function: bareWord"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.bareWord(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def qname(argstr, i, res):
    """Auto-generated function: qname"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.qname(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def object(argstr, i, res):
    """Auto-generated function: object"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.object(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def nodeOrLiteral(argstr, i, res):
    """Auto-generated function: nodeOrLiteral"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.nodeOrLiteral(argstr, i, res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uriOf(sym):
    """Auto-generated function: uriOf"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.uriOf(sym)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def strconst(argstr, i, delim):
    """Auto-generated function: strconst"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.strconst(argstr, i, delim)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uEscape(argstr, i, startline):
    """Auto-generated function: uEscape"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.uEscape(argstr, i, startline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def UEscape(argstr, i, startline):
    """Auto-generated function: UEscape"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.UEscape(argstr, i, startline)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def BadSyntax(argstr, i, msg):
    """Auto-generated function: BadSyntax"""
    try:
        response = rdflib.plugins.parsers.notation3.SinkParser.BadSyntax(argstr, i, msg)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def message():
    """Auto-generated function: message"""
    try:
        response = rdflib.plugins.parsers.notation3.BadSyntax.message()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def id():
    """Auto-generated function: id"""
    try:
        response = rdflib.plugins.parsers.notation3.Formula.id()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newBlankNode(arg, uri, why):
    """Auto-generated function: newBlankNode"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newBlankNode(arg, uri, why)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newUniversal(uri, why):
    """Auto-generated function: newUniversal"""
    try:
        response = rdflib.plugins.parsers.notation3.Formula.newUniversal(uri, why)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def declareExistential(x):
    """Auto-generated function: declareExistential"""
    try:
        response = rdflib.plugins.parsers.notation3.Formula.declareExistential(x)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close():
    """Auto-generated function: close"""
    try:
        response = rdflib.plugins.parsers.notation3.Formula.close()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newFormula():
    """Auto-generated function: newFormula"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newFormula()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newGraph(identifier):
    """Auto-generated function: newGraph"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newGraph(identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newSymbol():
    """Auto-generated function: newSymbol"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newSymbol()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newLiteral(s, dt, lang):
    """Auto-generated function: newLiteral"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newLiteral(s, dt, lang)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newList(n, f):
    """Auto-generated function: newList"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newList(n, f)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def newSet():
    """Auto-generated function: newSet"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.newSet()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setDefaultNamespace():
    """Auto-generated function: setDefaultNamespace"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.setDefaultNamespace()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def normalise(f, n):
    """Auto-generated function: normalise"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.normalise(f, n)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def intern(something):
    """Auto-generated function: intern"""
    try:
        response = rdflib.plugins.parsers.notation3.RDFSink.intern(something)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def hexify(ustr):
    """Auto-generated function: hexify"""
    try:
        response = rdflib.plugins.parsers.notation3.hexify(ustr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, graph, encoding):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.notation3.N3Parser.parse(source, graph, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triple(s, p, o):
    """Auto-generated function: triple"""
    try:
        response = rdflib.plugins.parsers.ntriples.NTGraphSink.triple(s, p, o)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def unquote(s):
    """Auto-generated function: unquote"""
    try:
        response = rdflib.plugins.parsers.ntriples.unquote(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uriquote(uri):
    """Auto-generated function: uriquote"""
    try:
        response = rdflib.plugins.parsers.ntriples.uriquote(uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(cls, source, sink):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.ntriples.NTParser.parse(cls, source, sink)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parsestring(s):
    """Auto-generated function: parsestring"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.parsestring(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def readline():
    """Auto-generated function: readline"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.readline()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseline(bnode_context):
    """Auto-generated function: parseline"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.parseline(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def peek(token):
    """Auto-generated function: peek"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.peek(token)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eat(pattern):
    """Auto-generated function: eat"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.eat(pattern)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject(bnode_context):
    """Auto-generated function: subject"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.subject(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicate():
    """Auto-generated function: predicate"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.predicate()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def object(bnode_context):
    """Auto-generated function: object"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.object(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def uriref():
    """Auto-generated function: uriref"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.uriref()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def nodeid(bnode_context):
    """Auto-generated function: nodeid"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.nodeid(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def literal():
    """Auto-generated function: literal"""
    try:
        response = rdflib.plugins.parsers.ntriples.W3CNTriplesParser.literal()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(inputsource, sink, bnode_context, skolemize):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.parsers.nquads.NQuadsParser.parse(inputsource, sink, bnode_context, skolemize)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseline(bnode_context):
    """Auto-generated function: parseline"""
    try:
        response = rdflib.plugins.parsers.nquads.NQuadsParser.parseline(bnode_context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def open(configuration, create):
    """Auto-generated function: open"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.open(configuration, create)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def create(configuration):
    """Auto-generated function: create"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.create(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def destroy(configuration):
    """Auto-generated function: destroy"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.destroy(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def commit():
    """Auto-generated function: commit"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.commit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rollback():
    """Auto-generated function: rollback"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.rollback()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(spo, context, quoted):
    """Auto-generated function: add"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.add(spo, context, quoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def addN(quads):
    """Auto-generated function: addN"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.addN(quads)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(spo, context):
    """Auto-generated function: remove"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.remove(spo, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(query, initNs, initBindings, queryGraph, DEBUG):
    """Auto-generated function: update"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.update(query, initNs, initBindings, queryGraph, DEBUG)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query():
    """Auto-generated function: query"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.query()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples():
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.triples()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples_choices(_, context):
    """Auto-generated function: triples_choices"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.triples_choices(_, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts():
    """Auto-generated function: contexts"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.contexts()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix(namespace):
    """Auto-generated function: prefix"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.prefix(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(prefix):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.namespace(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLStore.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_graph(graph):
    """Auto-generated function: add_graph"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.add_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_graph(graph):
    """Auto-generated function: remove_graph"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.remove_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subjects(predicate, object):
    """Auto-generated function: subjects"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.subjects(predicate, object)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicates(subject, object):
    """Auto-generated function: predicates"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.predicates(subject, object)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def objects(subject, predicate):
    """Auto-generated function: objects"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.objects(subject, predicate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject_predicates(object):
    """Auto-generated function: subject_predicates"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.subject_predicates(object)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subject_objects(predicate):
    """Auto-generated function: subject_objects"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.subject_objects(predicate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def predicate_objects(subject):
    """Auto-generated function: predicate_objects"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.predicate_objects(subject)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setTimeout(timeout):
    """Auto-generated function: setTimeout"""
    try:
        response = rdflib.plugins.stores.sparqlstore.SPARQLUpdateStore.setTimeout(timeout)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple, context, quoted):
    """Auto-generated function: add"""
    try:
        response = rdflib.plugins.stores.memory.Memory.add(triple, context, quoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(triple_pattern, context):
    """Auto-generated function: remove"""
    try:
        response = rdflib.plugins.stores.memory.Memory.remove(triple_pattern, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(triple_pattern, context):
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.stores.memory.Memory.triples(triple_pattern, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.stores.memory.Memory.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(prefix):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.plugins.stores.memory.Memory.namespace(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix(namespace):
    """Auto-generated function: prefix"""
    try:
        response = rdflib.plugins.stores.memory.Memory.prefix(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.plugins.stores.memory.Memory.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(query, initNs, initBindings, queryGraph):
    """Auto-generated function: query"""
    try:
        response = rdflib.plugins.stores.memory.Memory.query(query, initNs, initBindings, queryGraph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(update, initNs, initBindings, queryGraph):
    """Auto-generated function: update"""
    try:
        response = rdflib.plugins.stores.memory.Memory.update(update, initNs, initBindings, queryGraph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts(triple):
    """Auto-generated function: contexts"""
    try:
        response = rdflib.plugins.stores.memory.Memory.contexts(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_graph(graph):
    """Auto-generated function: add_graph"""
    try:
        response = rdflib.plugins.stores.memory.Memory.add_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_graph(graph):
    """Auto-generated function: remove_graph"""
    try:
        response = rdflib.plugins.stores.memory.Memory.remove_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bb(u):
    """Auto-generated function: bb"""
    try:
        response = rdflib.plugins.stores.berkeleydb.bb(u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def is_open():
    """Auto-generated function: is_open"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.is_open()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def open(path, create):
    """Auto-generated function: open"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.open(path, create)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sync():
    """Auto-generated function: sync"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.sync()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close(commit_pending_transaction):
    """Auto-generated function: close"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.close(commit_pending_transaction)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple, context, quoted, txn):
    """Auto-generated function: add"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.add(triple, context, quoted, txn)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(spo, context, txn):
    """Auto-generated function: remove"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.remove(spo, context, txn)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(spo, context, txn):
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.triples(spo, context, txn)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(prefix):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.namespace(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix(namespace):
    """Auto-generated function: prefix"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.prefix(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts(triple):
    """Auto-generated function: contexts"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.contexts(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_graph(graph):
    """Auto-generated function: add_graph"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.add_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_graph(graph):
    """Auto-generated function: remove_graph"""
    try:
        response = rdflib.plugins.stores.berkeleydb.BerkeleyDB.remove_graph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_key_func(i):
    """Auto-generated function: to_key_func"""
    try:
        response = rdflib.plugins.stores.berkeleydb.to_key_func(i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def from_key_func(i):
    """Auto-generated function: from_key_func"""
    try:
        response = rdflib.plugins.stores.berkeleydb.from_key_func(i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def results_from_key_func(i, from_string):
    """Auto-generated function: results_from_key_func"""
    try:
        response = rdflib.plugins.stores.berkeleydb.results_from_key_func(i, from_string)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def readable_index(i):
    """Auto-generated function: readable_index"""
    try:
        response = rdflib.plugins.stores.berkeleydb.readable_index(i)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def method(method):
    """Auto-generated function: method"""
    try:
        response = rdflib.plugins.stores.sparqlconnector.SPARQLConnector.method(method)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(query, default_graph, named_graph):
    """Auto-generated function: query"""
    try:
        response = rdflib.plugins.stores.sparqlconnector.SPARQLConnector.query(query, default_graph, named_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(query, default_graph, named_graph):
    """Auto-generated function: update"""
    try:
        response = rdflib.plugins.stores.sparqlconnector.SPARQLConnector.update(query, default_graph, named_graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def regexCompareQuad(quad, regexQuad):
    """Auto-generated function: regexCompareQuad"""
    try:
        response = rdflib.plugins.stores.regexmatching.regexCompareQuad(quad, regexQuad)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def open(configuration, create):
    """Auto-generated function: open"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.open(configuration, create)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close(commit_pending_transaction):
    """Auto-generated function: close"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.close(commit_pending_transaction)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def destroy(configuration):
    """Auto-generated function: destroy"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.destroy(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple, context, quoted):
    """Auto-generated function: add"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.add(triple, context, quoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(triple, context):
    """Auto-generated function: remove"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.remove(triple, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(triple, context):
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.triples(triple, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts(triple):
    """Auto-generated function: contexts"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.contexts(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove_context(identifier):
    """Auto-generated function: remove_context"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.remove_context(identifier)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix(namespace):
    """Auto-generated function: prefix"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.prefix(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(prefix):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.namespace(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def commit():
    """Auto-generated function: commit"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.commit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rollback():
    """Auto-generated function: rollback"""
    try:
        response = rdflib.plugins.stores.regexmatching.REGEXMatching.rollback()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple):
    """Auto-generated function: add"""
    try:
        response = rdflib.plugins.stores.concurrent.ConcurrentStore.add(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(triple):
    """Auto-generated function: remove"""
    try:
        response = rdflib.plugins.stores.concurrent.ConcurrentStore.remove(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(triple):
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.stores.concurrent.ConcurrentStore.triples(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def open(configuration, create):
    """Auto-generated function: open"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.open(configuration, create)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close(commit_pending_transaction):
    """Auto-generated function: close"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.close(commit_pending_transaction)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def destroy(configuration):
    """Auto-generated function: destroy"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.destroy(configuration)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query():
    """Auto-generated function: query"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.query()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add(triple, context, quoted):
    """Auto-generated function: add"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.add(triple, context, quoted)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remove(spo, context):
    """Auto-generated function: remove"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.remove(spo, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(triple, context):
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.triples(triple, context)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def contexts(triple):
    """Auto-generated function: contexts"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.contexts(triple)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, namespace, override):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.bind(prefix, namespace, override)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prefix(namespace):
    """Auto-generated function: prefix"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.prefix(namespace)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespace(prefix):
    """Auto-generated function: namespace"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.namespace(prefix)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def namespaces():
    """Auto-generated function: namespaces"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.namespaces()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def commit():
    """Auto-generated function: commit"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.commit()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def rollback():
    """Auto-generated function: rollback"""
    try:
        response = rdflib.plugins.stores.auditable.AuditableStore.rollback()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def base(base):
    """Auto-generated function: base"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.base(base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def subcontext(source, propagate):
    """Auto-generated function: subcontext"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.subcontext(source, propagate)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_context_for_term(term):
    """Auto-generated function: get_context_for_term"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_context_for_term(term)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_context_for_type(node):
    """Auto-generated function: get_context_for_type"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_context_for_type(node)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_id(obj):
    """Auto-generated function: get_id"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_id(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_type(obj):
    """Auto-generated function: get_type"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_type(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_language(obj):
    """Auto-generated function: get_language"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_language(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_value(obj):
    """Auto-generated function: get_value"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_value(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_graph(obj):
    """Auto-generated function: get_graph"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_graph(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_list(obj):
    """Auto-generated function: get_list"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_list(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_set(obj):
    """Auto-generated function: get_set"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_set(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_rev(obj):
    """Auto-generated function: get_rev"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_rev(obj)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_key(key):
    """Auto-generated function: get_key"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_key(key)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_keys(key):
    """Auto-generated function: get_keys"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.get_keys(key)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def add_term(name, idref, coercion, container, index, language, reverse, context, prefix, protected):
    """Auto-generated function: add_term"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.add_term(name, idref, coercion, container, index, language, reverse, context, prefix, protected)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def find_term(idref, coercion, container, language, reverse):
    """Auto-generated function: find_term"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.find_term(idref, coercion, container, language, reverse)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def resolve(curie_or_iri):
    """Auto-generated function: resolve"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.resolve(curie_or_iri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def resolve_iri(iri):
    """Auto-generated function: resolve_iri"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.resolve_iri(iri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isblank(ref):
    """Auto-generated function: isblank"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.isblank(ref)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expand(term_curie_or_iri, use_vocab):
    """Auto-generated function: expand"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.expand(term_curie_or_iri, use_vocab)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def shrink_iri(iri):
    """Auto-generated function: shrink_iri"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.shrink_iri(iri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_symbol(iri):
    """Auto-generated function: to_symbol"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.to_symbol(iri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load(source, base, referenced_contexts):
    """Auto-generated function: load"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.load(source, base, referenced_contexts)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def to_dict():
    """Auto-generated function: to_dict"""
    try:
        response = rdflib.plugins.shared.jsonld.context.Context.to_dict()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def source_to_json(source, fragment_id, extract_all_scripts):
    """Auto-generated function: source_to_json"""
    try:
        response = rdflib.plugins.shared.jsonld.util.source_to_json(source, fragment_id, extract_all_scripts)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def split_iri(iri):
    """Auto-generated function: split_iri"""
    try:
        response = rdflib.plugins.shared.jsonld.util.split_iri(iri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def norm_url(base, url):
    """Auto-generated function: norm_url"""
    try:
        response = rdflib.plugins.shared.jsonld.util.norm_url(base, url)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def context_from_urlinputsource(source):
    """Auto-generated function: context_from_urlinputsource"""
    try:
        response = rdflib.plugins.shared.jsonld.util.context_from_urlinputsource(source)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def handle_starttag(tag, attrs):
    """Auto-generated function: handle_starttag"""
    try:
        response = rdflib.plugins.shared.jsonld.util.HTMLJSONParser.handle_starttag(tag, attrs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def handle_data(data):
    """Auto-generated function: handle_data"""
    try:
        response = rdflib.plugins.shared.jsonld.util.HTMLJSONParser.handle_data(data)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_json():
    """Auto-generated function: get_json"""
    try:
        response = rdflib.plugins.shared.jsonld.util.HTMLJSONParser.get_json()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_base():
    """Auto-generated function: get_base"""
    try:
        response = rdflib.plugins.shared.jsonld.util.HTMLJSONParser.get_base()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def value(ctx, val, variables, errors):
    """Auto-generated function: value"""
    try:
        response = rdflib.plugins.sparql.parserutils.value(ctx, val, variables, errors)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def postParse2(tokenList):
    """Auto-generated function: postParse2"""
    try:
        response = rdflib.plugins.sparql.parserutils.Param.postParse2(tokenList)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clone():
    """Auto-generated function: clone"""
    try:
        response = rdflib.plugins.sparql.parserutils.CompValue.clone()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get(a, variables, errors):
    """Auto-generated function: get"""
    try:
        response = rdflib.plugins.sparql.parserutils.CompValue.get(a, variables, errors)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eval(ctx):
    """Auto-generated function: eval"""
    try:
        response = rdflib.plugins.sparql.parserutils.Expr.eval(ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def postParse(instring, loc, tokenList):
    """Auto-generated function: postParse"""
    try:
        response = rdflib.plugins.sparql.parserutils.Comp.postParse(instring, loc, tokenList)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setEvalFn(evalfn):
    """Auto-generated function: setEvalFn"""
    try:
        response = rdflib.plugins.sparql.parserutils.Comp.setEvalFn(evalfn)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prettify_parsetree(t, indent, depth):
    """Auto-generated function: prettify_parsetree"""
    try:
        response = rdflib.plugins.sparql.parserutils.prettify_parsetree(t, indent, depth)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def neg(literal):
    """Auto-generated function: neg"""
    try:
        response = rdflib.plugins.sparql.parser.neg(literal)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setLanguage(terms):
    """Auto-generated function: setLanguage"""
    try:
        response = rdflib.plugins.sparql.parser.setLanguage(terms)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def setDataType(terms):
    """Auto-generated function: setDataType"""
    try:
        response = rdflib.plugins.sparql.parser.setDataType(terms)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expandTriples(terms):
    """Auto-generated function: expandTriples"""
    try:
        response = rdflib.plugins.sparql.parser.expandTriples(terms)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expandBNodeTriples(terms):
    """Auto-generated function: expandBNodeTriples"""
    try:
        response = rdflib.plugins.sparql.parser.expandBNodeTriples(terms)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expandCollection(terms):
    """Auto-generated function: expandCollection"""
    try:
        response = rdflib.plugins.sparql.parser.expandCollection(terms)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def expandUnicodeEscapes(q):
    """Auto-generated function: expandUnicodeEscapes"""
    try:
        response = rdflib.plugins.sparql.parser.expandUnicodeEscapes(q)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseQuery(q):
    """Auto-generated function: parseQuery"""
    try:
        response = rdflib.plugins.sparql.parser.parseQuery(q)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseUpdate(q):
    """Auto-generated function: parseUpdate"""
    try:
        response = rdflib.plugins.sparql.parser.parseUpdate(q)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalBGP(ctx, bgp):
    """Auto-generated function: evalBGP"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalBGP(ctx, bgp)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalExtend(ctx, extend):
    """Auto-generated function: evalExtend"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalExtend(ctx, extend)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalLazyJoin(ctx, join):
    """Auto-generated function: evalLazyJoin"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalLazyJoin(ctx, join)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalJoin(ctx, join):
    """Auto-generated function: evalJoin"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalJoin(ctx, join)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalUnion(ctx, union):
    """Auto-generated function: evalUnion"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalUnion(ctx, union)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalMinus(ctx, minus):
    """Auto-generated function: evalMinus"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalMinus(ctx, minus)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalLeftJoin(ctx, join):
    """Auto-generated function: evalLeftJoin"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalLeftJoin(ctx, join)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalFilter(ctx, part):
    """Auto-generated function: evalFilter"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalFilter(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalGraph(ctx, part):
    """Auto-generated function: evalGraph"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalGraph(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalValues(ctx, part):
    """Auto-generated function: evalValues"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalValues(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalMultiset(ctx, part):
    """Auto-generated function: evalMultiset"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalMultiset(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalPart(ctx, part):
    """Auto-generated function: evalPart"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalPart(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalServiceQuery(ctx, part):
    """Auto-generated function: evalServiceQuery"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalServiceQuery(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalGroup(ctx, group):
    """Auto-generated function: evalGroup"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalGroup(ctx, group)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalAggregateJoin(ctx, agg):
    """Auto-generated function: evalAggregateJoin"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalAggregateJoin(ctx, agg)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalOrderBy(ctx, part):
    """Auto-generated function: evalOrderBy"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalOrderBy(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalSlice(ctx, slice):
    """Auto-generated function: evalSlice"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalSlice(ctx, slice)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalReduced(ctx, part):
    """Auto-generated function: evalReduced"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalReduced(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalDistinct(ctx, part):
    """Auto-generated function: evalDistinct"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalDistinct(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalProject(ctx, project):
    """Auto-generated function: evalProject"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalProject(ctx, project)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalSelectQuery(ctx, query):
    """Auto-generated function: evalSelectQuery"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalSelectQuery(ctx, query)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalAskQuery(ctx, query):
    """Auto-generated function: evalAskQuery"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalAskQuery(ctx, query)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalConstructQuery(ctx, query):
    """Auto-generated function: evalConstructQuery"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalConstructQuery(ctx, query)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalDescribeQuery(ctx, query):
    """Auto-generated function: evalDescribeQuery"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalDescribeQuery(ctx, query)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalQuery(graph, query, initBindings, base):
    """Auto-generated function: evalQuery"""
    try:
        response = rdflib.plugins.sparql.evaluate.evalQuery(graph, query, initBindings, base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def type_promotion(t1, t2):
    """Auto-generated function: type_promotion"""
    try:
        response = rdflib.plugins.sparql.datatypes.type_promotion(t1, t2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prepareQuery(queryString, initNs, base):
    """Auto-generated function: prepareQuery"""
    try:
        response = rdflib.plugins.sparql.processor.prepareQuery(queryString, initNs, base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prepareUpdate(updateString, initNs, base):
    """Auto-generated function: prepareUpdate"""
    try:
        response = rdflib.plugins.sparql.processor.prepareUpdate(updateString, initNs, base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def processUpdate(graph, updateString, initBindings, initNs, base):
    """Auto-generated function: processUpdate"""
    try:
        response = rdflib.plugins.sparql.processor.processUpdate(graph, updateString, initBindings, initNs, base)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(strOrQuery, initBindings, initNs):
    """Auto-generated function: update"""
    try:
        response = rdflib.plugins.sparql.processor.SPARQLUpdateProcessor.update(strOrQuery, initBindings, initNs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def query(strOrQuery, initBindings, initNs, base, DEBUG):
    """Auto-generated function: query"""
    try:
        response = rdflib.plugins.sparql.processor.SPARQLProcessor.query(strOrQuery, initBindings, initNs, base, DEBUG)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalLoad(ctx, u):
    """Auto-generated function: evalLoad"""
    try:
        response = rdflib.plugins.sparql.update.evalLoad(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalCreate(ctx, u):
    """Auto-generated function: evalCreate"""
    try:
        response = rdflib.plugins.sparql.update.evalCreate(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalClear(ctx, u):
    """Auto-generated function: evalClear"""
    try:
        response = rdflib.plugins.sparql.update.evalClear(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalDrop(ctx, u):
    """Auto-generated function: evalDrop"""
    try:
        response = rdflib.plugins.sparql.update.evalDrop(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalInsertData(ctx, u):
    """Auto-generated function: evalInsertData"""
    try:
        response = rdflib.plugins.sparql.update.evalInsertData(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalDeleteData(ctx, u):
    """Auto-generated function: evalDeleteData"""
    try:
        response = rdflib.plugins.sparql.update.evalDeleteData(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalDeleteWhere(ctx, u):
    """Auto-generated function: evalDeleteWhere"""
    try:
        response = rdflib.plugins.sparql.update.evalDeleteWhere(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalModify(ctx, u):
    """Auto-generated function: evalModify"""
    try:
        response = rdflib.plugins.sparql.update.evalModify(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalAdd(ctx, u):
    """Auto-generated function: evalAdd"""
    try:
        response = rdflib.plugins.sparql.update.evalAdd(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalMove(ctx, u):
    """Auto-generated function: evalMove"""
    try:
        response = rdflib.plugins.sparql.update.evalMove(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalCopy(ctx, u):
    """Auto-generated function: evalCopy"""
    try:
        response = rdflib.plugins.sparql.update.evalCopy(ctx, u)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def evalUpdate(graph, update, initBindings):
    """Auto-generated function: evalUpdate"""
    try:
        response = rdflib.plugins.sparql.update.evalUpdate(graph, update, initBindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_IRI(expr, ctx):
    """Auto-generated function: Builtin_IRI"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_IRI(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_isBLANK(expr, ctx):
    """Auto-generated function: Builtin_isBLANK"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_isBLANK(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_isLITERAL(expr, ctx):
    """Auto-generated function: Builtin_isLITERAL"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_isLITERAL(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_isIRI(expr, ctx):
    """Auto-generated function: Builtin_isIRI"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_isIRI(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_isNUMERIC(expr, ctx):
    """Auto-generated function: Builtin_isNUMERIC"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_isNUMERIC(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_BNODE(expr, ctx):
    """Auto-generated function: Builtin_BNODE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_BNODE(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_ABS(expr, ctx):
    """Auto-generated function: Builtin_ABS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_ABS(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_IF(expr, ctx):
    """Auto-generated function: Builtin_IF"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_IF(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_RAND(expr, ctx):
    """Auto-generated function: Builtin_RAND"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_RAND(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_UUID(expr, ctx):
    """Auto-generated function: Builtin_UUID"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_UUID(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRUUID(expr, ctx):
    """Auto-generated function: Builtin_STRUUID"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRUUID(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_MD5(expr, ctx):
    """Auto-generated function: Builtin_MD5"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_MD5(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_SHA1(expr, ctx):
    """Auto-generated function: Builtin_SHA1"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_SHA1(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_SHA256(expr, ctx):
    """Auto-generated function: Builtin_SHA256"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_SHA256(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_SHA384(expr, ctx):
    """Auto-generated function: Builtin_SHA384"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_SHA384(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_SHA512(expr, ctx):
    """Auto-generated function: Builtin_SHA512"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_SHA512(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_COALESCE(expr, ctx):
    """Auto-generated function: Builtin_COALESCE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_COALESCE(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_CEIL(expr, ctx):
    """Auto-generated function: Builtin_CEIL"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_CEIL(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_FLOOR(expr, ctx):
    """Auto-generated function: Builtin_FLOOR"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_FLOOR(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_ROUND(expr, ctx):
    """Auto-generated function: Builtin_ROUND"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_ROUND(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_REGEX(expr, ctx):
    """Auto-generated function: Builtin_REGEX"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_REGEX(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_REPLACE(expr, ctx):
    """Auto-generated function: Builtin_REPLACE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_REPLACE(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRDT(expr, ctx):
    """Auto-generated function: Builtin_STRDT"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRDT(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRLANG(expr, ctx):
    """Auto-generated function: Builtin_STRLANG"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRLANG(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_CONCAT(expr, ctx):
    """Auto-generated function: Builtin_CONCAT"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_CONCAT(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRSTARTS(expr, ctx):
    """Auto-generated function: Builtin_STRSTARTS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRSTARTS(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRENDS(expr, ctx):
    """Auto-generated function: Builtin_STRENDS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRENDS(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRBEFORE(expr, ctx):
    """Auto-generated function: Builtin_STRBEFORE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRBEFORE(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRAFTER(expr, ctx):
    """Auto-generated function: Builtin_STRAFTER"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRAFTER(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_CONTAINS(expr, ctx):
    """Auto-generated function: Builtin_CONTAINS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_CONTAINS(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_ENCODE_FOR_URI(expr, ctx):
    """Auto-generated function: Builtin_ENCODE_FOR_URI"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_ENCODE_FOR_URI(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_SUBSTR(expr, ctx):
    """Auto-generated function: Builtin_SUBSTR"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_SUBSTR(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STRLEN(e, ctx):
    """Auto-generated function: Builtin_STRLEN"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STRLEN(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_STR(e, ctx):
    """Auto-generated function: Builtin_STR"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_STR(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_LCASE(e, ctx):
    """Auto-generated function: Builtin_LCASE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_LCASE(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_LANGMATCHES(e, ctx):
    """Auto-generated function: Builtin_LANGMATCHES"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_LANGMATCHES(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_NOW(e, ctx):
    """Auto-generated function: Builtin_NOW"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_NOW(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_YEAR(e, ctx):
    """Auto-generated function: Builtin_YEAR"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_YEAR(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_MONTH(e, ctx):
    """Auto-generated function: Builtin_MONTH"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_MONTH(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_DAY(e, ctx):
    """Auto-generated function: Builtin_DAY"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_DAY(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_HOURS(e, ctx):
    """Auto-generated function: Builtin_HOURS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_HOURS(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_MINUTES(e, ctx):
    """Auto-generated function: Builtin_MINUTES"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_MINUTES(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_SECONDS(e, ctx):
    """Auto-generated function: Builtin_SECONDS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_SECONDS(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_TIMEZONE(e, ctx):
    """Auto-generated function: Builtin_TIMEZONE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_TIMEZONE(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_TZ(e, ctx):
    """Auto-generated function: Builtin_TZ"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_TZ(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_UCASE(e, ctx):
    """Auto-generated function: Builtin_UCASE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_UCASE(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_LANG(e, ctx):
    """Auto-generated function: Builtin_LANG"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_LANG(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_DATATYPE(e, ctx):
    """Auto-generated function: Builtin_DATATYPE"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_DATATYPE(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_sameTerm(e, ctx):
    """Auto-generated function: Builtin_sameTerm"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_sameTerm(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_BOUND(e, ctx):
    """Auto-generated function: Builtin_BOUND"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_BOUND(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Builtin_EXISTS(e, ctx):
    """Auto-generated function: Builtin_EXISTS"""
    try:
        response = rdflib.plugins.sparql.operators.Builtin_EXISTS(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def register_custom_function(uri, func, override, raw):
    """Auto-generated function: register_custom_function"""
    try:
        response = rdflib.plugins.sparql.operators.register_custom_function(uri, func, override, raw)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def custom_function(uri, override, raw):
    """Auto-generated function: custom_function"""
    try:
        response = rdflib.plugins.sparql.operators.custom_function(uri, override, raw)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def unregister_custom_function(uri, func):
    """Auto-generated function: unregister_custom_function"""
    try:
        response = rdflib.plugins.sparql.operators.unregister_custom_function(uri, func)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Function(e, ctx):
    """Auto-generated function: Function"""
    try:
        response = rdflib.plugins.sparql.operators.Function(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def default_cast(e, ctx):
    """Auto-generated function: default_cast"""
    try:
        response = rdflib.plugins.sparql.operators.default_cast(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def UnaryNot(expr, ctx):
    """Auto-generated function: UnaryNot"""
    try:
        response = rdflib.plugins.sparql.operators.UnaryNot(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def UnaryMinus(expr, ctx):
    """Auto-generated function: UnaryMinus"""
    try:
        response = rdflib.plugins.sparql.operators.UnaryMinus(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def UnaryPlus(expr, ctx):
    """Auto-generated function: UnaryPlus"""
    try:
        response = rdflib.plugins.sparql.operators.UnaryPlus(expr, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def MultiplicativeExpression(e, ctx):
    """Auto-generated function: MultiplicativeExpression"""
    try:
        response = rdflib.plugins.sparql.operators.MultiplicativeExpression(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def AdditiveExpression(e, ctx):
    """Auto-generated function: AdditiveExpression"""
    try:
        response = rdflib.plugins.sparql.operators.AdditiveExpression(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def RelationalExpression(e, ctx):
    """Auto-generated function: RelationalExpression"""
    try:
        response = rdflib.plugins.sparql.operators.RelationalExpression(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ConditionalAndExpression(e, ctx):
    """Auto-generated function: ConditionalAndExpression"""
    try:
        response = rdflib.plugins.sparql.operators.ConditionalAndExpression(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ConditionalOrExpression(e, ctx):
    """Auto-generated function: ConditionalOrExpression"""
    try:
        response = rdflib.plugins.sparql.operators.ConditionalOrExpression(e, ctx)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def not_(arg):
    """Auto-generated function: not_"""
    try:
        response = rdflib.plugins.sparql.operators.not_(arg)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def and_():
    """Auto-generated function: and_"""
    try:
        response = rdflib.plugins.sparql.operators.and_()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def simplify(expr):
    """Auto-generated function: simplify"""
    try:
        response = rdflib.plugins.sparql.operators.simplify(expr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def literal(s):
    """Auto-generated function: literal"""
    try:
        response = rdflib.plugins.sparql.operators.literal(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def datetime(e):
    """Auto-generated function: datetime"""
    try:
        response = rdflib.plugins.sparql.operators.datetime(e)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def date(e):
    """Auto-generated function: date"""
    try:
        response = rdflib.plugins.sparql.operators.date(e)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def string(s):
    """Auto-generated function: string"""
    try:
        response = rdflib.plugins.sparql.operators.string(s)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def numeric(expr):
    """Auto-generated function: numeric"""
    try:
        response = rdflib.plugins.sparql.operators.numeric(expr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dateTimeObjects(expr):
    """Auto-generated function: dateTimeObjects"""
    try:
        response = rdflib.plugins.sparql.operators.dateTimeObjects(expr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def isCompatibleDateTimeDatatype(obj1, dt1, obj2, dt2):
    """Auto-generated function: isCompatibleDateTimeDatatype"""
    try:
        response = rdflib.plugins.sparql.operators.isCompatibleDateTimeDatatype(obj1, dt1, obj2, dt2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def calculateDuration(obj1, obj2):
    """Auto-generated function: calculateDuration"""
    try:
        response = rdflib.plugins.sparql.operators.calculateDuration(obj1, obj2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def calculateFinalDateTime(obj1, dt1, obj2, dt2, operation):
    """Auto-generated function: calculateFinalDateTime"""
    try:
        response = rdflib.plugins.sparql.operators.calculateFinalDateTime(obj1, dt1, obj2, dt2, operation)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def EBV(rt):
    """Auto-generated function: EBV"""
    try:
        response = rdflib.plugins.sparql.operators.EBV(rt)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def project(vars):
    """Auto-generated function: project"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenBindings.project(vars)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def disjointDomain(other):
    """Auto-generated function: disjointDomain"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenDict.disjointDomain(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def compatible(other):
    """Auto-generated function: compatible"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenDict.compatible(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def merge(other):
    """Auto-generated function: merge"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenBindings.merge(other)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def now():
    """Auto-generated function: now"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.now()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bnodes():
    """Auto-generated function: bnodes"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenBindings.bnodes()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def prologue():
    """Auto-generated function: prologue"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenBindings.prologue()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def forget(before, _except):
    """Auto-generated function: forget"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenBindings.forget(before, _except)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def remember(these):
    """Auto-generated function: remember"""
    try:
        response = rdflib.plugins.sparql.sparql.FrozenBindings.remember(these)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clone(bindings):
    """Auto-generated function: clone"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.clone(bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dataset():
    """Auto-generated function: dataset"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.dataset()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def load(source, default, into):
    """Auto-generated function: load"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.load(source, default, into)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get(key, default):
    """Auto-generated function: get"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.get(key, default)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def solution(vars):
    """Auto-generated function: solution"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.solution(vars)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pushGraph(graph):
    """Auto-generated function: pushGraph"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.pushGraph(graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def push():
    """Auto-generated function: push"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.push()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clean():
    """Auto-generated function: clean"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.clean()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def thaw(frozenbindings):
    """Auto-generated function: thaw"""
    try:
        response = rdflib.plugins.sparql.sparql.QueryContext.thaw(frozenbindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def resolvePName(prefix, localname):
    """Auto-generated function: resolvePName"""
    try:
        response = rdflib.plugins.sparql.sparql.Prologue.resolvePName(prefix, localname)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def bind(prefix, uri):
    """Auto-generated function: bind"""
    try:
        response = rdflib.plugins.sparql.sparql.Prologue.bind(prefix, uri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def absolutize(iri):
    """Auto-generated function: absolutize"""
    try:
        response = rdflib.plugins.sparql.sparql.Prologue.absolutize(iri)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def OrderBy(p, expr):
    """Auto-generated function: OrderBy"""
    try:
        response = rdflib.plugins.sparql.algebra.OrderBy(p, expr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def ToMultiSet(p):
    """Auto-generated function: ToMultiSet"""
    try:
        response = rdflib.plugins.sparql.algebra.ToMultiSet(p)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Union(p1, p2):
    """Auto-generated function: Union"""
    try:
        response = rdflib.plugins.sparql.algebra.Union(p1, p2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Join(p1, p2):
    """Auto-generated function: Join"""
    try:
        response = rdflib.plugins.sparql.algebra.Join(p1, p2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Minus(p1, p2):
    """Auto-generated function: Minus"""
    try:
        response = rdflib.plugins.sparql.algebra.Minus(p1, p2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Graph(term, graph):
    """Auto-generated function: Graph"""
    try:
        response = rdflib.plugins.sparql.algebra.Graph(term, graph)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def BGP(triples):
    """Auto-generated function: BGP"""
    try:
        response = rdflib.plugins.sparql.algebra.BGP(triples)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def LeftJoin(p1, p2, expr):
    """Auto-generated function: LeftJoin"""
    try:
        response = rdflib.plugins.sparql.algebra.LeftJoin(p1, p2, expr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Filter(expr, p):
    """Auto-generated function: Filter"""
    try:
        response = rdflib.plugins.sparql.algebra.Filter(expr, p)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Extend(p, expr, var):
    """Auto-generated function: Extend"""
    try:
        response = rdflib.plugins.sparql.algebra.Extend(p, expr, var)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Values(res):
    """Auto-generated function: Values"""
    try:
        response = rdflib.plugins.sparql.algebra.Values(res)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Project(p, PV):
    """Auto-generated function: Project"""
    try:
        response = rdflib.plugins.sparql.algebra.Project(p, PV)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def Group(p, expr):
    """Auto-generated function: Group"""
    try:
        response = rdflib.plugins.sparql.algebra.Group(p, expr)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def reorderTriples(l_):
    """Auto-generated function: reorderTriples"""
    try:
        response = rdflib.plugins.sparql.algebra.reorderTriples(l_)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def triples(l):
    """Auto-generated function: triples"""
    try:
        response = rdflib.plugins.sparql.algebra.triples(l)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translatePName(p, prologue):
    """Auto-generated function: translatePName"""
    try:
        response = rdflib.plugins.sparql.algebra.translatePName(p, prologue)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translatePath(p):
    """Auto-generated function: translatePath"""
    try:
        response = rdflib.plugins.sparql.algebra.translatePath(p)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateExists(e):
    """Auto-generated function: translateExists"""
    try:
        response = rdflib.plugins.sparql.algebra.translateExists(e)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def collectAndRemoveFilters(parts):
    """Auto-generated function: collectAndRemoveFilters"""
    try:
        response = rdflib.plugins.sparql.algebra.collectAndRemoveFilters(parts)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateGroupOrUnionGraphPattern(graphPattern):
    """Auto-generated function: translateGroupOrUnionGraphPattern"""
    try:
        response = rdflib.plugins.sparql.algebra.translateGroupOrUnionGraphPattern(graphPattern)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateGraphGraphPattern(graphPattern):
    """Auto-generated function: translateGraphGraphPattern"""
    try:
        response = rdflib.plugins.sparql.algebra.translateGraphGraphPattern(graphPattern)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateInlineData(graphPattern):
    """Auto-generated function: translateInlineData"""
    try:
        response = rdflib.plugins.sparql.algebra.translateInlineData(graphPattern)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateGroupGraphPattern(graphPattern):
    """Auto-generated function: translateGroupGraphPattern"""
    try:
        response = rdflib.plugins.sparql.algebra.translateGroupGraphPattern(graphPattern)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def traverse(tree, visitPre, visitPost, complete):
    """Auto-generated function: traverse"""
    try:
        response = rdflib.plugins.sparql.algebra.traverse(tree, visitPre, visitPost, complete)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateAggregates(q, M):
    """Auto-generated function: translateAggregates"""
    try:
        response = rdflib.plugins.sparql.algebra.translateAggregates(q, M)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateValues(v):
    """Auto-generated function: translateValues"""
    try:
        response = rdflib.plugins.sparql.algebra.translateValues(v)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translate(q):
    """Auto-generated function: translate"""
    try:
        response = rdflib.plugins.sparql.algebra.translate(q)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def simplify(n):
    """Auto-generated function: simplify"""
    try:
        response = rdflib.plugins.sparql.algebra.simplify(n)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def analyse(n, children):
    """Auto-generated function: analyse"""
    try:
        response = rdflib.plugins.sparql.algebra.analyse(n, children)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translatePrologue(p, base, initNs, prologue):
    """Auto-generated function: translatePrologue"""
    try:
        response = rdflib.plugins.sparql.algebra.translatePrologue(p, base, initNs, prologue)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateQuads(quads):
    """Auto-generated function: translateQuads"""
    try:
        response = rdflib.plugins.sparql.algebra.translateQuads(quads)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateUpdate1(u, prologue):
    """Auto-generated function: translateUpdate1"""
    try:
        response = rdflib.plugins.sparql.algebra.translateUpdate1(u, prologue)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateUpdate(q, base, initNs):
    """Auto-generated function: translateUpdate"""
    try:
        response = rdflib.plugins.sparql.algebra.translateUpdate(q, base, initNs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateQuery(q, base, initNs):
    """Auto-generated function: translateQuery"""
    try:
        response = rdflib.plugins.sparql.algebra.translateQuery(q, base, initNs)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convert_node_arg(node_arg):
    """Auto-generated function: convert_node_arg"""
    try:
        response = rdflib.plugins.sparql.algebra._AlgebraTranslator.convert_node_arg(node_arg)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def sparql_query_text(node):
    """Auto-generated function: sparql_query_text"""
    try:
        response = rdflib.plugins.sparql.algebra._AlgebraTranslator.sparql_query_text(node)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def translateAlgebra(query_algebra):
    """Auto-generated function: translateAlgebra"""
    try:
        response = rdflib.plugins.sparql.algebra.translateAlgebra(query_algebra)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def pprintAlgebra(q):
    """Auto-generated function: pprintAlgebra"""
    try:
        response = rdflib.plugins.sparql.algebra.pprintAlgebra(q)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def dont_care(row):
    """Auto-generated function: dont_care"""
    try:
        response = rdflib.plugins.sparql.aggregates.Accumulator.dont_care(row)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def use_row(row):
    """Auto-generated function: use_row"""
    try:
        response = rdflib.plugins.sparql.aggregates.Counter.use_row(row)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def set_value(bindings):
    """Auto-generated function: set_value"""
    try:
        response = rdflib.plugins.sparql.aggregates.Extremum.set_value(bindings)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def update(row):
    """Auto-generated function: update"""
    try:
        response = rdflib.plugins.sparql.aggregates.Aggregator.update(row)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_value():
    """Auto-generated function: get_value"""
    try:
        response = rdflib.plugins.sparql.aggregates.GroupConcat.get_value()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eval_row(row):
    """Auto-generated function: eval_row"""
    try:
        response = rdflib.plugins.sparql.aggregates.Counter.eval_row(row)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def eval_full_row(row):
    """Auto-generated function: eval_full_row"""
    try:
        response = rdflib.plugins.sparql.aggregates.Counter.eval_full_row(row)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def type_safe_numbers():
    """Auto-generated function: type_safe_numbers"""
    try:
        response = rdflib.plugins.sparql.aggregates.type_safe_numbers()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def compare(val1, val2):
    """Auto-generated function: compare"""
    try:
        response = rdflib.plugins.sparql.aggregates.Maximum.compare(val1, val2)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def get_bindings():
    """Auto-generated function: get_bindings"""
    try:
        response = rdflib.plugins.sparql.aggregates.Aggregator.get_bindings()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.sparql.results.txtresults.TXTResultSerializer.serialize(stream, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, content_type):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.sparql.results.tsvresults.TSVResultParser.parse(source, content_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convertTerm(t):
    """Auto-generated function: convertTerm"""
    try:
        response = rdflib.plugins.sparql.results.tsvresults.TSVResultParser.convertTerm(t)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, content_type):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.sparql.results.jsonresults.JSONResultParser.parse(source, content_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.sparql.results.jsonresults.JSONResultSerializer.serialize(stream, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseJsonTerm(d):
    """Auto-generated function: parseJsonTerm"""
    try:
        response = rdflib.plugins.sparql.results.jsonresults.parseJsonTerm(d)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def termToJSON(term):
    """Auto-generated function: termToJSON"""
    try:
        response = rdflib.plugins.sparql.results.jsonresults.termToJSON(term)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, content_type):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.XMLResultParser.parse(source, content_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseTerm(element):
    """Auto-generated function: parseTerm"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.parseTerm(element)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.XMLResultSerializer.serialize(stream, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write_header(allvarsL):
    """Auto-generated function: write_header"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.write_header(allvarsL)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write_ask(val):
    """Auto-generated function: write_ask"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.write_ask(val)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write_results_header():
    """Auto-generated function: write_results_header"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.write_results_header()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write_start_result():
    """Auto-generated function: write_start_result"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.write_start_result()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write_end_result():
    """Auto-generated function: write_end_result"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.write_end_result()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def write_binding(name, val):
    """Auto-generated function: write_binding"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.write_binding(name, val)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def close():
    """Auto-generated function: close"""
    try:
        response = rdflib.plugins.sparql.results.xmlresults.SPARQLXMLWriter.close()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, content_type):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.sparql.results.graph.GraphResultParser.parse(source, content_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source, content_type):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.sparql.results.csvresults.CSVResultParser.parse(source, content_type)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parseRow(row, v):
    """Auto-generated function: parseRow"""
    try:
        response = rdflib.plugins.sparql.results.csvresults.CSVResultParser.parseRow(row, v)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def convertTerm(t):
    """Auto-generated function: convertTerm"""
    try:
        response = rdflib.plugins.sparql.results.csvresults.CSVResultParser.convertTerm(t)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serialize(stream, encoding):
    """Auto-generated function: serialize"""
    try:
        response = rdflib.plugins.sparql.results.csvresults.CSVResultSerializer.serialize(stream, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def serializeTerm(term, encoding):
    """Auto-generated function: serializeTerm"""
    try:
        response = rdflib.plugins.sparql.results.csvresults.CSVResultSerializer.serializeTerm(term, encoding)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def parse(source):
    """Auto-generated function: parse"""
    try:
        response = rdflib.plugins.sparql.results.rdfresults.RDFResultParser.parse(source)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def customEval(ctx, part):
    """Auto-generated function: customEval"""
    try:
        response = rdflib.examples.custom_eval.customEval(ctx, part)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.examples.patch_serializer_example.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def example_1():
    """Auto-generated function: example_1"""
    try:
        response = rdflib.examples.berkeleydb_example.example_1()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def example_2():
    """Auto-generated function: example_2"""
    try:
        response = rdflib.examples.berkeleydb_example.example_2()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.examples.parse_patch.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def audit_hook(name, args):
    """Auto-generated function: audit_hook"""
    try:
        response = rdflib.examples.secure_with_audit.audit_hook(name, args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.examples.secure_with_audit.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def infixowl_example():
    """Auto-generated function: infixowl_example"""
    try:
        response = rdflib.examples.infixowl_ontology_creation.infixowl_example()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def http_open(req):
    """Auto-generated function: http_open"""
    try:
        response = rdflib.examples.secure_with_urlopen.SecuredHTTPHandler.http_open(req)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.examples.secure_with_urlopen.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def clean_python(input):
    """Auto-generated function: clean_python"""
    try:
        response = rdflib.devtools.diffrtpy.clean_python(input)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def run(args):
    """Auto-generated function: run"""
    try:
        response = rdflib.devtools.diffrtpy.Application.run(args)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def handle(parse_result):
    """Auto-generated function: handle"""
    try:
        response = rdflib.devtools.diffrtpy.Application.handle(parse_result)
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def main():
    """Auto-generated function: main"""
    try:
        response = rdflib.devtools.diffrtpy.main()
        return jsonify(response.json()), response.status_code
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# API Endpoints

@app.route('/make_unquote_correctness_pairs', methods=['POST'])
def call_make_unquote_correctness_pairs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_unquote_correctness_pairs()

@app.route('/ntriples_unquote_validate', methods=['POST'])
def call_ntriples_unquote_validate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input = request_json.get("input")
    

    return ntriples_unquote_validate(input)

@app.route('/ntriples_unquote', methods=['POST'])
def call_ntriples_unquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input = request_json.get("input")
    

    return ntriples_unquote(input)

@app.route('/make_unquote_correctness_tests', methods=['POST'])
def call_make_unquote_correctness_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    selectors = request_json.get("selectors")
    

    return make_unquote_correctness_tests(selectors)

@app.route('/test_unquote_correctness', methods=['POST'])
def call_test_unquote_correctness():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    unquoter_key = request_json.get("unquoter_key")
    
    quoted = request_json.get("quoted")
    
    unquoted = request_json.get("unquoted")
    

    return test_unquote_correctness(unquoter_key, quoted, unquoted)

@app.route('/test_parse_correctness', methods=['POST'])
def call_test_parse_correctness():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    quoted = request_json.get("quoted")
    
    unquoted = request_json.get("unquoted")
    

    return test_parse_correctness(format, quoted, unquoted)

@app.route('/test_pname_escaping', methods=['POST'])
def call_test_pname_escaping():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    char = request_json.get("char")
    
    escaped = request_json.get("escaped")
    

    return test_pname_escaping(format, char, escaped)

@app.route('/test_serialize_roundtrip', methods=['POST'])
def call_test_serialize_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    char = request_json.get("char")
    

    return test_serialize_roundtrip(format, char)

@app.route('/test_empty', methods=['POST'])
def call_test_empty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_empty()

@app.route('/test_repeat_triples', methods=['POST'])
def call_test_repeat_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_repeat_triples()

@app.route('/test_same_subject', methods=['POST'])
def call_test_same_subject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_same_subject()

@app.route('/test_remember_namespace', methods=['POST'])
def call_test_remember_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_remember_namespace()

@app.route('/test_graph_qname_syntax', methods=['POST'])
def call_test_graph_qname_syntax():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_qname_syntax()

@app.route('/test_graph_uri_syntax', methods=['POST'])
def call_test_graph_uri_syntax():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_uri_syntax()

@app.route('/test_blank_graph_identifier', methods=['POST'])
def call_test_blank_graph_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_blank_graph_identifier()

@app.route('/test_graph_parsing', methods=['POST'])
def call_test_graph_parsing():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_parsing()

@app.route('/test_round_trips', methods=['POST'])
def call_test_round_trips():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_round_trips()

@app.route('/test_default_graph_serializes_without_name', methods=['POST'])
def call_test_default_graph_serializes_without_name():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_default_graph_serializes_without_name()

@app.route('/test_prefixes', methods=['POST'])
def call_test_prefixes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prefixes()

@app.route('/test_issue_2154', methods=['POST'])
def call_test_issue_2154():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_2154()

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/test_util_list2set', methods=['POST'])
def call_test_util_list2set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_list2set()

@app.route('/test_util_uniq', methods=['POST'])
def call_test_util_uniq():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_uniq()

@app.route('/test_util_date_time_tisnoneandnotz', methods=['POST'])
def call_test_util_date_time_tisnoneandnotz():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_date_time_tisnoneandnotz()

@app.route('/test_util_date_time_tisnonebuttz', methods=['POST'])
def call_test_util_date_time_tisnonebuttz():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_date_time_tisnonebuttz()

@app.route('/test_util_date_time_tistime', methods=['POST'])
def call_test_util_date_time_tistime():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_date_time_tistime()

@app.route('/test_util_date_time_tistimewithtz', methods=['POST'])
def call_test_util_date_time_tistimewithtz():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_date_time_tistimewithtz()

@app.route('/test_util_parse_date_time', methods=['POST'])
def call_test_util_parse_date_time():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_parse_date_time()

@app.route('/test_util_parse_date_timewithtz', methods=['POST'])
def call_test_util_parse_date_timewithtz():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_parse_date_timewithtz()

@app.route('/test_util_date_timewithtoutz', methods=['POST'])
def call_test_util_date_timewithtoutz():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_date_timewithtoutz()

@app.route('/test_util_to_term_sisNone', methods=['POST'])
def call_test_util_to_term_sisNone():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_to_term_sisNone()

@app.route('/test_util_to_term_sisstr', methods=['POST'])
def call_test_util_to_term_sisstr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_to_term_sisstr()

@app.route('/test_util_to_term_sisurl', methods=['POST'])
def call_test_util_to_term_sisurl():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_to_term_sisurl()

@app.route('/test_util_to_term_sisbnode', methods=['POST'])
def call_test_util_to_term_sisbnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_to_term_sisbnode()

@app.route('/test_util_to_term_sisunknown', methods=['POST'])
def call_test_util_to_term_sisunknown():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_to_term_sisunknown()

@app.route('/test_util_to_term_sisnotstr', methods=['POST'])
def call_test_util_to_term_sisnotstr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_to_term_sisnotstr()

@app.route('/test_util_from_n3_sisnonenodefault', methods=['POST'])
def call_test_util_from_n3_sisnonenodefault():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_sisnonenodefault()

@app.route('/test_util_from_n3_sisnonewithdefault', methods=['POST'])
def call_test_util_from_n3_sisnonewithdefault():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_sisnonewithdefault()

@app.route('/test_util_from_n3_expectdefaultbnode', methods=['POST'])
def call_test_util_from_n3_expectdefaultbnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectdefaultbnode()

@app.route('/test_util_from_n3_expectbnode', methods=['POST'])
def call_test_util_from_n3_expectbnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectbnode()

@app.route('/test_util_from_n3_expectliteral', methods=['POST'])
def call_test_util_from_n3_expectliteral():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteral()

@app.route('/test_util_from_n3_expecturiref', methods=['POST'])
def call_test_util_from_n3_expecturiref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expecturiref()

@app.route('/test_util_from_n3_expectliteralandlang', methods=['POST'])
def call_test_util_from_n3_expectliteralandlang():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralandlang()

@app.route('/test_util_from_n3_expectliteralandlangdtype', methods=['POST'])
def call_test_util_from_n3_expectliteralandlangdtype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralandlangdtype()

@app.route('/test_util_from_n3_expectliteralanddtype', methods=['POST'])
def call_test_util_from_n3_expectliteralanddtype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralanddtype()

@app.route('/test_util_from_n3_expectliteralwithdatatypefromint', methods=['POST'])
def call_test_util_from_n3_expectliteralwithdatatypefromint():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralwithdatatypefromint()

@app.route('/test_util_from_n3_expectliteralwithdatatypefrombool', methods=['POST'])
def call_test_util_from_n3_expectliteralwithdatatypefrombool():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralwithdatatypefrombool()

@app.route('/test_util_from_n3_expectliteralmultiline', methods=['POST'])
def call_test_util_from_n3_expectliteralmultiline():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralmultiline()

@app.route('/test_util_from_n3_expectliteralwithescapedquote', methods=['POST'])
def call_test_util_from_n3_expectliteralwithescapedquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralwithescapedquote()

@app.route('/test_util_from_n3_expectliteralwithtrailingbackslash', methods=['POST'])
def call_test_util_from_n3_expectliteralwithtrailingbackslash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectliteralwithtrailingbackslash()

@app.route('/test_util_from_n3_expectpartialidempotencewithn3', methods=['POST'])
def call_test_util_from_n3_expectpartialidempotencewithn3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectpartialidempotencewithn3()

@app.route('/test_util_from_n3_expectsameasn3parser', methods=['POST'])
def call_test_util_from_n3_expectsameasn3parser():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectsameasn3parser()

@app.route('/test_util_from_n3_expectquotedgraph', methods=['POST'])
def call_test_util_from_n3_expectquotedgraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectquotedgraph()

@app.route('/test_util_from_n3_expectgraph', methods=['POST'])
def call_test_util_from_n3_expectgraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_util_from_n3_expectgraph()

@app.route('/test_util_from_n3_escapes', methods=['POST'])
def call_test_util_from_n3_escapes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    escaped = request_json.get("escaped")
    
    raw = request_json.get("raw")
    

    return test_util_from_n3_escapes(escaped, raw)

@app.route('/test_util_from_n3_not_escapes', methods=['POST'])
def call_test_util_from_n3_not_escapes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    string = request_json.get("string")
    

    return test_util_from_n3_not_escapes(string)

@app.route('/test_util_from_n3_not_escapes_xf', methods=['POST'])
def call_test_util_from_n3_not_escapes_xf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    string = request_json.get("string")
    

    return test_util_from_n3_not_escapes_xf(string)

@app.route('/test__coalesce', methods=['POST'])
def call_test__coalesce():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    params = request_json.get("params")
    
    default = request_json.get("default")
    
    expected_result = request_json.get("expected_result")
    

    return test__coalesce(params, default, expected_result)

@app.route('/test__coalesce_typing', methods=['POST'])
def call_test__coalesce_typing():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test__coalesce_typing()

@app.route('/test_find_roots', methods=['POST'])
def call_test_find_roots():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_sources = request_json.get("graph_sources")
    
    prop = request_json.get("prop")
    
    roots = request_json.get("roots")
    
    expected_result = request_json.get("expected_result")
    

    return test_find_roots(graph_sources, prop, roots, expected_result)

@app.route('/test_get_tree', methods=['POST'])
def call_test_get_tree():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_sources = request_json.get("graph_sources")
    
    root = request_json.get("root")
    
    prop = request_json.get("prop")
    
    dir = request_json.get("dir")
    
    expected_result = request_json.get("expected_result")
    

    return test_get_tree(graph_sources, root, prop, dir, expected_result)

@app.route('/test_iri2uri', methods=['POST'])
def call_test_iri2uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    
    expected_result = request_json.get("expected_result")
    

    return test_iri2uri(iri, expected_result)

@app.route('/nt_file', methods=['POST'])
def call_nt_file():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    fn = request_json.get("fn")
    

    return nt_file(fn)

@app.route('/test_issue859', methods=['POST'])
def call_test_issue859():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue859()

@app.route('/test_issue78', methods=['POST'])
def call_test_issue78():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue78()

@app.route('/test_issue146', methods=['POST'])
def call_test_issue146():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue146()

@app.route('/test_issue1144_rdflib', methods=['POST'])
def call_test_issue1144_rdflib():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue1144_rdflib()

@app.route('/test_issue1144_w3c', methods=['POST'])
def call_test_issue1144_w3c():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue1144_w3c()

@app.route('/test_sink', methods=['POST'])
def call_test_sink():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sink()

@app.route('/test_nonvalidating_unquote', methods=['POST'])
def call_test_nonvalidating_unquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nonvalidating_unquote()

@app.route('/test_validating_unquote', methods=['POST'])
def call_test_validating_unquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_validating_unquote()

@app.route('/test_validating_unquote_raises', methods=['POST'])
def call_test_validating_unquote_raises():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_validating_unquote_raises()

@app.route('/test_nonvalidating_uriquote', methods=['POST'])
def call_test_nonvalidating_uriquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nonvalidating_uriquote()

@app.route('/test_validating_uriquote', methods=['POST'])
def call_test_validating_uriquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_validating_uriquote()

@app.route('/test_w3d_ntriples_parser_fpath', methods=['POST'])
def call_test_w3d_ntriples_parser_fpath():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_w3d_ntriples_parser_fpath()

@app.route('/test_w3c_ntriples_parser_parsestring', methods=['POST'])
def call_test_w3c_ntriples_parser_parsestring():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_w3c_ntriples_parser_parsestring()

@app.route('/test_w3_ntriple_variants', methods=['POST'])
def call_test_w3_ntriple_variants():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_w3_ntriple_variants()

@app.route('/test_bad_line', methods=['POST'])
def call_test_bad_line():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bad_line()

@app.route('/test_cover_eat', methods=['POST'])
def call_test_cover_eat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cover_eat()

@app.route('/test_cover_subjectobjectliteral', methods=['POST'])
def call_test_cover_subjectobjectliteral():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cover_subjectobjectliteral()

@app.route('/test_bnode_shared_across_instances', methods=['POST'])
def call_test_bnode_shared_across_instances():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_shared_across_instances()

@app.route('/test_bnode_distinct_across_instances', methods=['POST'])
def call_test_bnode_distinct_across_instances():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_distinct_across_instances()

@app.route('/test_bnode_distinct_across_parse', methods=['POST'])
def call_test_bnode_distinct_across_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_distinct_across_parse()

@app.route('/test_bnode_shared_across_parse', methods=['POST'])
def call_test_bnode_shared_across_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_shared_across_parse()

@app.route('/test_bnode_shared_across_instances_with_parse_option', methods=['POST'])
def call_test_bnode_shared_across_instances_with_parse_option():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_shared_across_instances_with_parse_option()

@app.route('/triple', methods=['POST'])
def call_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return triple(s, p, o)

@app.route('/http_file_server', methods=['POST'])
def call_http_file_server():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return http_file_server()

@app.route('/rdfs_graph', methods=['POST'])
def call_rdfs_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rdfs_graph()

@app.route('/function_httpmock', methods=['POST'])
def call_function_httpmock():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    _session_function_httpmocks = request_json.get("_session_function_httpmocks")
    

    return function_httpmock(_session_function_httpmocks)

@app.route('/function_httpmocks', methods=['POST'])
def call_function_httpmocks():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    _session_function_httpmocks = request_json.get("_session_function_httpmocks")
    

    return function_httpmocks(_session_function_httpmocks)

@app.route('/audit_hook_dispatcher', methods=['POST'])
def call_audit_hook_dispatcher():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return audit_hook_dispatcher()

@app.route('/exit_stack', methods=['POST'])
def call_exit_stack():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return exit_stack()

@app.route('/pytest_collection_modifyitems', methods=['POST'])
def call_pytest_collection_modifyitems():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    items = request_json.get("items")
    

    return pytest_collection_modifyitems(items)

@app.route('/test_paths_n3', methods=['POST'])
def call_test_paths_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path = request_json.get("path")
    
    no_nsm = request_json.get("no_nsm")
    
    with_nsm = request_json.get("with_nsm")
    

    return test_paths_n3(path, no_nsm, with_nsm)

@app.route('/test_mulpath_n3', methods=['POST'])
def call_test_mulpath_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_mulpath_n3()

@app.route('/test_eq', methods=['POST'])
def call_test_eq():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    

    return test_eq(lhs, rhs)

@app.route('/test_hash', methods=['POST'])
def call_test_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    

    return test_hash(lhs, rhs)

@app.route('/test_dict_key', methods=['POST'])
def call_test_dict_key():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    insert_path = request_json.get("insert_path")
    
    check_path = request_json.get("check_path")
    

    return test_dict_key(insert_path, check_path)

@app.route('/test_rdflib_query_exercise', methods=['POST'])
def call_test_rdflib_query_exercise():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_rdflib_query_exercise()

@app.route('/test_sort_dates', methods=['POST'])
def call_test_sort_dates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sort_dates()

@app.route('/test_sort_docfrag', methods=['POST'])
def call_test_sort_docfrag():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sort_docfrag()

@app.route('/test_group_by', methods=['POST'])
def call_test_group_by():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_group_by()

@app.route('/test_having_aggregate_eq_literal', methods=['POST'])
def call_test_having_aggregate_eq_literal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_having_aggregate_eq_literal()

@app.route('/test_having_primary_expression_var_neq_iri', methods=['POST'])
def call_test_having_primary_expression_var_neq_iri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_having_primary_expression_var_neq_iri()

@app.route('/collect_files', methods=['POST'])
def call_collect_files():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    directory = request_json.get("directory")
    
    exclude_names = request_json.get("exclude_names")
    
    pattern = request_json.get("pattern")
    

    return collect_files(directory, exclude_names, pattern)

@app.route('/roundtrip', methods=['POST'])
def call_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    infmt = request_json.get("infmt")
    
    testfmt = request_json.get("testfmt")
    
    source = request_json.get("source")
    
    graph_type = request_json.get("graph_type")
    
    checks = request_json.get("checks")
    
    same_public_id = request_json.get("same_public_id")
    

    return roundtrip(infmt, testfmt, source, graph_type, checks, same_public_id)

@app.route('/get_formats', methods=['POST'])
def call_get_formats():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_formats()

@app.route('/make_cases', methods=['POST'])
def call_make_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    files = request_json.get("files")
    
    formats = request_json.get("formats")
    
    hext_okay = request_json.get("hext_okay")
    
    checks = request_json.get("checks")
    
    graph_type = request_json.get("graph_type")
    
    same_public_id = request_json.get("same_public_id")
    

    return make_cases(files, formats, hext_okay, checks, graph_type, same_public_id)

@app.route('/test_formats', methods=['POST'])
def call_test_formats():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_formats()

@app.route('/test_nt', methods=['POST'])
def call_test_nt():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    args = request_json.get("args")
    

    return test_nt(checker, args)

@app.route('/test_n3', methods=['POST'])
def call_test_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    args = request_json.get("args")
    

    return test_n3(checker, args)

@app.route('/test_n3_suite', methods=['POST'])
def call_test_n3_suite():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    args = request_json.get("args")
    

    return test_n3_suite(checker, args)

@app.route('/test_extra', methods=['POST'])
def call_test_extra():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    args = request_json.get("args")
    

    return test_extra(checker, args)

@app.route('/generate_example_cases', methods=['POST'])
def call_generate_example_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return generate_example_cases()

@app.route('/test_example', methods=['POST'])
def call_test_example():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    example_file = request_json.get("example_file")
    

    return test_example(example_file)

@app.route('/test_base_cumulative', methods=['POST'])
def call_test_base_cumulative():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_base_cumulative()

@app.route('/test_base_explicit', methods=['POST'])
def call_test_base_explicit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_base_explicit()

@app.route('/test_base_serialize', methods=['POST'])
def call_test_base_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_base_serialize()

@app.route('/test_issue23', methods=['POST'])
def call_test_issue23():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue23()

@app.route('/test_issue29', methods=['POST'])
def call_test_issue29():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue29()

@app.route('/test_issue68', methods=['POST'])
def call_test_issue68():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue68()

@app.route('/test_issue156', methods=['POST'])
def call_test_issue156():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue156()

@app.route('/test_issue999', methods=['POST'])
def call_test_issue999():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue999()

@app.route('/test_dot_in_prefix', methods=['POST'])
def call_test_dot_in_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_dot_in_prefix()

@app.route('/test_model', methods=['POST'])
def call_test_model():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_model()

@app.route('/test_quoted_serialization', methods=['POST'])
def call_test_quoted_serialization():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_quoted_serialization()

@app.route('/test_parse', methods=['POST'])
def call_test_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse()

@app.route('/test_single_quoted_literals', methods=['POST'])
def call_test_single_quoted_literals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_single_quoted_literals()

@app.route('/test_empty_prefix', methods=['POST'])
def call_test_empty_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_empty_prefix()

@app.route('/test_exponents', methods=['POST'])
def call_test_exponents():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_exponents()

@app.route('/test_invalid_exponents', methods=['POST'])
def call_test_invalid_exponents():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_invalid_exponents()

@app.route('/test_skolem_genid_and_rdflibgenid', methods=['POST'])
def call_test_skolem_genid_and_rdflibgenid():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_skolem_genid_and_rdflibgenid()

@app.route('/test_sort_semiblank_graph', methods=['POST'])
def call_test_sort_semiblank_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sort_semiblank_graph()

@app.route('/test_turtle_final_dot', methods=['POST'])
def call_test_turtle_final_dot():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_turtle_final_dot()

@app.route('/test_turtle_bool_list', methods=['POST'])
def call_test_turtle_bool_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_turtle_bool_list()

@app.route('/test_unicode_escaping', methods=['POST'])
def call_test_unicode_escaping():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unicode_escaping()

@app.route('/test_turtle_valid_list', methods=['POST'])
def call_test_turtle_valid_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_turtle_valid_list()

@app.route('/test_turtle_namespace', methods=['POST'])
def call_test_turtle_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_turtle_namespace()

@app.route('/test_serialize_context', methods=['POST'])
def call_test_serialize_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input = request_json.get("input")
    

    return test_serialize_context(input)

@app.route('/test_longturtle', methods=['POST'])
def call_test_longturtle():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_longturtle()

@app.route('/test_serialize', methods=['POST'])
def call_test_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_serialize()

@app.route('/test_issue_250', methods=['POST'])
def call_test_issue_250():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_250()

@app.route('/test_implies', methods=['POST'])
def call_test_implies():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_implies()

@app.route('/test_merging', methods=['POST'])
def call_test_merging():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_merging()

@app.route('/test_single_simple_triple', methods=['POST'])
def call_test_single_simple_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_single_simple_triple()

@app.route('/test_implies_nothing', methods=['POST'])
def call_test_implies_nothing():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_implies_nothing()

@app.route('/test_rdf_type', methods=['POST'])
def call_test_rdf_type():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    tuple_index = request_json.get("tuple_index")
    
    is_keyword = request_json.get("is_keyword")
    

    return test_rdf_type(format, tuple_index, is_keyword)

@app.route('/simple_graph', methods=['POST'])
def call_simple_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return simple_graph()

@app.route('/simple_dataset', methods=['POST'])
def call_simple_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return simple_dataset()

@app.route('/test_serialize_to_purepath', methods=['POST'])
def call_test_serialize_to_purepath():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    

    return test_serialize_to_purepath(tmp_path, simple_graph)

@app.route('/test_serialize_to_path', methods=['POST'])
def call_test_serialize_to_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    

    return test_serialize_to_path(tmp_path, simple_graph)

@app.route('/test_serialize_to_neturl', methods=['POST'])
def call_test_serialize_to_neturl():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    simple_graph = request_json.get("simple_graph")
    

    return test_serialize_to_neturl(simple_graph)

@app.route('/test_serialize_to_fileurl', methods=['POST'])
def call_test_serialize_to_fileurl():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    

    return test_serialize_to_fileurl(tmp_path, simple_graph)

@app.route('/test_serialize_badformat', methods=['POST'])
def call_test_serialize_badformat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    simple_graph = request_json.get("simple_graph")
    

    return test_serialize_badformat(simple_graph)

@app.route('/narrow_dest_param', methods=['POST'])
def call_narrow_dest_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    param = request_json.get("param")
    

    return narrow_dest_param(param)

@app.route('/info_dict', methods=['POST'])
def call_info_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return info_dict(cls)

@app.route('/info', methods=['POST'])
def call_info():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return info()

@app.route('/set', methods=['POST'])
def call_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return set(cls)

@app.route('/serializer', methods=['POST'])
def call_serializer():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return serializer()

@app.route('/deserializer', methods=['POST'])
def call_deserializer():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return deserializer()

@app.route('/make', methods=['POST'])
def call_make():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return make(cls)

@app.route('/serdes_dict', methods=['POST'])
def call_serdes_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return serdes_dict()

@app.route('/test_all_serializers_specified', methods=['POST'])
def call_test_all_serializers_specified():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_all_serializers_specified()

@app.route('/make_serialize_parse_tests', methods=['POST'])
def call_make_serialize_parse_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_serialize_parse_tests()

@app.route('/test_serialize_parse', methods=['POST'])
def call_test_serialize_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    
    simple_dataset = request_json.get("simple_dataset")
    
    args = request_json.get("args")
    

    return test_serialize_parse(tmp_path, simple_graph, simple_dataset, args)

@app.route('/check_serialized', methods=['POST'])
def call_check_serialized():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    graph = request_json.get("graph")
    
    data = request_json.get("data")
    

    return check_serialized(format, graph, data)

@app.route('/dest_ref', methods=['POST'])
def call_dest_ref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return dest_ref()

@app.route('/dest_param', methods=['POST'])
def call_dest_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return dest_param()

@app.route('/test_serialize_overloads', methods=['POST'])
def call_test_serialize_overloads():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    
    destination_type = request_json.get("destination_type")
    
    serialize_function = request_json.get("serialize_function")
    

    return test_serialize_overloads(tmp_path, simple_graph, destination_type, serialize_function)

@app.route('/make_test_serialize_to_strdest_tests', methods=['POST'])
def call_make_test_serialize_to_strdest_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_test_serialize_to_strdest_tests()

@app.route('/test_serialize_to_strdest', methods=['POST'])
def call_test_serialize_to_strdest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    
    destination_type = request_json.get("destination_type")
    
    name_prefix = request_json.get("name_prefix")
    

    return test_serialize_to_strdest(tmp_path, simple_graph, destination_type, name_prefix)

@app.route('/test_serialize_to_fileuri_with_authortiy', methods=['POST'])
def call_test_serialize_to_fileuri_with_authortiy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    simple_graph = request_json.get("simple_graph")
    
    authority = request_json.get("authority")
    

    return test_serialize_to_fileuri_with_authortiy(tmp_path, simple_graph, authority)

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/test_serialize_and_reparse', methods=['POST'])
def call_test_serialize_and_reparse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_serialize_and_reparse()

@app.route('/test_multiple', methods=['POST'])
def call_test_multiple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_multiple()

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source_graph = request_json.get("source_graph")
    
    make_serializer = request_json.get("make_serializer")
    
    get_value = request_json.get("get_value")
    
    extra_args = request_json.get("extra_args")
    

    return serialize(source_graph, make_serializer, get_value, extra_args)

@app.route('/serialize_and_load', methods=['POST'])
def call_serialize_and_load():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source_graph = request_json.get("source_graph")
    
    make_serializer = request_json.get("make_serializer")
    

    return serialize_and_load(source_graph, make_serializer)

@app.route('/test_result_fragments', methods=['POST'])
def call_test_result_fragments():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_result_fragments()

@app.route('/test_result_fragments_with_base', methods=['POST'])
def call_test_result_fragments_with_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_result_fragments_with_base()

@app.route('/test_subclass_of_objects', methods=['POST'])
def call_test_subclass_of_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subclass_of_objects()

@app.route('/test_pretty_xmlliteral', methods=['POST'])
def call_test_pretty_xmlliteral():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_pretty_xmlliteral()

@app.route('/test_pretty_broken_xmlliteral', methods=['POST'])
def call_test_pretty_broken_xmlliteral():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_pretty_broken_xmlliteral()

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/test_serialize_and_reparse', methods=['POST'])
def call_test_serialize_and_reparse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_serialize_and_reparse()

@app.route('/test_multiple', methods=['POST'])
def call_test_multiple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_multiple()

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source_graph = request_json.get("source_graph")
    
    make_serializer = request_json.get("make_serializer")
    
    get_value = request_json.get("get_value")
    
    extra_args = request_json.get("extra_args")
    

    return serialize(source_graph, make_serializer, get_value, extra_args)

@app.route('/serialize_and_load', methods=['POST'])
def call_serialize_and_load():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source_graph = request_json.get("source_graph")
    
    make_serializer = request_json.get("make_serializer")
    

    return serialize_and_load(source_graph, make_serializer)

@app.route('/test_result_fragments', methods=['POST'])
def call_test_result_fragments():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_result_fragments()

@app.route('/test_result_fragments_with_base', methods=['POST'])
def call_test_result_fragments_with_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_result_fragments_with_base()

@app.route('/test_subslass_of_objects', methods=['POST'])
def call_test_subslass_of_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subslass_of_objects()

@app.route('/test_add_quad', methods=['POST'])
def call_test_add_quad():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_add_quad()

@app.route('/test_delete_quad', methods=['POST'])
def call_test_delete_quad():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_delete_quad()

@app.route('/test_diff_quad', methods=['POST'])
def call_test_diff_quad():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_diff_quad()

@app.route('/test_add_triple', methods=['POST'])
def call_test_add_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_add_triple()

@app.route('/test_delete_triple', methods=['POST'])
def call_test_delete_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_delete_triple()

@app.route('/test_diff_triple', methods=['POST'])
def call_test_diff_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_diff_triple()

@app.route('/test_diff_quad_overlap', methods=['POST'])
def call_test_diff_quad_overlap():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_diff_quad_overlap()

@app.route('/test_header_id', methods=['POST'])
def call_test_header_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_header_id()

@app.route('/test_prev_header', methods=['POST'])
def call_test_prev_header():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prev_header()

@app.route('/test_hext_graph', methods=['POST'])
def call_test_hext_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_hext_graph()

@app.route('/test_hext_cg', methods=['POST'])
def call_test_hext_cg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_hext_cg()

@app.route('/test_hext_dataset', methods=['POST'])
def call_test_hext_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_hext_dataset()

@app.route('/test_hext_json_representation', methods=['POST'])
def call_test_hext_json_representation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_hext_json_representation()

@app.route('/test_hext_dataset_linecount', methods=['POST'])
def call_test_hext_dataset_linecount():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_hext_dataset_linecount()

@app.route('/test_roundtrip', methods=['POST'])
def call_test_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_roundtrip()

@app.route('/test_finalnewline', methods=['POST'])
def call_test_finalnewline():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_finalnewline()

@app.route('/test_xmlwriter_namespaces', methods=['POST'])
def call_test_xmlwriter_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_xmlwriter_namespaces()

@app.route('/test_xmlwriter_decl', methods=['POST'])
def call_test_xmlwriter_decl():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_xmlwriter_decl()

@app.route('/test_xmlwriter_qname', methods=['POST'])
def call_test_xmlwriter_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return test_xmlwriter_qname(uri)

@app.route('/test_has_html5rdf', methods=['POST'])
def call_test_has_html5rdf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_has_html5rdf()

@app.route('/test_literal_construction', methods=['POST'])
def call_test_literal_construction():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    factory = request_json.get("factory")
    
    outcome = request_json.get("outcome")
    

    return test_literal_construction(factory, outcome)

@app.route('/uformat', methods=['POST'])
def call_uformat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return uformat(s)

@app.route('/test_subclass_name_appears_in_repr', methods=['POST'])
def call_test_subclass_name_appears_in_repr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subclass_name_appears_in_repr()

@app.route('/test_graceful_ordering', methods=['POST'])
def call_test_graceful_ordering():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graceful_ordering()

@app.route('/test_base64_values', methods=['POST'])
def call_test_base64_values():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_base64_values()

@app.route('/test_total_order', methods=['POST'])
def call_test_total_order():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_total_order()

@app.route('/test_literal_add', methods=['POST'])
def call_test_literal_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_literal_add()

@app.route('/test_is_valid_unicode', methods=['POST'])
def call_test_is_valid_unicode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_is_valid_unicode()

@app.route('/test_to_python_timedelta', methods=['POST'])
def call_test_to_python_timedelta():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_to_python_timedelta()

@app.route('/test_to_python_ym_duration', methods=['POST'])
def call_test_to_python_ym_duration():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_to_python_ym_duration()

@app.route('/test_to_python_ymdhms_duration', methods=['POST'])
def call_test_to_python_ymdhms_duration():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_to_python_ymdhms_duration()

@app.route('/test_equalityself', methods=['POST'])
def call_test_equalityself():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_equalityself()

@app.route('/test_duration_le', methods=['POST'])
def call_test_duration_le():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_duration_le()

@app.route('/test_duration_sum', methods=['POST'])
def call_test_duration_sum():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_duration_sum()

@app.route('/test_duration_sub_pos', methods=['POST'])
def call_test_duration_sub_pos():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_duration_sub_pos()

@app.route('/test_duration_sub_neg', methods=['POST'])
def call_test_duration_sub_neg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_duration_sub_neg()

@app.route('/test_int', methods=['POST'])
def call_test_int():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_int()

@app.route('/test_unicode', methods=['POST'])
def call_test_unicode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unicode()

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/test_a', methods=['POST'])
def call_test_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_a()

@app.route('/test_b', methods=['POST'])
def call_test_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_b()

@app.route('/test_c', methods=['POST'])
def call_test_c():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_c()

@app.route('/test_d', methods=['POST'])
def call_test_d():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_d()

@app.route('/test_e', methods=['POST'])
def call_test_e():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_e()

@app.route('/test_e2', methods=['POST'])
def call_test_e2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_e2()

@app.route('/test_f', methods=['POST'])
def call_test_f():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_f()

@app.route('/test_g', methods=['POST'])
def call_test_g():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_g()

@app.route('/test_h', methods=['POST'])
def call_test_h():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_h()

@app.route('/test_i', methods=['POST'])
def call_test_i():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_i()

@app.route('/test1', methods=['POST'])
def call_test1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test1()

@app.route('/test2', methods=['POST'])
def call_test2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test2()

@app.route('/test3', methods=['POST'])
def call_test3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test3()

@app.route('/test4', methods=['POST'])
def call_test4():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test4()

@app.route('/test_whitespace_is_collapsed_and_trailing_whitespace_is_stripped', methods=['POST'])
def call_test_whitespace_is_collapsed_and_trailing_whitespace_is_stripped():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_whitespace_is_collapsed_and_trailing_whitespace_is_stripped()

@app.route('/testPythonRoundtrip', methods=['POST'])
def call_testPythonRoundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testPythonRoundtrip()

@app.route('/testRDFXMLParse', methods=['POST'])
def call_testRDFXMLParse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testRDFXMLParse()

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/roundtrip', methods=['POST'])
def call_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    fmt = request_json.get("fmt")
    

    return roundtrip(fmt)

@app.route('/testRoundtrip', methods=['POST'])
def call_testRoundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testRoundtrip()

@app.route('/testHTML', methods=['POST'])
def call_testHTML():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testHTML()

@app.route('/test_eq', methods=['POST'])
def call_test_eq():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    values = request_json.get("values")
    
    equals = request_json.get("equals")
    

    return test_eq(values, equals)

@app.route('/test1', methods=['POST'])
def call_test1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test1()

@app.route('/test2', methods=['POST'])
def call_test2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test2()

@app.route('/test3', methods=['POST'])
def call_test3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test3()

@app.route('/test4', methods=['POST'])
def call_test4():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test4()

@app.route('/test_equality', methods=['POST'])
def call_test_equality():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_equality()

@app.route('/test_microseconds', methods=['POST'])
def call_test_microseconds():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_microseconds()

@app.route('/test_to_python', methods=['POST'])
def call_test_to_python():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_to_python()

@app.route('/test_timezone_z', methods=['POST'])
def call_test_timezone_z():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_timezone_z()

@app.route('/test_timezone_offset', methods=['POST'])
def call_test_timezone_offset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_timezone_offset()

@app.route('/test_timezone_offset_to_utc', methods=['POST'])
def call_test_timezone_offset_to_utc():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_timezone_offset_to_utc()

@app.route('/test_timezone_offset_millisecond', methods=['POST'])
def call_test_timezone_offset_millisecond():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_timezone_offset_millisecond()

@app.route('/clear_bindings', methods=['POST'])
def call_clear_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clear_bindings()

@app.route('/test_repr_apostrophe', methods=['POST'])
def call_test_repr_apostrophe():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_repr_apostrophe()

@app.route('/test_repr_quote', methods=['POST'])
def call_test_repr_quote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_repr_quote()

@app.route('/test_backslash', methods=['POST'])
def call_test_backslash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_backslash()

@app.route('/test_literal_from_bool', methods=['POST'])
def call_test_literal_from_bool():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_literal_from_bool()

@app.route('/test_cant_pass_invalid_lang', methods=['POST'])
def call_test_cant_pass_invalid_lang():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lang = request_json.get("lang")
    
    exception_type = request_json.get("exception_type")
    

    return test_cant_pass_invalid_lang(lang, exception_type)

@app.route('/test_ill_typed_literals', methods=['POST'])
def call_test_ill_typed_literals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lexical = request_json.get("lexical")
    
    datatype = request_json.get("datatype")
    
    is_ill_typed = request_json.get("is_ill_typed")
    

    return test_ill_typed_literals(lexical, datatype, is_ill_typed)

@app.route('/test_literal_addsub', methods=['POST'])
def call_test_literal_addsub():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    a = request_json.get("a")
    
    b = request_json.get("b")
    
    op = request_json.get("op")
    
    expected_result = request_json.get("expected_result")
    

    return test_literal_addsub(a, b, op, expected_result)

@app.route('/test_numeric_literals', methods=['POST'])
def call_test_numeric_literals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    a_value = request_json.get("a_value")
    
    b_value = request_json.get("b_value")
    
    result_value = request_json.get("result_value")
    
    datatype = request_json.get("datatype")
    

    return test_numeric_literals(a_value, b_value, result_value, datatype)

@app.route('/test_cant_pass_lang_and_datatype', methods=['POST'])
def call_test_cant_pass_lang_and_datatype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cant_pass_lang_and_datatype()

@app.route('/test_cant_pass_invalid_lang_int', methods=['POST'])
def call_test_cant_pass_invalid_lang_int():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cant_pass_invalid_lang_int()

@app.route('/test_from_other_literal', methods=['POST'])
def call_test_from_other_literal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_from_other_literal()

@app.route('/test_datatype_gets_auto_uri_ref_conversion', methods=['POST'])
def call_test_datatype_gets_auto_uri_ref_conversion():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datatype_gets_auto_uri_ref_conversion()

@app.route('/test_omits_missing_datatype_and_lang', methods=['POST'])
def call_test_omits_missing_datatype_and_lang():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_omits_missing_datatype_and_lang()

@app.route('/test_omits_missing_datatype', methods=['POST'])
def call_test_omits_missing_datatype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_omits_missing_datatype()

@app.route('/test_omits_missing_lang', methods=['POST'])
def call_test_omits_missing_lang():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_omits_missing_lang()

@app.route('/test_subclass_name_appears_in_repr', methods=['POST'])
def call_test_subclass_name_appears_in_repr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subclass_name_appears_in_repr()

@app.route('/test_no_dangling_point', methods=['POST'])
def call_test_no_dangling_point():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_dangling_point()

@app.route('/test_true_boolean', methods=['POST'])
def call_test_true_boolean():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_true_boolean()

@app.route('/test_false_boolean', methods=['POST'])
def call_test_false_boolean():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_false_boolean()

@app.route('/test_non_false_boolean', methods=['POST'])
def call_test_non_false_boolean():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_non_false_boolean()

@app.route('/test_binding', methods=['POST'])
def call_test_binding():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    clear_bindings = request_json.get("clear_bindings")
    

    return test_binding(clear_bindings)

@app.route('/test_specific_binding', methods=['POST'])
def call_test_specific_binding():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    clear_bindings = request_json.get("clear_bindings")
    

    return test_specific_binding(clear_bindings)

@app.route('/test_literal_construction_value_class', methods=['POST'])
def call_test_literal_construction_value_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lexical = request_json.get("lexical")
    
    literal_type = request_json.get("literal_type")
    
    value_cls = request_json.get("value_cls")
    

    return test_literal_construction_value_class(lexical, literal_type, value_cls)

@app.route('/test_exception_in_converter', methods=['POST'])
def call_test_exception_in_converter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    caplog = request_json.get("caplog")
    
    clear_bindings = request_json.get("clear_bindings")
    

    return test_exception_in_converter(caplog, clear_bindings)

@app.route('/test_literal_construction', methods=['POST'])
def call_test_literal_construction():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    literal_maker = request_json.get("literal_maker")
    
    outcome = request_json.get("outcome")
    

    return test_literal_construction(literal_maker, outcome)

@app.route('/test_global_normalize', methods=['POST'])
def call_test_global_normalize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    literal_maker = request_json.get("literal_maker")
    
    normalize_literals = request_json.get("normalize_literals")
    
    outcome = request_json.get("outcome")
    

    return test_global_normalize(literal_maker, normalize_literals, outcome)

@app.route('/pt', methods=['POST'])
def call_pt():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ts = request_json.get("ts")
    

    return pt(ts)

@app.route('/test_1', methods=['POST'])
def call_test_1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_1()

@app.route('/test_reading_from_path_object', methods=['POST'])
def call_test_reading_from_path_object():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_reading_from_path_object()

@app.route('/test_parse_with_skolemize_triples', methods=['POST'])
def call_test_parse_with_skolemize_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    data_format = request_json.get("data_format")
    
    expected_data = request_json.get("expected_data")
    
    expected_data_format = request_json.get("expected_data_format")
    

    return test_parse_with_skolemize_triples(data, data_format, expected_data, expected_data_format)

@app.route('/test_parse_with_skolemize_quads', methods=['POST'])
def call_test_parse_with_skolemize_quads():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    data_format = request_json.get("data_format")
    
    expected_data = request_json.get("expected_data")
    
    expected_data_format = request_json.get("expected_data_format")
    
    anonymous_graph_name = request_json.get("anonymous_graph_name")
    

    return test_parse_with_skolemize_quads(data, data_format, expected_data, expected_data_format, anonymous_graph_name)

@app.route('/xfail_broken_parse_data', methods=['POST'])
def call_xfail_broken_parse_data():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return xfail_broken_parse_data(request)

@app.route('/test_n3_serializer_roundtrip', methods=['POST'])
def call_test_n3_serializer_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    testfile = request_json.get("testfile")
    

    return test_n3_serializer_roundtrip(testfile)

@app.route('/test_named_and_anonymous_graph_roundtrip', methods=['POST'])
def call_test_named_and_anonymous_graph_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_named_and_anonymous_graph_roundtrip()

@app.route('/test_small_string', methods=['POST'])
def call_test_small_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_small_string()

@app.route('/test_small_bytes_string', methods=['POST'])
def call_test_small_bytes_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_small_bytes_string()

@app.route('/test_small_string_cg', methods=['POST'])
def call_test_small_string_cg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_small_string_cg()

@app.route('/test_small_file_singlegraph', methods=['POST'])
def call_test_small_file_singlegraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_small_file_singlegraph()

@app.route('/test_small_file_multigraph', methods=['POST'])
def call_test_small_file_multigraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_small_file_multigraph()

@app.route('/test_small_file_multigraph_cg', methods=['POST'])
def call_test_small_file_multigraph_cg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_small_file_multigraph_cg()

@app.route('/test_roundtrip', methods=['POST'])
def call_test_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_roundtrip()

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/teardown_method', methods=['POST'])
def call_teardown_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return teardown_method()

@app.route('/testAperture', methods=['POST'])
def call_testAperture():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testAperture()

@app.route('/testSpec', methods=['POST'])
def call_testSpec():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testSpec()

@app.route('/testNG4j', methods=['POST'])
def call_testNG4j():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testNG4j()

@app.route('/parse_identifier', methods=['POST'])
def call_parse_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier_string = request_json.get("identifier_string")
    
    format = request_json.get("format")
    

    return parse_identifier(identifier_string, format)

@app.route('/parse_n3_identifier', methods=['POST'])
def call_parse_n3_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier_string = request_json.get("identifier_string")
    
    format = request_json.get("format")
    

    return parse_n3_identifier(identifier_string, format)

@app.route('/make_literal_tests', methods=['POST'])
def call_make_literal_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_literal_tests()

@app.route('/test_literals', methods=['POST'])
def call_test_literals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format_name = request_json.get("format_name")
    
    expected_literal = request_json.get("expected_literal")
    
    literal_string = request_json.get("literal_string")
    
    parse_function = request_json.get("parse_function")
    

    return test_literals(format_name, expected_literal, literal_string, parse_function)

@app.route('/test_01', methods=['POST'])
def call_test_01():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_01()

@app.route('/test_02', methods=['POST'])
def call_test_02():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_02()

@app.route('/test_03', methods=['POST'])
def call_test_03():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_03()

@app.route('/test_04', methods=['POST'])
def call_test_04():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_04()

@app.route('/test_05', methods=['POST'])
def call_test_05():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_05()

@app.route('/test_06', methods=['POST'])
def call_test_06():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_06()

@app.route('/test_07', methods=['POST'])
def call_test_07():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_07()

@app.route('/test_08', methods=['POST'])
def call_test_08():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_08()

@app.route('/test_09', methods=['POST'])
def call_test_09():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_09()

@app.route('/test_10', methods=['POST'])
def call_test_10():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_10()

@app.route('/test_11', methods=['POST'])
def call_test_11():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_11()

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/teardown_method', methods=['POST'])
def call_teardown_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return teardown_method()

@app.route('/testNoPathWithHash', methods=['POST'])
def call_testNoPathWithHash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testNoPathWithHash()

@app.route('/test_issue_1228_a', methods=['POST'])
def call_test_issue_1228_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1228_a()

@app.route('/test_issue_1228_b', methods=['POST'])
def call_test_issue_1228_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1228_b()

@app.route('/test_issue_806', methods=['POST'])
def call_test_issue_806():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_806()

@app.route('/generictest', methods=['POST'])
def call_generictest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    

    return generictest(e)

@app.route('/dir_to_uri', methods=['POST'])
def call_dir_to_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    directory = request_json.get("directory")
    
    sep = request_json.get("sep")
    

    return dir_to_uri(directory, sep)

@app.route('/get_cases', methods=['POST'])
def call_get_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_cases()

@app.route('/test_cases', methods=['POST'])
def call_test_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    gt = request_json.get("gt")
    
    envelope = request_json.get("envelope")
    

    return test_cases(gt, envelope)

@app.route('/test_01_simple_open', methods=['POST'])
def call_test_01_simple_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_01_simple_open()

@app.route('/test_02_contexts', methods=['POST'])
def call_test_02_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_02_contexts()

@app.route('/test_03_get_value', methods=['POST'])
def call_test_03_get_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_03_get_value()

@app.route('/test_context_is_optional', methods=['POST'])
def call_test_context_is_optional():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_context_is_optional()

@app.route('/test_serialize', methods=['POST'])
def call_test_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_serialize()

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    method = request_json.get("method")
    

    return setup_method(method)

@app.route('/teardown_method', methods=['POST'])
def call_teardown_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    method = request_json.get("method")
    

    return teardown_method(method)

@app.route('/test_parse_shared_bnode_context', methods=['POST'])
def call_test_parse_shared_bnode_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_shared_bnode_context()

@app.route('/test_parse_shared_bnode_context_same_graph', methods=['POST'])
def call_test_parse_shared_bnode_context_same_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_shared_bnode_context_same_graph()

@app.route('/test_parse_distinct_bnode_context', methods=['POST'])
def call_test_parse_distinct_bnode_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_distinct_bnode_context()

@app.route('/test_parse_distinct_bnode_contexts_between_graphs', methods=['POST'])
def call_test_parse_distinct_bnode_contexts_between_graphs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_distinct_bnode_contexts_between_graphs()

@app.route('/test_parse_distinct_bnode_contexts_named_graphs', methods=['POST'])
def call_test_parse_distinct_bnode_contexts_named_graphs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_distinct_bnode_contexts_named_graphs()

@app.route('/test_parse_shared_bnode_contexts_named_graphs', methods=['POST'])
def call_test_parse_shared_bnode_contexts_named_graphs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_shared_bnode_contexts_named_graphs()

@app.route('/test_parser_structure', methods=['POST'])
def call_test_parser_structure():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parser_structure()

@app.route('/test_empty_base_ref', methods=['POST'])
def call_test_empty_base_ref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_empty_base_ref()

@app.route('/test_relative_base_ref', methods=['POST'])
def call_test_relative_base_ref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_relative_base_ref()

@app.route('/test_collection_rdfxml', methods=['POST'])
def call_test_collection_rdfxml():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_collection_rdfxml()

@app.route('/test_false_element', methods=['POST'])
def call_test_false_element():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_false_element()

@app.route('/module_names', methods=['POST'])
def call_module_names():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path = request_json.get("path")
    
    names = request_json.get("names")
    
    parent = request_json.get("parent")
    

    return module_names(path, names, parent)

@app.route('/test_module_names', methods=['POST'])
def call_test_module_names():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_module_names()

@app.route('/with_attrs', methods=['POST'])
def call_with_attrs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    object = request_json.get("object")
    

    return with_attrs(object)

@app.route('/generate_make_redirect_request_cases', methods=['POST'])
def call_generate_make_redirect_request_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return generate_make_redirect_request_cases()

@app.route('/test_make_redirect_request', methods=['POST'])
def call_test_make_redirect_request():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    http_request = request_json.get("http_request")
    
    http_error = request_json.get("http_error")
    
    expected_result = request_json.get("expected_result")
    
    expected_redirect_dict = request_json.get("expected_redirect_dict")
    

    return test_make_redirect_request(http_request, http_error, expected_result, expected_redirect_dict)

@app.route('/test_empty_arguments', methods=['POST'])
def call_test_empty_arguments():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_empty_arguments()

@app.route('/test_too_many_arguments', methods=['POST'])
def call_test_too_many_arguments():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_too_many_arguments()

@app.route('/from_path', methods=['POST'])
def call_from_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path = request_json.get("path")
    

    return from_path(path)

@app.route('/call_create_input_source', methods=['POST'])
def call_call_create_input_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input = request_json.get("input")
    
    source_param = request_json.get("source_param")
    
    public_id = request_json.get("public_id")
    
    location_param = request_json.get("location_param")
    
    file_param = request_json.get("file_param")
    
    data_param = request_json.get("data_param")
    
    format = request_json.get("format")
    

    return call_create_input_source(input, source_param, public_id, location_param, file_param, data_param, format)

@app.route('/check', methods=['POST'])
def call_check():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    params = request_json.get("params")
    
    input_path = request_json.get("input_path")
    
    input_source = request_json.get("input_source")
    

    return check(params, input_path, input_source)

@app.route('/type_from_param', methods=['POST'])
def call_type_from_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    param = request_json.get("param")
    

    return type_from_param(cls, param)

@app.route('/as_tuple', methods=['POST'])
def call_as_tuple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return as_tuple()

@app.route('/input_param', methods=['POST'])
def call_input_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return input_param()

@app.route('/requires_http', methods=['POST'])
def call_requires_http():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return requires_http()

@app.route('/as_pytest_param', methods=['POST'])
def call_as_pytest_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    marks = request_json.get("marks")
    
    id = request_json.get("id")
    

    return as_pytest_param(marks, id)

@app.route('/generate_create_input_source_cases', methods=['POST'])
def call_generate_create_input_source_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return generate_create_input_source_cases()

@app.route('/test_create_input_source', methods=['POST'])
def call_test_create_input_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_params = request_json.get("test_params")
    
    http_file_server = request_json.get("http_file_server")
    

    return test_create_input_source(test_params, http_file_server)

@app.route('/test_bytesio_wrapper', methods=['POST'])
def call_test_bytesio_wrapper():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bytesio_wrapper()

@app.route('/test_properties', methods=['POST'])
def call_test_properties():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return test_properties(rdfs_graph)

@app.route('/del_key', methods=['POST'])
def call_del_key():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    d = request_json.get("d")
    
    key = request_json.get("key")
    

    return del_key(d, key)

@app.route('/ctx_plugin', methods=['POST'])
def call_ctx_plugin():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    plugin_src = request_json.get("plugin_src")
    

    return ctx_plugin(tmp_path, plugin_src)

@app.route('/ctx_cleaners', methods=['POST'])
def call_ctx_cleaners():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return ctx_cleaners()

@app.route('/test_sparqleval', methods=['POST'])
def call_test_sparqleval():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    no_cover = request_json.get("no_cover")
    

    return test_sparqleval(tmp_path, no_cover)

@app.route('/test_parser', methods=['POST'])
def call_test_parser():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    no_cover = request_json.get("no_cover")
    

    return test_parser(tmp_path, no_cover)

@app.route('/test_path_div_future', methods=['POST'])
def call_test_path_div_future():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_path_div_future()

@app.route('/test_default', methods=['POST'])
def call_test_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    

    return test_default(tmp_path)

@app.route('/generate_make_block_file_cases', methods=['POST'])
def call_generate_make_block_file_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return generate_make_block_file_cases()

@app.route('/test_block_file', methods=['POST'])
def call_test_block_file():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    audit_hook_dispatcher = request_json.get("audit_hook_dispatcher")
    
    http_file_server = request_json.get("http_file_server")
    
    exit_stack = request_json.get("exit_stack")
    
    defence = request_json.get("defence")
    
    uri_kind = request_json.get("uri_kind")
    

    return test_block_file(tmp_path, audit_hook_dispatcher, http_file_server, exit_stack, defence, uri_kind)

@app.route('/test_scenario', methods=['POST'])
def call_test_scenario():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_scenario()

@app.route('/test_empty_list', methods=['POST'])
def call_test_empty_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_empty_list()

@app.route('/test', methods=['POST'])
def call_test():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test()

@app.route('/test_guess_format', methods=['POST'])
def call_test_guess_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_guess_format()

@app.route('/test_jsonld', methods=['POST'])
def call_test_jsonld():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_jsonld()

@app.route('/test_ttl', methods=['POST'])
def call_test_ttl():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_ttl()

@app.route('/test_n3', methods=['POST'])
def call_test_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_n3()

@app.route('/test_warning', methods=['POST'])
def call_test_warning():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    caplog = request_json.get("caplog")
    

    return test_warning(caplog)

@app.route('/test_unicode', methods=['POST'])
def call_test_unicode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unicode()

@app.route('/subscribe_to', methods=['POST'])
def call_subscribe_to():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    target = request_json.get("target")
    

    return subscribe_to(source, target)

@app.route('/subscribe_all', methods=['POST'])
def call_subscribe_all():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    caches = request_json.get("caches")
    

    return subscribe_all(caches)

@app.route('/testEvents', methods=['POST'])
def call_testEvents():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testEvents()

@app.route('/bnode_uuid', methods=['POST'])
def call_bnode_uuid():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return bnode_uuid()

@app.route('/is_ncname', methods=['POST'])
def call_is_ncname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    value = request_json.get("value")
    

    return is_ncname(value)

@app.route('/fetch', methods=['POST'])
def call_fetch():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    

    return fetch(tmp_path)

@app.route('/run', methods=['POST'])
def call_run():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    args = request_json.get("args")
    

    return run(args)

@app.route('/handle', methods=['POST'])
def call_handle():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    parse_result = request_json.get("parse_result")
    

    return handle(parse_result)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/populate_graph', methods=['POST'])
def call_populate_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return populate_graph(graph)

@app.route('/populate_graph', methods=['POST'])
def call_populate_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return populate_graph(graph)

@app.route('/populate_graph', methods=['POST'])
def call_populate_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return populate_graph(graph)

@app.route('/populate_graph', methods=['POST'])
def call_populate_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return populate_graph(graph)

@app.route('/trix', methods=['POST'])
def call_trix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test = request_json.get("test")
    

    return trix(test)

@app.route('/test_manifest', methods=['POST'])
def call_test_manifest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdf_test_uri = request_json.get("rdf_test_uri")
    
    type = request_json.get("type")
    
    rdf_test = request_json.get("rdf_test")
    

    return test_manifest(rdf_test_uri, type, rdf_test)

@app.route('/add_stuff', methods=['POST'])
def call_add_stuff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_stuff(graph)

@app.route('/test_unique_subjects', methods=['POST'])
def call_test_unique_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subjects()

@app.route('/test_unique_predicates', methods=['POST'])
def call_test_unique_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_predicates()

@app.route('/test_unique_objects', methods=['POST'])
def call_test_unique_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_objects()

@app.route('/test_unique_subject_predicates', methods=['POST'])
def call_test_unique_subject_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subject_predicates()

@app.route('/test_unique_predicate_objects', methods=['POST'])
def call_test_unique_predicate_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_predicate_objects()

@app.route('/test_unique_subject_objects', methods=['POST'])
def call_test_unique_subject_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subject_objects()

@app.route('/test_parse_berners_lee_card_into_conjunctivegraph_default', methods=['POST'])
def call_test_parse_berners_lee_card_into_conjunctivegraph_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_berners_lee_card_into_conjunctivegraph_default()

@app.route('/test_parse_berners_lee_card_into_named_graph', methods=['POST'])
def call_test_parse_berners_lee_card_into_named_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_berners_lee_card_into_named_graph()

@app.route('/test_bnode_publicid', methods=['POST'])
def call_test_bnode_publicid():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_publicid()

@app.route('/test_quad_contexts', methods=['POST'])
def call_test_quad_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_quad_contexts()

@app.route('/test_context_namespaces', methods=['POST'])
def call_test_context_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_context_namespaces()

@app.route('/test_deprecated', methods=['POST'])
def call_test_deprecated():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_deprecated()

@app.route('/get_graph_ids_tests', methods=['POST'])
def call_get_graph_ids_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_graph_ids_tests()

@app.route('/test_graph_ids', methods=['POST'])
def call_test_graph_ids():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    kws = request_json.get("kws")
    

    return test_graph_ids(checker, kws)

@app.route('/test_operators_with_conjunctivegraph_and_graph', methods=['POST'])
def call_test_operators_with_conjunctivegraph_and_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_operators_with_conjunctivegraph_and_graph()

@app.route('/test_reversed_operators_with_conjunctivegraph_and_graph', methods=['POST'])
def call_test_reversed_operators_with_conjunctivegraph_and_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_reversed_operators_with_conjunctivegraph_and_graph()

@app.route('/test_reversed_operators_with_conjunctivegraph_with_contexts_and_graph', methods=['POST'])
def call_test_reversed_operators_with_conjunctivegraph_with_contexts_and_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_reversed_operators_with_conjunctivegraph_with_contexts_and_graph()

@app.route('/test_operators_with_two_conjunctivegraphs', methods=['POST'])
def call_test_operators_with_two_conjunctivegraphs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_operators_with_two_conjunctivegraphs()

@app.route('/test_operators_with_two_conjunctivegraphs_one_with_contexts', methods=['POST'])
def call_test_operators_with_two_conjunctivegraphs_one_with_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_operators_with_two_conjunctivegraphs_one_with_contexts()

@app.route('/test_operators_returning_correct_type', methods=['POST'])
def call_test_operators_returning_correct_type():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_operators_returning_correct_type()

@app.route('/path_source_data', methods=['POST'])
def call_path_source_data():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return path_source_data()

@app.route('/test_parse_shacl_path', methods=['POST'])
def call_test_parse_shacl_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path_source_data = request_json.get("path_source_data")
    
    resource = request_json.get("resource")
    
    expected = request_json.get("expected")
    

    return test_parse_shacl_path(path_source_data, resource, expected)

@app.route('/test_build_shacl_path', methods=['POST'])
def call_test_build_shacl_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path_source_data = request_json.get("path_source_data")
    
    resource = request_json.get("resource")
    
    path = request_json.get("path")
    

    return test_build_shacl_path(path_source_data, resource, path)

@app.route('/test_rdflib_to_networkx', methods=['POST'])
def call_test_rdflib_to_networkx():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_rdflib_to_networkx()

@app.route('/test_rdflib_to_graphtool', methods=['POST'])
def call_test_rdflib_to_graphtool():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_rdflib_to_graphtool()

@app.route('/test_infix_operators_dunders', methods=['POST'])
def call_test_infix_operators_dunders():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_infix_operators_dunders()

@app.route('/test_infix_operators', methods=['POST'])
def call_test_infix_operators():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_infix_operators()

@app.route('/test_generateqname', methods=['POST'])
def call_test_generateqname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname()

@app.route('/test_classorterm', methods=['POST'])
def call_test_classorterm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_classorterm()

@app.route('/test_getidentifiedclasses', methods=['POST'])
def call_test_getidentifiedclasses():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_getidentifiedclasses()

@app.route('/test_common_ns_bindings', methods=['POST'])
def call_test_common_ns_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_common_ns_bindings()

@app.route('/test_allclasses', methods=['POST'])
def call_test_allclasses():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_allclasses()

@app.route('/test_check_allclasses', methods=['POST'])
def call_test_check_allclasses():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_check_allclasses()

@app.route('/test_check_allproperties', methods=['POST'])
def call_test_check_allproperties():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_check_allproperties()

@app.route('/test_classnamespacefactory', methods=['POST'])
def call_test_classnamespacefactory():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_classnamespacefactory()

@app.route('/test_componentterms', methods=['POST'])
def call_test_componentterms():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_componentterms()

@app.route('/test_componentterms_extended', methods=['POST'])
def call_test_componentterms_extended():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_componentterms_extended()

@app.route('/test_raise_malformedclasserror', methods=['POST'])
def call_test_raise_malformedclasserror():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_raise_malformedclasserror()

@app.route('/test_owlrdfproxylist', methods=['POST'])
def call_test_owlrdfproxylist():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_owlrdfproxylist()

@app.route('/test_deepclassclear', methods=['POST'])
def call_test_deepclassclear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_deepclassclear()

@app.route('/test_booleanclassextenthelper', methods=['POST'])
def call_test_booleanclassextenthelper():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_booleanclassextenthelper()

@app.route('/test_changeoperator', methods=['POST'])
def call_test_changeoperator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_changeoperator()

@app.route('/test_cardinality_zero', methods=['POST'])
def call_test_cardinality_zero():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cardinality_zero()

@app.route('/test_textual_infix_operators', methods=['POST'])
def call_test_textual_infix_operators():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_textual_infix_operators()

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_booleanclass_operator_as_none', methods=['POST'])
def call_test_booleanclass_operator_as_none():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_booleanclass_operator_as_none(graph)

@app.route('/test_booleanclass_operator_as_none_with_intersection', methods=['POST'])
def call_test_booleanclass_operator_as_none_with_intersection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_booleanclass_operator_as_none_with_intersection(graph)

@app.route('/test_booleanclass_default_and_operator', methods=['POST'])
def call_test_booleanclass_default_and_operator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_booleanclass_default_and_operator(graph)

@app.route('/test_booleanclass_with_or_operator', methods=['POST'])
def call_test_booleanclass_with_or_operator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_booleanclass_with_or_operator(graph)

@app.route('/test_getintersections', methods=['POST'])
def call_test_getintersections():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_getintersections(graph)

@app.route('/test_getunions', methods=['POST'])
def call_test_getunions():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_getunions(graph)

@app.route('/test_booleanclass_copy', methods=['POST'])
def call_test_booleanclass_copy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_booleanclass_copy(graph)

@app.route('/test_booleanclass_serialize', methods=['POST'])
def call_test_booleanclass_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_booleanclass_serialize(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_context', methods=['POST'])
def call_test_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_context(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_manchester_syntax', methods=['POST'])
def call_test_manchester_syntax():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_manchester_syntax(graph)

@app.route('/test_manchester_syntax_parse_with_transientlist', methods=['POST'])
def call_test_manchester_syntax_parse_with_transientlist():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_manchester_syntax_parse_with_transientlist(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_property', methods=['POST'])
def call_test_property():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_property(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_componentterms_restriction', methods=['POST'])
def call_test_componentterms_restriction():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_componentterms_restriction()

@app.route('/test_componentterms_booleanclass', methods=['POST'])
def call_test_componentterms_booleanclass():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_componentterms_booleanclass(graph)

@app.route('/test_componentterms_booleanclass_bnodeid', methods=['POST'])
def call_test_componentterms_booleanclass_bnodeid():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_componentterms_booleanclass_bnodeid(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_class_instantiation', methods=['POST'])
def call_test_class_instantiation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_class_instantiation(graph)

@app.route('/test_class_hash', methods=['POST'])
def call_test_class_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_class_hash()

@app.route('/test_class_and', methods=['POST'])
def call_test_class_and():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_class_and(graph)

@app.route('/test_class_getparents', methods=['POST'])
def call_test_class_getparents():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_class_getparents(graph)

@app.route('/test_class_serialize', methods=['POST'])
def call_test_class_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_class_serialize(graph)

@app.route('/test_class_nameislabel', methods=['POST'])
def call_test_class_nameislabel():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_class_nameislabel()

@app.route('/test_class_nameisnotlabel', methods=['POST'])
def call_test_class_nameisnotlabel():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_class_nameisnotlabel()

@app.route('/test_generateqname_using_conjunctivegraph', methods=['POST'])
def call_test_generateqname_using_conjunctivegraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname_using_conjunctivegraph()

@app.route('/test_generateqname_using_dataset', methods=['POST'])
def call_test_generateqname_using_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname_using_dataset()

@app.route('/test_generateqname_using_graph', methods=['POST'])
def call_test_generateqname_using_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname_using_graph()

@app.route('/test_generateqname_using_graph_and_uriref', methods=['POST'])
def call_test_generateqname_using_graph_and_uriref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname_using_graph_and_uriref()

@app.route('/test_generateqname_using_graph_and_bnode', methods=['POST'])
def call_test_generateqname_using_graph_and_bnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname_using_graph_and_bnode()

@app.route('/test_generateqname_using_graph_and_property', methods=['POST'])
def call_test_generateqname_using_graph_and_property():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_generateqname_using_graph_and_property()

@app.route('/test_class_or_term', methods=['POST'])
def call_test_class_or_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_class_or_term()

@app.route('/test_property_or_identifier', methods=['POST'])
def call_test_property_or_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_property_or_identifier()

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_restriction_str_and_hash', methods=['POST'])
def call_test_restriction_str_and_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_str_and_hash(graph)

@app.route('/test_restriction_range', methods=['POST'])
def call_test_restriction_range():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_range(graph)

@app.route('/test_restriction_onproperty', methods=['POST'])
def call_test_restriction_onproperty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_onproperty(graph)

@app.route('/test_restriction_inputs_bnode', methods=['POST'])
def call_test_restriction_inputs_bnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_inputs_bnode(graph)

@app.route('/test_restriction_inputs_with_identifier', methods=['POST'])
def call_test_restriction_inputs_with_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_inputs_with_identifier(graph)

@app.route('/test_restriction_allvalues', methods=['POST'])
def call_test_restriction_allvalues():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_allvalues(graph)

@app.route('/test_restriction_somevalues', methods=['POST'])
def call_test_restriction_somevalues():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_somevalues(graph)

@app.route('/test_restriction_hasvalue', methods=['POST'])
def call_test_restriction_hasvalue():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_hasvalue(graph)

@app.route('/test_restriction_cardinality', methods=['POST'])
def call_test_restriction_cardinality():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_cardinality(graph)

@app.route('/test_restriction_cardinality_value', methods=['POST'])
def call_test_restriction_cardinality_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_cardinality_value(graph)

@app.route('/test_restriction_cardinality_set_value', methods=['POST'])
def call_test_restriction_cardinality_set_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_cardinality_set_value(graph)

@app.route('/test_restriction_maxcardinality', methods=['POST'])
def call_test_restriction_maxcardinality():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_maxcardinality(graph)

@app.route('/test_restriction_mincardinality', methods=['POST'])
def call_test_restriction_mincardinality():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_mincardinality(graph)

@app.route('/test_restriction_kind', methods=['POST'])
def call_test_restriction_kind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_restriction_kind(graph)

@app.route('/test_deleted_restriction_kind', methods=['POST'])
def call_test_deleted_restriction_kind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_deleted_restriction_kind(graph)

@app.route('/test_omitted_restriction_kind', methods=['POST'])
def call_test_omitted_restriction_kind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_omitted_restriction_kind(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_annotatableterms_comment_gettersetter', methods=['POST'])
def call_test_annotatableterms_comment_gettersetter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_annotatableterms_comment_gettersetter(graph)

@app.route('/test_annotatableterms_seealso_gettersetter', methods=['POST'])
def call_test_annotatableterms_seealso_gettersetter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_annotatableterms_seealso_gettersetter(graph)

@app.route('/test_annotatableterms_label_gettersetter', methods=['POST'])
def call_test_annotatableterms_label_gettersetter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_annotatableterms_label_gettersetter(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_enumerated_class', methods=['POST'])
def call_test_enumerated_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_enumerated_class(graph)

@app.route('/test_enumerated_class_serialize', methods=['POST'])
def call_test_enumerated_class_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_enumerated_class_serialize(graph)

@app.route('/test_lshift_rlshift_delimiters', methods=['POST'])
def call_test_lshift_rlshift_delimiters():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_lshift_rlshift_delimiters()

@app.route('/test_matmul_rmatmul_delimiters', methods=['POST'])
def call_test_matmul_rmatmul_delimiters():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_matmul_rmatmul_delimiters()

@app.route('/test_infixowl_serialization', methods=['POST'])
def call_test_infixowl_serialization():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_infixowl_serialization()

@app.route('/test_infix_owl_example1', methods=['POST'])
def call_test_infix_owl_example1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_infix_owl_example1()

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_infixowl_individual_type', methods=['POST'])
def call_test_infixowl_individual_type():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_infixowl_individual_type(graph)

@app.route('/test_infixowl_individual_label', methods=['POST'])
def call_test_infixowl_individual_label():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_infixowl_individual_label(graph)

@app.route('/test_individual_type_settergetter', methods=['POST'])
def call_test_individual_type_settergetter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_individual_type_settergetter(graph)

@app.route('/test_individual_identity__settergetter', methods=['POST'])
def call_test_individual_identity__settergetter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_individual_identity__settergetter(graph)

@app.route('/test_individual_sameas__settergetter', methods=['POST'])
def call_test_individual_sameas__settergetter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_individual_sameas__settergetter(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_logic_structuring', methods=['POST'])
def call_test_logic_structuring():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_logic_structuring(graph)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_ontology_instantiation', methods=['POST'])
def call_test_ontology_instantiation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_ontology_instantiation(graph)

@app.route('/test_ontology_instantiation_exists_in_graph', methods=['POST'])
def call_test_ontology_instantiation_exists_in_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_ontology_instantiation_exists_in_graph(graph)

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    method = request_json.get("method")
    

    return setup_method(method)

@app.route('/test_repr', methods=['POST'])
def call_test_repr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_repr()

@app.route('/test_str', methods=['POST'])
def call_test_str():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_str()

@app.route('/test_member', methods=['POST'])
def call_test_member():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_member()

@app.route('/test_dcterms_title', methods=['POST'])
def call_test_dcterms_title():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_dcterms_title()

@app.route('/test_iri', methods=['POST'])
def call_test_iri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_iri()

@app.route('/test_repr_ef', methods=['POST'])
def call_test_repr_ef():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_repr_ef()

@app.route('/test_missing_member', methods=['POST'])
def call_test_missing_member():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_missing_member()

@app.route('/test_format', methods=['POST'])
def call_test_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_format()

@app.route('/test_invalid_uri', methods=['POST'])
def call_test_invalid_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    invalid_uri = request_json.get("invalid_uri")
    

    return test_invalid_uri(invalid_uri)

@app.route('/test_compute_qname', methods=['POST'])
def call_test_compute_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_compute_qname()

@app.route('/test_reset', methods=['POST'])
def call_test_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_reset()

@app.route('/test_reset_preserve_prefixes', methods=['POST'])
def call_test_reset_preserve_prefixes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_reset_preserve_prefixes()

@app.route('/test_n3', methods=['POST'])
def call_test_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_n3()

@app.route('/test_n32', methods=['POST'])
def call_test_n32():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_n32()

@app.route('/test_closed_namespace', methods=['POST'])
def call_test_closed_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_closed_namespace()

@app.route('/test_contains_method', methods=['POST'])
def call_test_contains_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_contains_method()

@app.route('/test_expand_curie_exception_messages', methods=['POST'])
def call_test_expand_curie_exception_messages():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_expand_curie_exception_messages()

@app.route('/test_expand_curie', methods=['POST'])
def call_test_expand_curie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    curie = request_json.get("curie")
    
    expected_result = request_json.get("expected_result")
    

    return test_expand_curie(curie, expected_result)

@app.route('/test_definednamespace_creator_qb', methods=['POST'])
def call_test_definednamespace_creator_qb():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_qb()

@app.route('/test_definednamespace_creator_fake', methods=['POST'])
def call_test_definednamespace_creator_fake():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_fake()

@app.route('/test_definednamespace_creator_bad_ns', methods=['POST'])
def call_test_definednamespace_creator_bad_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_bad_ns()

@app.route('/test_definednamespace_dir', methods=['POST'])
def call_test_definednamespace_dir():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_dir()

@app.route('/test_definednamespace_jsonld_context', methods=['POST'])
def call_test_definednamespace_jsonld_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_jsonld_context()

@app.route('/get_dfns_info', methods=['POST'])
def call_get_dfns_info():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    

    return get_dfns_info(dfns)

@app.route('/dfns', methods=['POST'])
def call_dfns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return dfns(request)

@app.route('/test_repr', methods=['POST'])
def call_test_repr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    

    return test_repr(dfns)

@app.route('/test_inspect', methods=['POST'])
def call_test_inspect():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    

    return test_inspect(dfns)

@app.route('/test_value', methods=['POST'])
def call_test_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    
    attr_name = request_json.get("attr_name")
    
    is_defined = request_json.get("is_defined")
    

    return test_value(dfns, attr_name, is_defined)

@app.route('/test_contains', methods=['POST'])
def call_test_contains():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    
    attr_name = request_json.get("attr_name")
    
    is_defined = request_json.get("is_defined")
    

    return test_contains(dfns, attr_name, is_defined)

@app.route('/test_hasattr', methods=['POST'])
def call_test_hasattr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    
    attr_name = request_json.get("attr_name")
    
    is_defined = request_json.get("is_defined")
    

    return test_hasattr(dfns, attr_name, is_defined)

@app.route('/test_dir', methods=['POST'])
def call_test_dir():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dfns = request_json.get("dfns")
    

    return test_dir(dfns)

@app.route('/test_definednamespace_dir', methods=['POST'])
def call_test_definednamespace_dir():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_dir()

@app.route('/test_core_prefixes_bound', methods=['POST'])
def call_test_core_prefixes_bound():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_core_prefixes_bound()

@app.route('/test_rdflib_prefixes_bound', methods=['POST'])
def call_test_rdflib_prefixes_bound():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_rdflib_prefixes_bound()

@app.route('/test_cc_prefixes_bound', methods=['POST'])
def call_test_cc_prefixes_bound():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cc_prefixes_bound()

@app.route('/test_rebinding', methods=['POST'])
def call_test_rebinding():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_rebinding()

@app.route('/test_replace', methods=['POST'])
def call_test_replace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_replace()

@app.route('/test_invalid_selector', methods=['POST'])
def call_test_invalid_selector():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_invalid_selector()

@app.route('/check_graph_ns', methods=['POST'])
def call_check_graph_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    expected_nsmap = request_json.get("expected_nsmap")
    
    check_namespaces = request_json.get("check_namespaces")
    

    return check_graph_ns(graph, expected_nsmap, check_namespaces)

@app.route('/test_graph_bind_namespaces', methods=['POST'])
def call_test_graph_bind_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    selector = request_json.get("selector")
    
    expected_result = request_json.get("expected_result")
    

    return test_graph_bind_namespaces(selector, expected_result)

@app.route('/test_nman_bind_namespaces', methods=['POST'])
def call_test_nman_bind_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    selector = request_json.get("selector")
    
    expected_result = request_json.get("expected_result")
    

    return test_nman_bind_namespaces(selector, expected_result)

@app.route('/test_bound_namespaces_subset', methods=['POST'])
def call_test_bound_namespaces_subset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    selector = request_json.get("selector")
    
    expected_bindings = request_json.get("expected_bindings")
    

    return test_bound_namespaces_subset(selector, expected_bindings)

@app.route('/test_compute_qname_no_generate', methods=['POST'])
def call_test_compute_qname_no_generate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_compute_qname_no_generate()

@app.route('/test_compute_qname', methods=['POST'])
def call_test_compute_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    
    bind_namespaces = request_json.get("bind_namespaces")
    
    manager_prefixes = request_json.get("manager_prefixes")
    
    graph_prefixes = request_json.get("graph_prefixes")
    
    store_prefixes = request_json.get("store_prefixes")
    
    expected_result = request_json.get("expected_result")
    

    return test_compute_qname(uri, generate, bind_namespaces, manager_prefixes, graph_prefixes, store_prefixes, expected_result)

@app.route('/test_compute_qname_strict', methods=['POST'])
def call_test_compute_qname_strict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    
    bind_namespaces = request_json.get("bind_namespaces")
    
    additional_prefixes = request_json.get("additional_prefixes")
    
    expected_result = request_json.get("expected_result")
    

    return test_compute_qname_strict(uri, generate, bind_namespaces, additional_prefixes, expected_result)

@app.route('/make_test_nsm', methods=['POST'])
def call_make_test_nsm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_test_nsm()

@app.route('/test_nsm_session', methods=['POST'])
def call_test_nsm_session():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nsm_session()

@app.route('/test_nsm_function', methods=['POST'])
def call_test_nsm_function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nsm_function()

@app.route('/test_expand_curie', methods=['POST'])
def call_test_expand_curie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_nsm_session = request_json.get("test_nsm_session")
    
    curie = request_json.get("curie")
    
    expected_result = request_json.get("expected_result")
    

    return test_expand_curie(test_nsm_session, curie, expected_result)

@app.route('/test_generate_curie', methods=['POST'])
def call_test_generate_curie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_nsm_function = request_json.get("test_nsm_function")
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    
    expected_result = request_json.get("expected_result")
    

    return test_generate_curie(test_nsm_function, uri, generate, expected_result)

@app.route('/test_definednamespace_creator_qb', methods=['POST'])
def call_test_definednamespace_creator_qb():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_qb()

@app.route('/test_definednamespace_creator_fake', methods=['POST'])
def call_test_definednamespace_creator_fake():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_fake()

@app.route('/test_definednamespace_creator_bad_ns', methods=['POST'])
def call_test_definednamespace_creator_bad_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_bad_ns()

@app.route('/test_definednamespace_creator_multiple_comments', methods=['POST'])
def call_test_definednamespace_creator_multiple_comments():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_definednamespace_creator_multiple_comments()

@app.route('/test_get_target_namespace_elements', methods=['POST'])
def call_test_get_target_namespace_elements():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return test_get_target_namespace_elements(rdfs_graph)

@app.route('/do_GET', methods=['POST'])
def call_do_GET():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return do_GET()

@app.route('/log_message', methods=['POST'])
def call_log_message():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return log_message()

@app.route('/test_content_negotiation', methods=['POST'])
def call_test_content_negotiation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_content_negotiation()

@app.route('/test_content_negotiation_no_format', methods=['POST'])
def call_test_content_negotiation_no_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_content_negotiation_no_format()

@app.route('/test_source', methods=['POST'])
def call_test_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_source()

@app.route('/test_3xx', methods=['POST'])
def call_test_3xx():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_3xx()

@app.route('/test_5xx', methods=['POST'])
def call_test_5xx():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_5xx()

@app.route('/test_iri_source', methods=['POST'])
def call_test_iri_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    url_suffix = request_json.get("url_suffix")
    
    expected_request = request_json.get("expected_request")
    
    function_httpmock = request_json.get("function_httpmock")
    

    return test_iri_source(url_suffix, expected_request, function_httpmock)

@app.route('/add_stuff', methods=['POST'])
def call_add_stuff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_stuff(graph)

@app.route('/test_unique_subjects', methods=['POST'])
def call_test_unique_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subjects()

@app.route('/test_unique_predicates', methods=['POST'])
def call_test_unique_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_predicates()

@app.route('/test_unique_objects', methods=['POST'])
def call_test_unique_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_objects()

@app.route('/test_unique_subject_predicates', methods=['POST'])
def call_test_unique_subject_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subject_predicates()

@app.route('/test_unique_predicate_objects', methods=['POST'])
def call_test_unique_predicate_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_predicate_objects()

@app.route('/test_unique_subject_objects', methods=['POST'])
def call_test_unique_subject_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subject_objects()

@app.route('/test_parse_berners_lee_card_into_graph', methods=['POST'])
def call_test_parse_berners_lee_card_into_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_berners_lee_card_into_graph()

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_graph()

@app.route('/testCbd', methods=['POST'])
def call_testCbd():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return testCbd(get_graph)

@app.route('/testCbdReified', methods=['POST'])
def call_testCbdReified():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return testCbdReified(get_graph)

@app.route('/test_cbd_example', methods=['POST'])
def call_test_cbd_example():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cbd_example()

@app.route('/test_cbd_target', methods=['POST'])
def call_test_cbd_target():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return test_cbd_target(rdfs_graph)

@app.route('/test_slice', methods=['POST'])
def call_test_slice():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_slice()

@app.route('/test_graph_slice_eg', methods=['POST'])
def call_test_graph_slice_eg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_slice_eg()

@app.route('/test_graph_slice_all', methods=['POST'])
def call_test_graph_slice_all():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_slice_all()

@app.route('/check', methods=['POST'])
def call_check():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return check(graph)

@app.route('/from_path', methods=['POST'])
def call_from_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    path = request_json.get("path")
    

    return from_path(cls, path)

@app.route('/pytest_param', methods=['POST'])
def call_pytest_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    marks = request_json.get("marks")
    

    return pytest_param(marks)

@app.route('/public_id', methods=['POST'])
def call_public_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return public_id()

@app.route('/preferred_variant', methods=['POST'])
def call_preferred_variant():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return preferred_variant()

@app.route('/load', methods=['POST'])
def call_load():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    variant_key = request_json.get("variant_key")
    
    graph_type = request_json.get("graph_type")
    

    return load(variant_key, graph_type)

@app.route('/for_files', methods=['POST'])
def call_for_files():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    file_paths = request_json.get("file_paths")
    
    basedir = request_json.get("basedir")
    

    return for_files(cls, file_paths, basedir)

@app.route('/for_directory', methods=['POST'])
def call_for_directory():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    directory = request_json.get("directory")
    
    basedir = request_json.get("basedir")
    

    return for_directory(cls, directory, basedir)

@app.route('/tests_found', methods=['POST'])
def call_tests_found():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return tests_found()

@app.route('/load_preferred', methods=['POST'])
def call_load_preferred():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_variants = request_json.get("graph_variants")
    

    return load_preferred(graph_variants)

@app.route('/make_variant_source_cases', methods=['POST'])
def call_make_variant_source_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_variant_source_cases()

@app.route('/test_variant_source', methods=['POST'])
def call_test_variant_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_variants = request_json.get("graph_variants")
    
    variant_key = request_json.get("variant_key")
    

    return test_variant_source(graph_variants, variant_key)

@app.route('/check_ns', methods=['POST'])
def call_check_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    expected_bindings = request_json.get("expected_bindings")
    

    return check_ns(graph, expected_bindings)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    
    replace = request_json.get("replace")
    

    return bind(prefix, namespace, override, replace)

@app.route('/make_graph_store_bind_cases', methods=['POST'])
def call_make_graph_store_bind_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    store_type = request_json.get("store_type")
    
    graph_type = request_json.get("graph_type")
    

    return make_graph_store_bind_cases(store_type, graph_type)

@app.route('/test_graph_store_bind', methods=['POST'])
def call_test_graph_store_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_factory = request_json.get("graph_factory")
    
    ops = request_json.get("ops")
    
    expected_bindings = request_json.get("expected_bindings")
    

    return test_graph_store_bind(graph_factory, ops, expected_bindings)

@app.route('/test_query_query_graph', methods=['POST'])
def call_test_query_query_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_factory = request_json.get("graph_factory")
    
    query_graph = request_json.get("query_graph")
    

    return test_query_query_graph(graph_factory, query_graph)

@app.route('/test_update_query_graph', methods=['POST'])
def call_test_update_query_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_factory = request_json.get("graph_factory")
    
    query_graph = request_json.get("query_graph")
    

    return test_update_query_graph(graph_factory, query_graph)

@app.route('/test_property_store', methods=['POST'])
def call_test_property_store():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_property_store()

@app.route('/test_property_identifier_default', methods=['POST'])
def call_test_property_identifier_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_property_identifier_default()

@app.route('/test_property_identifier', methods=['POST'])
def call_test_property_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_property_identifier()

@app.route('/test_property_namespace_manager', methods=['POST'])
def call_test_property_namespace_manager():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_property_namespace_manager()

@app.route('/get_store_names', methods=['POST'])
def call_get_store_names():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_store_names()

@app.route('/make_graph', methods=['POST'])
def call_make_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    request = request_json.get("request")
    

    return make_graph(tmp_path, request)

@app.route('/populate_graph', methods=['POST'])
def call_populate_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return populate_graph(graph)

@app.route('/depopulate_graph', methods=['POST'])
def call_depopulate_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return depopulate_graph(graph)

@app.route('/test_add', methods=['POST'])
def call_test_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_add(make_graph)

@app.route('/test_remove', methods=['POST'])
def call_test_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_remove(make_graph)

@app.route('/test_triples', methods=['POST'])
def call_test_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_triples(make_graph)

@app.route('/test_connected', methods=['POST'])
def call_test_connected():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_connected(make_graph)

@app.route('/test_graph_sub', methods=['POST'])
def call_test_graph_sub():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_graph_sub(make_graph)

@app.route('/test_graph_add', methods=['POST'])
def call_test_graph_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_graph_add(make_graph)

@app.route('/test_graph_intersection', methods=['POST'])
def call_test_graph_intersection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_graph_intersection(make_graph)

@app.route('/test_guess_format_for_parse', methods=['POST'])
def call_test_guess_format_for_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    
    http_file_server = request_json.get("http_file_server")
    

    return test_guess_format_for_parse(make_graph, http_file_server)

@app.route('/test_guess_format_for_parse_http', methods=['POST'])
def call_test_guess_format_for_parse_http():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    
    http_file_server = request_json.get("http_file_server")
    
    file = request_json.get("file")
    
    content_type = request_json.get("content_type")
    
    expected_result = request_json.get("expected_result")
    

    return test_guess_format_for_parse_http(make_graph, http_file_server, file, content_type, expected_result)

@app.route('/test_guess_format_for_parse_http_text_plain', methods=['POST'])
def call_test_guess_format_for_parse_http_text_plain():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_guess_format_for_parse_http_text_plain()

@app.route('/test_parse_file_uri', methods=['POST'])
def call_test_parse_file_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_parse_file_uri(make_graph)

@app.route('/test_transitive', methods=['POST'])
def call_test_transitive():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    make_graph = request_json.get("make_graph")
    

    return test_transitive(make_graph)

@app.route('/my_method', methods=['POST'])
def call_my_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return my_method()

@app.route('/test_subclass_add_operator', methods=['POST'])
def call_test_subclass_add_operator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subclass_add_operator()

@app.route('/test_subclass_sub_operator', methods=['POST'])
def call_test_subclass_sub_operator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subclass_sub_operator()

@app.route('/test_subclass_mul_operator', methods=['POST'])
def call_test_subclass_mul_operator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subclass_mul_operator()

@app.route('/get_digest_value', methods=['POST'])
def call_get_digest_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdf = request_json.get("rdf")
    
    mimetype = request_json.get("mimetype")
    

    return get_digest_value(rdf, mimetype)

@app.route('/negative_graph_match_test', methods=['POST'])
def call_negative_graph_match_test():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return negative_graph_match_test()

@app.route('/test_negative_graph_match', methods=['POST'])
def call_test_negative_graph_match():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    fn = request_json.get("fn")
    
    rdf1 = request_json.get("rdf1")
    
    rdf2 = request_json.get("rdf2")
    
    identical = request_json.get("identical")
    

    return test_negative_graph_match(fn, rdf1, rdf2, identical)

@app.route('/test_issue494_collapsing_bnodes', methods=['POST'])
def call_test_issue494_collapsing_bnodes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue494_collapsing_bnodes()

@app.route('/test_issue682_signing_named_graphs', methods=['POST'])
def call_test_issue682_signing_named_graphs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue682_signing_named_graphs()

@app.route('/test_issue725_collapsing_bnodes_2', methods=['POST'])
def call_test_issue725_collapsing_bnodes_2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue725_collapsing_bnodes_2()

@app.route('/test_consistent_ids', methods=['POST'])
def call_test_consistent_ids():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_consistent_ids()

@app.route('/test_a', methods=['POST'])
def call_test_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_a()

@app.route('/test_b', methods=['POST'])
def call_test_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_b()

@app.route('/test_subsets', methods=['POST'])
def call_test_subsets():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_subsets()

@app.route('/as_element_set', methods=['POST'])
def call_as_element_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    value = request_json.get("value")
    

    return as_element_set(value)

@app.route('/expected_in_both_set', methods=['POST'])
def call_expected_in_both_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return expected_in_both_set()

@app.route('/expected_in_lhs_set', methods=['POST'])
def call_expected_in_lhs_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return expected_in_lhs_set()

@app.route('/expected_in_rhs_set', methods=['POST'])
def call_expected_in_rhs_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return expected_in_rhs_set()

@app.route('/as_params', methods=['POST'])
def call_as_params():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return as_params()

@app.route('/test_assert_sets_equal', methods=['POST'])
def call_test_assert_sets_equal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_case = request_json.get("test_case")
    

    return test_assert_sets_equal(test_case)

@app.route('/test_graph_redirect_new_host', methods=['POST'])
def call_test_graph_redirect_new_host():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    function_httpmocks = request_json.get("function_httpmocks")
    

    return test_graph_redirect_new_host(function_httpmocks)

@app.route('/setup_class', methods=['POST'])
def call_setup_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return setup_class(cls)

@app.route('/test_a', methods=['POST'])
def call_test_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_a()

@app.route('/test_b', methods=['POST'])
def call_test_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_b()

@app.route('/test_c', methods=['POST'])
def call_test_c():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_c()

@app.route('/test_d', methods=['POST'])
def call_test_d():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_d()

@app.route('/test_e', methods=['POST'])
def call_test_e():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_e()

@app.route('/test_f', methods=['POST'])
def call_test_f():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_f()

@app.route('/test_g', methods=['POST'])
def call_test_g():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_g()

@app.route('/test_h', methods=['POST'])
def call_test_h():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_h()

@app.route('/test_i', methods=['POST'])
def call_test_i():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_i()

@app.route('/test_j', methods=['POST'])
def call_test_j():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_j()

@app.route('/test_k', methods=['POST'])
def call_test_k():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_k()

@app.route('/test_l', methods=['POST'])
def call_test_l():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_l()

@app.route('/test_m', methods=['POST'])
def call_test_m():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_m()

@app.route('/test_n', methods=['POST'])
def call_test_n():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_n()

@app.route('/test_o', methods=['POST'])
def call_test_o():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_o()

@app.route('/test_p', methods=['POST'])
def call_test_p():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_p()

@app.route('/test_q', methods=['POST'])
def call_test_q():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_q()

@app.route('/test_r', methods=['POST'])
def call_test_r():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_r()

@app.route('/checkFormulaStore', methods=['POST'])
def call_checkFormulaStore():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    store = request_json.get("store")
    
    configString = request_json.get("configString")
    

    return checkFormulaStore(store, configString)

@app.route('/get_formula_stores_tests', methods=['POST'])
def call_get_formula_stores_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_formula_stores_tests()

@app.route('/test_formula_stores', methods=['POST'])
def call_test_formula_stores():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    name = request_json.get("name")
    

    return test_formula_stores(checker, name)

@app.route('/test_batch_size_zero_denied', methods=['POST'])
def call_test_batch_size_zero_denied():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_batch_size_zero_denied()

@app.route('/test_batch_size_none_denied', methods=['POST'])
def call_test_batch_size_none_denied():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_batch_size_none_denied()

@app.route('/test_batch_size_one_denied', methods=['POST'])
def call_test_batch_size_one_denied():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_batch_size_one_denied()

@app.route('/test_batch_size_negative_denied', methods=['POST'])
def call_test_batch_size_negative_denied():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_batch_size_negative_denied()

@app.route('/test_exit_submits_partial_batch', methods=['POST'])
def call_test_exit_submits_partial_batch():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_exit_submits_partial_batch()

@app.route('/test_add_more_than_batch_size', methods=['POST'])
def call_test_add_more_than_batch_size():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_add_more_than_batch_size()

@app.route('/test_add_quad_for_non_conjunctive_empty', methods=['POST'])
def call_test_add_quad_for_non_conjunctive_empty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_add_quad_for_non_conjunctive_empty()

@app.route('/test_add_quad_for_non_conjunctive_pass_on_context_matches', methods=['POST'])
def call_test_add_quad_for_non_conjunctive_pass_on_context_matches():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_add_quad_for_non_conjunctive_pass_on_context_matches()

@app.route('/test_no_addN_on_exception', methods=['POST'])
def call_test_no_addN_on_exception():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_addN_on_exception()

@app.route('/test_addN_batching_addN', methods=['POST'])
def call_test_addN_batching_addN():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_addN_batching_addN()

@app.route('/test_aggregate_raw', methods=['POST'])
def call_test_aggregate_raw():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_aggregate_raw()

@app.route('/test_aggregate2', methods=['POST'])
def call_test_aggregate2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_aggregate2()

@app.route('/test_items', methods=['POST'])
def call_test_items():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_items()

@app.route('/test_recursive_list_detection', methods=['POST'])
def call_test_recursive_list_detection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_recursive_list_detection()

@app.route('/setUp', methods=['POST'])
def call_setUp():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setUp()

@app.route('/tearDown', methods=['POST'])
def call_tearDown():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return tearDown()

@app.route('/add_stuff', methods=['POST'])
def call_add_stuff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return add_stuff()

@app.route('/remove_stuff', methods=['POST'])
def call_remove_stuff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return remove_stuff()

@app.route('/add_stuff_in_multiple_contexts', methods=['POST'])
def call_add_stuff_in_multiple_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return add_stuff_in_multiple_contexts()

@app.route('/test_conjunction', methods=['POST'])
def call_test_conjunction():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_conjunction()

@app.route('/test_add', methods=['POST'])
def call_test_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_add()

@app.route('/test_remove', methods=['POST'])
def call_test_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_remove()

@app.route('/test_len_in_one_context', methods=['POST'])
def call_test_len_in_one_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_len_in_one_context()

@app.route('/test_len_in_multiple_contexts', methods=['POST'])
def call_test_len_in_multiple_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_len_in_multiple_contexts()

@app.route('/test_remove_in_multiple_contexts', methods=['POST'])
def call_test_remove_in_multiple_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_remove_in_multiple_contexts()

@app.route('/test_contexts', methods=['POST'])
def call_test_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_contexts()

@app.route('/test_remove_context', methods=['POST'])
def call_test_remove_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_remove_context()

@app.route('/test_remove_any', methods=['POST'])
def call_test_remove_any():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_remove_any()

@app.route('/test_triples', methods=['POST'])
def call_test_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_triples()

@app.route('/test_skolemization', methods=['POST'])
def call_test_skolemization():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    expected_uri = request_json.get("expected_uri")
    

    return test_skolemization(node, expected_uri)

@app.route('/test_deskolemization', methods=['POST'])
def call_test_deskolemization():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    
    expected_bnode_value = request_json.get("expected_bnode_value")
    

    return test_deskolemization(iri, expected_bnode_value)

@app.route('/test_binding_replace', methods=['POST'])
def call_test_binding_replace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_binding_replace()

@app.route('/test_prefix_alias_disallowed', methods=['POST'])
def call_test_prefix_alias_disallowed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prefix_alias_disallowed()

@app.route('/test_rebind_prefix_succeeds', methods=['POST'])
def call_test_rebind_prefix_succeeds():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_rebind_prefix_succeeds()

@app.route('/test_parse_rebinds_prefix', methods=['POST'])
def call_test_parse_rebinds_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_rebinds_prefix()

@app.route('/test_automatic_handling_of_unknown_predicates', methods=['POST'])
def call_test_automatic_handling_of_unknown_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_automatic_handling_of_unknown_predicates()

@app.route('/test_automatic_handling_of_unknown_predicates_only_effected_after_serialization', methods=['POST'])
def call_test_automatic_handling_of_unknown_predicates_only_effected_after_serialization():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_automatic_handling_of_unknown_predicates_only_effected_after_serialization()

@app.route('/test_multigraph_bindings', methods=['POST'])
def call_test_multigraph_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_multigraph_bindings()

@app.route('/test_new_namespace_new_prefix', methods=['POST'])
def call_test_new_namespace_new_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_new_namespace_new_prefix()

@app.route('/test_change_prefix_override_true', methods=['POST'])
def call_test_change_prefix_override_true():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_change_prefix_override_true()

@app.route('/test_change_prefix_override_false', methods=['POST'])
def call_test_change_prefix_override_false():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_change_prefix_override_false()

@app.route('/test_change_namespace_override_true', methods=['POST'])
def call_test_change_namespace_override_true():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_change_namespace_override_true()

@app.route('/test_change_namespace_override_false', methods=['POST'])
def call_test_change_namespace_override_false():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_change_namespace_override_false()

@app.route('/test_new_namespace_override_false', methods=['POST'])
def call_test_new_namespace_override_false():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_new_namespace_override_false()

@app.route('/test_change_namespace_and_prefix', methods=['POST'])
def call_test_change_namespace_and_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_change_namespace_and_prefix()

@app.route('/info_dict', methods=['POST'])
def call_info_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return info_dict(cls)

@app.route('/info', methods=['POST'])
def call_info():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return info()

@app.route('/set', methods=['POST'])
def call_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return set(cls)

@app.route('/make_dict', methods=['POST'])
def call_make_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return make_dict(cls)

@app.route('/comparable_node', methods=['POST'])
def call_comparable_node():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    

    return comparable_node(node)

@app.route('/comparable_bindings', methods=['POST'])
def call_comparable_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bindings = request_json.get("bindings")
    

    return comparable_bindings(bindings)

@app.route('/bindings_diff', methods=['POST'])
def call_bindings_diff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    

    return bindings_diff(lhs, rhs)

@app.route('/comparable_collection', methods=['POST'])
def call_comparable_collection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bcollection = request_json.get("bcollection")
    
    skip_duplicates = request_json.get("skip_duplicates")
    

    return comparable_collection(bcollection, skip_duplicates)

@app.route('/assert_bindings_collections_equal', methods=['POST'])
def call_assert_bindings_collections_equal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    invert = request_json.get("invert")
    
    skip_duplicates = request_json.get("skip_duplicates")
    

    return assert_bindings_collections_equal(lhs, rhs, invert, skip_duplicates)

@app.route('/info_set', methods=['POST'])
def call_info_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return info_set(cls)

@app.route('/name', methods=['POST'])
def call_name():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return name()

@app.route('/ctx_chdir', methods=['POST'])
def call_ctx_chdir():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    newdir = request_json.get("newdir")
    

    return ctx_chdir(newdir)

@app.route('/make_spypair', methods=['POST'])
def call_make_spypair():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    method = request_json.get("method")
    

    return make_spypair(method)

@app.route('/make_do_handler', methods=['POST'])
def call_make_do_handler():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    method_name = request_json.get("method_name")
    
    requests = request_json.get("requests")
    
    responses = request_json.get("responses")
    

    return make_do_handler(cls, method_name, requests, responses)

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/call_count', methods=['POST'])
def call_call_count():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return call_count()

@app.route('/stop', methods=['POST'])
def call_stop():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return stop()

@app.route('/address_string', methods=['POST'])
def call_address_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return address_string()

@app.route('/url', methods=['POST'])
def call_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return url()

@app.route('/make_ref', methods=['POST'])
def call_make_ref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    encoding = request_json.get("encoding")
    
    path_factory = request_json.get("path_factory")
    

    return make_ref(tmp_path, encoding, path_factory)

@app.route('/context_urlopener', methods=['POST'])
def call_context_urlopener():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    opener = request_json.get("opener")
    

    return context_urlopener(opener)

@app.route('/header_items', methods=['POST'])
def call_header_items():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    headers = request_json.get("headers")
    

    return header_items(headers)

@app.route('/apply_headers_to', methods=['POST'])
def call_apply_headers_to():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    headers = request_json.get("headers")
    
    handler = request_json.get("handler")
    

    return apply_headers_to(headers, handler)

@app.route('/get_random_ip', methods=['POST'])
def call_get_random_ip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ip_prefix = request_json.get("ip_prefix")
    

    return get_random_ip(ip_prefix)

@app.route('/ctx_http_handler', methods=['POST'])
def call_ctx_http_handler():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    handler = request_json.get("handler")
    
    host = request_json.get("host")
    

    return ctx_http_handler(handler, host)

@app.route('/ctx_http_server', methods=['POST'])
def call_ctx_http_server():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    server = request_json.get("server")
    

    return ctx_http_server(server)

@app.route('/headers_as_message', methods=['POST'])
def call_headers_as_message():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    headers = request_json.get("headers")
    

    return headers_as_message(headers)

@app.route('/check', methods=['POST'])
def call_check():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    actual = request_json.get("actual")
    

    return check(actual)

@app.route('/literal_idfn', methods=['POST'])
def call_literal_idfn():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    value = request_json.get("value")
    

    return literal_idfn(value)

@app.route('/path', methods=['POST'])
def call_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return path()

@app.route('/request_url', methods=['POST'])
def call_request_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return request_url()

@app.route('/effective_url', methods=['POST'])
def call_effective_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return effective_url()

@app.route('/url', methods=['POST'])
def call_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return url()

@app.route('/add_file_with_caching', methods=['POST'])
def call_add_file_with_caching():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    proto_file = request_json.get("proto_file")
    
    proto_redirects = request_json.get("proto_redirects")
    
    suffix = request_json.get("suffix")
    

    return add_file_with_caching(proto_file, proto_redirects, suffix)

@app.route('/add_file', methods=['POST'])
def call_add_file():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    proto_file = request_json.get("proto_file")
    
    proto_redirects = request_json.get("proto_redirects")
    
    suffix = request_json.get("suffix")
    

    return add_file(proto_file, proto_redirects, suffix)

@app.route('/make_handler', methods=['POST'])
def call_make_handler():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_handler()

@app.route('/query_with_retry', methods=['POST'])
def call_query_with_retry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    query = request_json.get("query")
    

    return query_with_retry(graph, query)

@app.route('/read_manifest', methods=['POST'])
def call_read_manifest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    f = request_json.get("f")
    
    base = request_json.get("base")
    
    legacy = request_json.get("legacy")
    

    return read_manifest(f, base, legacy)

@app.route('/guess_format', methods=['POST'])
def call_guess_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    path = request_json.get("path")
    

    return guess_format(cls, path)

@app.route('/from_path', methods=['POST'])
def call_from_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    path = request_json.get("path")
    
    public_id = request_json.get("public_id")
    
    format = request_json.get("format")
    

    return from_path(cls, path, public_id, format)

@app.route('/from_paths', methods=['POST'])
def call_from_paths():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return from_paths(cls)

@app.route('/from_source', methods=['POST'])
def call_from_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    source = request_json.get("source")
    
    public_id = request_json.get("public_id")
    

    return from_source(cls, source, public_id)

@app.route('/public_id_or_path_uri', methods=['POST'])
def call_public_id_or_path_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return public_id_or_path_uri()

@app.route('/load', methods=['POST'])
def call_load():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    public_id = request_json.get("public_id")
    
    graph_type = request_json.get("graph_type")
    

    return load(graph, public_id, graph_type)

@app.route('/idfn', methods=['POST'])
def call_idfn():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    val = request_json.get("val")
    

    return idfn(cls, val)

@app.route('/load_sources', methods=['POST'])
def call_load_sources():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return load_sources()

@app.route('/cached_graph', methods=['POST'])
def call_cached_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    sources = request_json.get("sources")
    
    public_id = request_json.get("public_id")
    
    graph_type = request_json.get("graph_type")
    

    return cached_graph(sources, public_id, graph_type)

@app.route('/load_from_python', methods=['POST'])
def call_load_from_python():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path = request_json.get("path")
    
    graph = request_json.get("graph")
    
    graph_type = request_json.get("graph_type")
    

    return load_from_python(path, graph, graph_type)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/uri_mapper', methods=['POST'])
def call_uri_mapper():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return uri_mapper()

@app.route('/param', methods=['POST'])
def call_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    mark_dict = request_json.get("mark_dict")
    
    markers = request_json.get("markers")
    

    return param(mark_dict, markers)

@app.route('/value', methods=['POST'])
def call_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    value_type = request_json.get("value_type")
    

    return value(predicate, value_type)

@app.route('/check_filters', methods=['POST'])
def call_check_filters():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    filters = request_json.get("filters")
    

    return check_filters(filters)

@app.route('/from_graph', methods=['POST'])
def call_from_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    uri_mapper = request_json.get("uri_mapper")
    
    graph = request_json.get("graph")
    
    report_prefix = request_json.get("report_prefix")
    

    return from_graph(cls, uri_mapper, graph, report_prefix)

@app.route('/from_sources', methods=['POST'])
def call_from_sources():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    uri_mapper = request_json.get("uri_mapper")
    

    return from_sources(cls, uri_mapper)

@app.route('/included', methods=['POST'])
def call_included():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return included()

@app.route('/entires', methods=['POST'])
def call_entires():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry_type = request_json.get("entry_type")
    
    exclude = request_json.get("exclude")
    
    include = request_json.get("include")
    

    return entires(entry_type, exclude, include)

@app.route('/params', methods=['POST'])
def call_params():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry_type = request_json.get("entry_type")
    
    exclude = request_json.get("exclude")
    
    include = request_json.get("include")
    
    mark_dict = request_json.get("mark_dict")
    
    markers = request_json.get("markers")
    

    return params(entry_type, exclude, include, mark_dict, markers)

@app.route('/params_from_sources', methods=['POST'])
def call_params_from_sources():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri_mapper = request_json.get("uri_mapper")
    
    entry_type = request_json.get("entry_type")
    

    return params_from_sources(uri_mapper, entry_type)

@app.route('/make_dict', methods=['POST'])
def call_make_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return make_dict(cls)

@app.route('/from_graph', methods=['POST'])
def call_from_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    identifier = request_json.get("identifier")
    

    return from_graph(cls, graph, identifier)

@app.route('/load_into', methods=['POST'])
def call_load_into():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest = request_json.get("manifest")
    
    dataset = request_json.get("dataset")
    

    return load_into(manifest, dataset)

@app.route('/load_dataset', methods=['POST'])
def call_load_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    graph_data_set = request_json.get("graph_data_set")
    

    return load_dataset(data, graph_data_set)

@app.route('/action_dataset', methods=['POST'])
def call_action_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return action_dataset()

@app.route('/result_dataset', methods=['POST'])
def call_result_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return result_dataset()

@app.route('/query_text', methods=['POST'])
def call_query_text():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return query_text()

@app.route('/query_base', methods=['POST'])
def call_query_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return query_base()

@app.route('/load_result', methods=['POST'])
def call_load_result():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    uri_mapper = request_json.get("uri_mapper")
    
    result_uri = request_json.get("result_uri")
    

    return load_result(cls, uri_mapper, result_uri)

@app.route('/ctx_configure_rdflib', methods=['POST'])
def call_ctx_configure_rdflib():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return ctx_configure_rdflib()

@app.route('/check_syntax', methods=['POST'])
def call_check_syntax():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    monkeypatch = request_json.get("monkeypatch")
    
    entry = request_json.get("entry")
    

    return check_syntax(monkeypatch, entry)

@app.route('/check_update', methods=['POST'])
def call_check_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    monkeypatch = request_json.get("monkeypatch")
    
    entry = request_json.get("entry")
    

    return check_update(monkeypatch, entry)

@app.route('/check_query', methods=['POST'])
def call_check_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    exit_stack = request_json.get("exit_stack")
    
    entry = request_json.get("entry")
    

    return check_query(exit_stack, entry)

@app.route('/check_entry', methods=['POST'])
def call_check_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    monkeypatch = request_json.get("monkeypatch")
    
    exit_stack = request_json.get("exit_stack")
    
    entry = request_json.get("entry")
    

    return check_entry(monkeypatch, exit_stack, entry)

@app.route('/file_uri_to_path', methods=['POST'])
def call_file_uri_to_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    file_uri = request_json.get("file_uri")
    
    path_class = request_json.get("path_class")
    
    url2pathname = request_json.get("url2pathname")
    

    return file_uri_to_path(file_uri, path_class, url2pathname)

@app.route('/rebase_url', methods=['POST'])
def call_rebase_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    old_url = request_json.get("old_url")
    
    old_base = request_json.get("old_base")
    
    new_base = request_json.get("new_base")
    

    return rebase_url(old_url, old_base, new_base)

@app.route('/from_tuple', methods=['POST'])
def call_from_tuple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    value = request_json.get("value")
    

    return from_tuple(cls, value)

@app.route('/to_local_uri', methods=['POST'])
def call_to_local_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    remote = request_json.get("remote")
    

    return to_local_uri(remote)

@app.route('/to_local_path', methods=['POST'])
def call_to_local_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    remote = request_json.get("remote")
    

    return to_local_path(remote)

@app.route('/to_local', methods=['POST'])
def call_to_local():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    remote = request_json.get("remote")
    

    return to_local(remote)

@app.route('/to_remote', methods=['POST'])
def call_to_remote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    local = request_json.get("local")
    

    return to_remote(local)

@app.route('/from_mappings', methods=['POST'])
def call_from_mappings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return from_mappings(cls)

@app.route('/opener', methods=['POST'])
def call_opener():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return opener()

@app.route('/http_open', methods=['POST'])
def call_http_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    req = request_json.get("req")
    

    return http_open(req)

@app.route('/check', methods=['POST'])
def call_check():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    actual = request_json.get("actual")
    

    return check(actual)

@app.route('/context', methods=['POST'])
def call_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return context()

@app.route('/from_primitive', methods=['POST'])
def call_from_primitive():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    primitive = request_json.get("primitive")
    

    return from_primitive(cls, primitive)

@app.route('/from_primitives', methods=['POST'])
def call_from_primitives():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    primitives = request_json.get("primitives")
    

    return from_primitives(cls, primitives)

@app.route('/add_test_outcome', methods=['POST'])
def call_add_test_outcome():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_id = request_json.get("test_id")
    
    outcome = request_json.get("outcome")
    
    info = request_json.get("info")
    

    return add_test_outcome(test_id, outcome, info)

@app.route('/write', methods=['POST'])
def call_write():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return write()

@app.route('/pytest_addoption', methods=['POST'])
def call_pytest_addoption():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    parser = request_json.get("parser")
    

    return pytest_addoption(parser)

@app.route('/convert_optional', methods=['POST'])
def call_convert_optional():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    optional = request_json.get("optional")
    
    converter = request_json.get("converter")
    

    return convert_optional(optional, converter)

@app.route('/pytest_configure', methods=['POST'])
def call_pytest_configure():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    config = request_json.get("config")
    

    return pytest_configure(config)

@app.route('/pytest_unconfigure', methods=['POST'])
def call_pytest_unconfigure():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    config = request_json.get("config")
    

    return pytest_unconfigure(config)

@app.route('/get_rdf_test_uri', methods=['POST'])
def call_get_rdf_test_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    rdf_test_uri = request_json.get("rdf_test_uri")
    
    manifest_entry = request_json.get("manifest_entry")
    

    return get_rdf_test_uri(cls, rdf_test_uri, manifest_entry)

@app.route('/get_manifest_entry', methods=['POST'])
def call_get_manifest_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    report = request_json.get("report")
    

    return get_manifest_entry(cls, report)

@app.route('/setup_report_graph', methods=['POST'])
def call_setup_report_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return setup_report_graph(graph)

@app.route('/make_report_graph', methods=['POST'])
def call_make_report_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_report_graph()

@app.route('/make_report_with_prefix', methods=['POST'])
def call_make_report_with_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    report_prefix = request_json.get("report_prefix")
    

    return make_report_with_prefix(report_prefix)

@app.route('/get_report_for', methods=['POST'])
def call_get_report_for():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry = request_json.get("entry")
    

    return get_report_for(entry)

@app.route('/pytest_runtest_makereport', methods=['POST'])
def call_pytest_runtest_makereport():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    
    call = request_json.get("call")
    

    return pytest_runtest_makereport(item, call)

@app.route('/append_result', methods=['POST'])
def call_append_result():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    report = request_json.get("report")
    
    test_result = request_json.get("test_result")
    

    return append_result(report, test_result)

@app.route('/pytest_runtest_logreport', methods=['POST'])
def call_pytest_runtest_logreport():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    report = request_json.get("report")
    

    return pytest_runtest_logreport(report)

@app.route('/pytest_sessionfinish', methods=['POST'])
def call_pytest_sessionfinish():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    session = request_json.get("session")
    

    return pytest_sessionfinish(session)

@app.route('/make_report', methods=['POST'])
def call_make_report():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    output_file = request_json.get("output_file")
    

    return make_report(output_file)

@app.route('/audit', methods=['POST'])
def call_audit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    args = request_json.get("args")
    

    return audit(name, args)

@app.route('/ctx_hook', methods=['POST'])
def call_ctx_hook():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    hook = request_json.get("hook")
    

    return ctx_hook(name, hook)

@app.route('/get_unique_plugins', methods=['POST'])
def call_get_unique_plugins():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    type_ = request_json.get("type_")
    

    return get_unique_plugins(type_)

@app.route('/get_unique_plugin_names', methods=['POST'])
def call_get_unique_plugin_names():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    type_ = request_json.get("type_")
    

    return get_unique_plugin_names(type_)

@app.route('/add_triples', methods=['POST'])
def call_add_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    triples = request_json.get("triples")
    

    return add_triples(cls, graph, triples)

@app.route('/node', methods=['POST'])
def call_node():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    node = request_json.get("node")
    
    bnode_handling = request_json.get("bnode_handling")
    

    return node(cls, node, bnode_handling)

@app.route('/nodes', methods=['POST'])
def call_nodes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    nodes = request_json.get("nodes")
    
    bnode_handling = request_json.get("bnode_handling")
    

    return nodes(cls, nodes, bnode_handling)

@app.route('/triple_set', methods=['POST'])
def call_triple_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    bnode_handling = request_json.get("bnode_handling")
    

    return triple_set(cls, graph, bnode_handling)

@app.route('/triple_sets', methods=['POST'])
def call_triple_sets():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graphs = request_json.get("graphs")
    
    bnode_handling = request_json.get("bnode_handling")
    

    return triple_sets(cls, graphs, bnode_handling)

@app.route('/quad_set', methods=['POST'])
def call_quad_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    bnode_handling = request_json.get("bnode_handling")
    

    return quad_set(cls, graph, bnode_handling)

@app.route('/triple_or_quad_set', methods=['POST'])
def call_triple_or_quad_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    bnode_handling = request_json.get("bnode_handling")
    

    return triple_or_quad_set(cls, graph, bnode_handling)

@app.route('/assert_triple_sets_equals', methods=['POST'])
def call_assert_triple_sets_equals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    bnode_handling = request_json.get("bnode_handling")
    
    negate = request_json.get("negate")
    

    return assert_triple_sets_equals(cls, lhs, rhs, bnode_handling, negate)

@app.route('/assert_quad_sets_equals', methods=['POST'])
def call_assert_quad_sets_equals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    bnode_handling = request_json.get("bnode_handling")
    
    negate = request_json.get("negate")
    

    return assert_quad_sets_equals(cls, lhs, rhs, bnode_handling, negate)

@app.route('/assert_collection_graphs_equal', methods=['POST'])
def call_assert_collection_graphs_equal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    

    return assert_collection_graphs_equal(cls, lhs, rhs)

@app.route('/assert_sets_equals', methods=['POST'])
def call_assert_sets_equals():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    bnode_handling = request_json.get("bnode_handling")
    
    negate = request_json.get("negate")
    

    return assert_sets_equals(cls, lhs, rhs, bnode_handling, negate)

@app.route('/format_set', methods=['POST'])
def call_format_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    item_set = request_json.get("item_set")
    
    indent = request_json.get("indent")
    
    sort = request_json.get("sort")
    

    return format_set(cls, item_set, indent, sort)

@app.route('/format_graph_set', methods=['POST'])
def call_format_graph_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    indent = request_json.get("indent")
    
    sort = request_json.get("sort")
    

    return format_graph_set(cls, graph, indent, sort)

@app.route('/assert_isomorphic', methods=['POST'])
def call_assert_isomorphic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    message = request_json.get("message")
    

    return assert_isomorphic(cls, lhs, rhs, message)

@app.route('/assert_cgraph_isomorphic', methods=['POST'])
def call_assert_cgraph_isomorphic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    exclude_bnodes = request_json.get("exclude_bnodes")
    
    message = request_json.get("message")
    

    return assert_cgraph_isomorphic(cls, lhs, rhs, exclude_bnodes, message)

@app.route('/strip_literal_datatypes', methods=['POST'])
def call_strip_literal_datatypes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    graph = request_json.get("graph")
    
    datatypes = request_json.get("datatypes")
    

    return strip_literal_datatypes(cls, graph, datatypes)

@app.route('/non_default_graph_names', methods=['POST'])
def call_non_default_graph_names():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    container = request_json.get("container")
    

    return non_default_graph_names(cls, container)

@app.route('/non_default_graphs', methods=['POST'])
def call_non_default_graphs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    container = request_json.get("container")
    

    return non_default_graphs(cls, container)

@app.route('/eq_', methods=['POST'])
def call_eq_():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    msg = request_json.get("msg")
    

    return eq_(lhs, rhs, msg)

@app.route('/marks_to_list', methods=['POST'])
def call_marks_to_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    mark = request_json.get("mark")
    

    return marks_to_list(mark)

@app.route('/pytest_mark_filter', methods=['POST'])
def call_pytest_mark_filter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    param_sets = request_json.get("param_sets")
    
    mark_dict = request_json.get("mark_dict")
    

    return pytest_mark_filter(param_sets, mark_dict)

@app.route('/affix_tuples', methods=['POST'])
def call_affix_tuples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    tuples = request_json.get("tuples")
    
    suffix = request_json.get("suffix")
    

    return affix_tuples(prefix, tuples, suffix)

@app.route('/ensure_suffix', methods=['POST'])
def call_ensure_suffix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    value = request_json.get("value")
    
    suffix = request_json.get("suffix")
    

    return ensure_suffix(value, suffix)

@app.route('/idfns', methods=['POST'])
def call_idfns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return idfns()

@app.route('/test_checker', methods=['POST'])
def call_test_checker():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    action = request_json.get("action")
    
    checker = request_json.get("checker")
    
    expected_exception = request_json.get("expected_exception")
    

    return test_checker(action, checker, expected_exception)

@app.route('/test_bindings_equal', methods=['POST'])
def call_test_bindings_equal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    expected_result = request_json.get("expected_result")
    

    return test_bindings_equal(lhs, rhs, expected_result)

@app.route('/test_file_uri_to_path', methods=['POST'])
def call_test_file_uri_to_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    file_uri = request_json.get("file_uri")
    
    path_class = request_json.get("path_class")
    
    expected_result = request_json.get("expected_result")
    

    return test_file_uri_to_path(file_uri, path_class, expected_result)

@app.route('/test_rebase_url', methods=['POST'])
def call_test_rebase_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    old_url = request_json.get("old_url")
    
    old_base = request_json.get("old_base")
    
    new_base = request_json.get("new_base")
    
    expected_result = request_json.get("expected_result")
    

    return test_rebase_url(old_url, old_base, new_base, expected_result)

@app.route('/check', methods=['POST'])
def call_check():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    file_uri = request_json.get("file_uri")
    
    expected_windows_path = request_json.get("expected_windows_path")
    
    expected_posix_path = request_json.get("expected_posix_path")
    

    return check(file_uri, expected_windows_path, expected_posix_path)

@app.route('/test_paths', methods=['POST'])
def call_test_paths():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    file_uri = request_json.get("file_uri")
    
    expected_windows_path = request_json.get("expected_windows_path")
    
    expected_posix_path = request_json.get("expected_posix_path")
    

    return test_paths(file_uri, expected_windows_path, expected_posix_path)

@app.route('/lhs_format', methods=['POST'])
def call_lhs_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return lhs_format()

@app.route('/rhs_format', methods=['POST'])
def call_rhs_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rhs_format()

@app.route('/test_assert_sets_equal', methods=['POST'])
def call_test_assert_sets_equal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_case = request_json.get("test_case")
    

    return test_assert_sets_equal(test_case)

@app.route('/test_prefix_tuples', methods=['POST'])
def call_test_prefix_tuples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tuples = request_json.get("tuples")
    
    prefix = request_json.get("prefix")
    
    suffix = request_json.get("suffix")
    
    expected_result = request_json.get("expected_result")
    

    return test_prefix_tuples(tuples, prefix, suffix, expected_result)

@app.route('/test_assert_cgraph_isomorphic', methods=['POST'])
def call_test_assert_cgraph_isomorphic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_type = request_json.get("graph_type")
    
    format = request_json.get("format")
    
    lhs = request_json.get("lhs")
    
    rhs = request_json.get("rhs")
    
    expected_result = request_json.get("expected_result")
    

    return test_assert_cgraph_isomorphic(graph_type, format, lhs, rhs, expected_result)

@app.route('/test_base', methods=['POST'])
def call_test_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_base()

@app.route('/test_served', methods=['POST'])
def call_test_served():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_served()

@app.route('/test_norm_url_xfail', methods=['POST'])
def call_test_norm_url_xfail():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    base = request_json.get("base")
    
    url = request_json.get("url")
    
    expected_result = request_json.get("expected_result")
    

    return test_norm_url_xfail(base, url, expected_result)

@app.route('/test_graph', methods=['POST'])
def call_test_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph()

@app.route('/test_conjunctive_graph', methods=['POST'])
def call_test_conjunctive_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_conjunctive_graph()

@app.route('/test_dataset', methods=['POST'])
def call_test_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_dataset()

@app.route('/make_fake_urlinputsource', methods=['POST'])
def call_make_fake_urlinputsource():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input_uri = request_json.get("input_uri")
    
    format = request_json.get("format")
    
    suite_base = request_json.get("suite_base")
    
    options = request_json.get("options")
    

    return make_fake_urlinputsource(input_uri, format, suite_base, options)

@app.route('/do_test_json', methods=['POST'])
def call_do_test_json():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return do_test_json(suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/do_test_parser', methods=['POST'])
def call_do_test_parser():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return do_test_parser(suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/do_test_serializer', methods=['POST'])
def call_do_test_serializer():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return do_test_serializer(suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/do_test_html', methods=['POST'])
def call_do_test_html():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return do_test_html(suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/case', methods=['POST'])
def call_case():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    data = request_json.get("data")
    

    return case(source, data)

@app.route('/run', methods=['POST'])
def call_run():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    expected = request_json.get("expected")
    

    return run(data, expected)

@app.route('/sort_graph', methods=['POST'])
def call_sort_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    

    return sort_graph(data)

@app.route('/test_cases', methods=['POST'])
def call_test_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    expected = request_json.get("expected")
    

    return test_cases(data, expected)

@app.route('/test_create_context', methods=['POST'])
def call_test_create_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_create_context()

@app.route('/test_select_term_based_on_value_characteristics', methods=['POST'])
def call_test_select_term_based_on_value_characteristics():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_select_term_based_on_value_characteristics()

@app.route('/test_getting_keyword_values_from_nodes', methods=['POST'])
def call_test_getting_keyword_values_from_nodes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_getting_keyword_values_from_nodes()

@app.route('/test_parsing_a_context_expands_prefixes', methods=['POST'])
def call_test_parsing_a_context_expands_prefixes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parsing_a_context_expands_prefixes()

@app.route('/test_resolving_iris', methods=['POST'])
def call_test_resolving_iris():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_resolving_iris()

@app.route('/test_accessing_keyword_values_by_alias', methods=['POST'])
def call_test_accessing_keyword_values_by_alias():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_accessing_keyword_values_by_alias()

@app.route('/test_creating_a_subcontext', methods=['POST'])
def call_test_creating_a_subcontext():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_creating_a_subcontext()

@app.route('/test_prefix_like_vocab', methods=['POST'])
def call_test_prefix_like_vocab():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prefix_like_vocab()

@app.route('/test_loading_contexts', methods=['POST'])
def call_test_loading_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_loading_contexts()

@app.route('/test_use_base_in_local_context', methods=['POST'])
def call_test_use_base_in_local_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_use_base_in_local_context()

@app.route('/test_override_base', methods=['POST'])
def call_test_override_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_override_base()

@app.route('/test_resolve_relative_base', methods=['POST'])
def call_test_resolve_relative_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_resolve_relative_base()

@app.route('/test_set_null_base', methods=['POST'])
def call_test_set_null_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_set_null_base()

@app.route('/test_ignore_base_remote_context', methods=['POST'])
def call_test_ignore_base_remote_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_ignore_base_remote_context()

@app.route('/test_recursive_context_inclusion_error', methods=['POST'])
def call_test_recursive_context_inclusion_error():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_recursive_context_inclusion_error()

@app.route('/test_invalid_remote_context', methods=['POST'])
def call_test_invalid_remote_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_invalid_remote_context()

@app.route('/test_file_source', methods=['POST'])
def call_test_file_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    

    return test_file_source(tmp_path)

@app.route('/test_dict_source', methods=['POST'])
def call_test_dict_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    

    return test_dict_source(tmp_path)

@app.route('/test_parsing', methods=['POST'])
def call_test_parsing():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parsing()

@app.route('/test_to_dict', methods=['POST'])
def call_test_to_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_to_dict()

@app.route('/test_reassign_id', methods=['POST'])
def call_test_reassign_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_reassign_id()

@app.route('/read_manifest', methods=['POST'])
def call_read_manifest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return read_manifest()

@app.route('/get_test_suite_cases', methods=['POST'])
def call_get_test_suite_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_test_suite_cases()

@app.route('/testsuide_dir', methods=['POST'])
def call_testsuide_dir():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return testsuide_dir()

@app.route('/test_suite', methods=['POST'])
def call_test_suite():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdf_test_uri = request_json.get("rdf_test_uri")
    
    func = request_json.get("func")
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/read_manifest', methods=['POST'])
def call_read_manifest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    skiptests = request_json.get("skiptests")
    

    return read_manifest(skiptests)

@app.route('/get_test_suite_cases', methods=['POST'])
def call_get_test_suite_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    skip_known_bugs = request_json.get("skip_known_bugs")
    

    return get_test_suite_cases(skip_known_bugs)

@app.route('/global_state', methods=['POST'])
def call_global_state():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return global_state()

@app.route('/test_suite', methods=['POST'])
def call_test_suite():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdf_test_uri = request_json.get("rdf_test_uri")
    
    func = request_json.get("func")
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/read_manifest', methods=['POST'])
def call_read_manifest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    skiptests = request_json.get("skiptests")
    

    return read_manifest(skiptests)

@app.route('/get_test_suite_cases', methods=['POST'])
def call_get_test_suite_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_test_suite_cases()

@app.route('/global_state', methods=['POST'])
def call_global_state():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return global_state()

@app.route('/test_suite', methods=['POST'])
def call_test_suite():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdf_test_uri = request_json.get("rdf_test_uri")
    
    func = request_json.get("func")
    
    suite_base = request_json.get("suite_base")
    
    cat = request_json.get("cat")
    
    num = request_json.get("num")
    
    inputpath = request_json.get("inputpath")
    
    expectedpath = request_json.get("expectedpath")
    
    context = request_json.get("context")
    
    options = request_json.get("options")
    

    return test_suite(rdf_test_uri, func, suite_base, cat, num, inputpath, expectedpath, context, options)

@app.route('/test_norm_urn', methods=['POST'])
def call_test_norm_urn():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_norm_urn()

@app.route('/test_wrap', methods=['POST'])
def call_test_wrap():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_wrap()

@app.route('/walk', methods=['POST'])
def call_walk():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    path = request_json.get("path")
    

    return walk(data, path)

@app.route('/test_parse', methods=['POST'])
def call_test_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse()

@app.route('/test_container_list', methods=['POST'])
def call_test_container_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_container_list()

@app.route('/test_no_container', methods=['POST'])
def call_test_no_container():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_container()

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    sink = request_json.get("sink")
    

    return parse(source, sink)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return namespace(cls)

@app.route('/constant_output', methods=['POST'])
def call_constant_output():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return constant_output(cls)

@app.route('/custom_eval_extended', methods=['POST'])
def call_custom_eval_extended():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    extend = request_json.get("extend")
    

    return custom_eval_extended(ctx, extend)

@app.route('/custom_eval', methods=['POST'])
def call_custom_eval():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return custom_eval(ctx, part)

@app.route('/configure_rdflib', methods=['POST'])
def call_configure_rdflib():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return configure_rdflib()

@app.route('/test_entry_rdflib', methods=['POST'])
def call_test_entry_rdflib():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    monkeypatch = request_json.get("monkeypatch")
    
    exit_stack = request_json.get("exit_stack")
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry_rdflib(monkeypatch, exit_stack, manifest_entry)

@app.route('/check_entry', methods=['POST'])
def call_check_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry = request_json.get("entry")
    

    return check_entry(entry)

@app.route('/test_entry', methods=['POST'])
def call_test_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry(manifest_entry)

@app.route('/test_non_normative_entry', methods=['POST'])
def call_test_non_normative_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_non_normative_entry(manifest_entry)

@app.route('/check_entry', methods=['POST'])
def call_check_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry = request_json.get("entry")
    

    return check_entry(entry)

@app.route('/test_entry', methods=['POST'])
def call_test_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry(manifest_entry)

@app.route('/check_entry', methods=['POST'])
def call_check_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry = request_json.get("entry")
    

    return check_entry(entry)

@app.route('/test_entry', methods=['POST'])
def call_test_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry(manifest_entry)

@app.route('/check_entry', methods=['POST'])
def call_check_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry = request_json.get("entry")
    

    return check_entry(entry)

@app.route('/test_entry', methods=['POST'])
def call_test_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry(manifest_entry)

@app.route('/configure_rdflib', methods=['POST'])
def call_configure_rdflib():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return configure_rdflib()

@app.route('/test_entry_sparql10', methods=['POST'])
def call_test_entry_sparql10():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    monkeypatch = request_json.get("monkeypatch")
    
    exit_stack = request_json.get("exit_stack")
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry_sparql10(monkeypatch, exit_stack, manifest_entry)

@app.route('/check_entry', methods=['POST'])
def call_check_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    entry = request_json.get("entry")
    

    return check_entry(entry)

@app.route('/test_entry', methods=['POST'])
def call_test_entry():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry(manifest_entry)

@app.route('/configure_rdflib', methods=['POST'])
def call_configure_rdflib():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return configure_rdflib()

@app.route('/test_entry_sparql11', methods=['POST'])
def call_test_entry_sparql11():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    monkeypatch = request_json.get("monkeypatch")
    
    exit_stack = request_json.get("exit_stack")
    
    manifest_entry = request_json.get("manifest_entry")
    

    return test_entry_sparql11(monkeypatch, exit_stack, manifest_entry)

@app.route('/n3', methods=['POST'])
def call_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test = request_json.get("test")
    

    return n3(test)

@app.route('/test_manifest', methods=['POST'])
def call_test_manifest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdf_test_uri = request_json.get("rdf_test_uri")
    
    type = request_json.get("type")
    
    rdf_test = request_json.get("rdf_test")
    

    return test_manifest(rdf_test_uri, type, rdf_test)

@app.route('/test_issue', methods=['POST'])
def call_test_issue():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue()

@app.route('/test', methods=['POST'])
def call_test():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test()

@app.route('/test_sparql_error_implicit_bind', methods=['POST'])
def call_test_sparql_error_implicit_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_error_implicit_bind()

@app.route('/test_sparql_error_explicit_bind', methods=['POST'])
def call_test_sparql_error_explicit_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_error_explicit_bind()

@app.route('/test_escaping_of_triple_doublequotes', methods=['POST'])
def call_test_escaping_of_triple_doublequotes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_escaping_of_triple_doublequotes()

@app.route('/test_failing_parse_of_literal_with_xmllang_attr', methods=['POST'])
def call_test_failing_parse_of_literal_with_xmllang_attr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_failing_parse_of_literal_with_xmllang_attr()

@app.route('/test_issue492', methods=['POST'])
def call_test_issue492():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue492()

@app.route('/test_issue_733', methods=['POST'])
def call_test_issue_733():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_733()

@app.route('/test_issue_733_independant', methods=['POST'])
def call_test_issue_733_independant():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_733_independant()

@app.route('/test_a', methods=['POST'])
def call_test_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_a()

@app.route('/test_b', methods=['POST'])
def call_test_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_b()

@app.route('/test_c', methods=['POST'])
def call_test_c():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_c()

@app.route('/test_d', methods=['POST'])
def call_test_d():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_d()

@app.route('/test_issue_923', methods=['POST'])
def call_test_issue_923():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_923()

@app.route('/test_issue_1043', methods=['POST'])
def call_test_issue_1043():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1043()

@app.route('/test_broken_rdfxml', methods=['POST'])
def call_test_broken_rdfxml():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_broken_rdfxml()

@app.route('/test_parsetype_resource', methods=['POST'])
def call_test_parsetype_resource():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parsetype_resource()

@app.route('/test_sample', methods=['POST'])
def call_test_sample():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sample()

@app.route('/test_count', methods=['POST'])
def call_test_count():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_count()

@app.route('/test_issue893_ds_unpickle', methods=['POST'])
def call_test_issue893_ds_unpickle():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue893_ds_unpickle()

@app.route('/test_issue604', methods=['POST'])
def call_test_issue604():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue604()

@app.route('/test_issue_715', methods=['POST'])
def call_test_issue_715():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_715()

@app.route('/test_issue579', methods=['POST'])
def call_test_issue579():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue579()

@app.route('/prefix_data', methods=['POST'])
def call_prefix_data():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return prefix_data()

@app.route('/base_data', methods=['POST'])
def call_base_data():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return base_data()

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_parse_successful_prefix_with_hash', methods=['POST'])
def call_test_parse_successful_prefix_with_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    prefix_data = request_json.get("prefix_data")
    

    return test_parse_successful_prefix_with_hash(graph, prefix_data)

@app.route('/test_parse_successful_base_with_hash', methods=['POST'])
def call_test_parse_successful_base_with_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    base_data = request_json.get("base_data")
    

    return test_parse_successful_base_with_hash(graph, base_data)

@app.route('/test_bnode_id_differs_in_fork', methods=['POST'])
def call_test_bnode_id_differs_in_fork():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_id_differs_in_fork()

@app.route('/test_issue_1484_json', methods=['POST'])
def call_test_issue_1484_json():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1484_json()

@app.route('/test_issue_1484_str', methods=['POST'])
def call_test_issue_1484_str():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1484_str()

@app.route('/test_no_spurious_semicolon', methods=['POST'])
def call_test_no_spurious_semicolon():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_spurious_semicolon()

@app.route('/test_one_spurious_semicolon', methods=['POST'])
def call_test_one_spurious_semicolon():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_one_spurious_semicolon()

@app.route('/test_one_spurious_semicolon_no_perdiod', methods=['POST'])
def call_test_one_spurious_semicolon_no_perdiod():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_one_spurious_semicolon_no_perdiod()

@app.route('/test_two_spurious_semicolons_no_period', methods=['POST'])
def call_test_two_spurious_semicolons_no_period():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_two_spurious_semicolons_no_period()

@app.route('/test_one_spurious_semicolons_bnode', methods=['POST'])
def call_test_one_spurious_semicolons_bnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_one_spurious_semicolons_bnode()

@app.route('/test_pathological', methods=['POST'])
def call_test_pathological():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_pathological()

@app.route('/test_mixing_spurious_semicolons_and_commas', methods=['POST'])
def call_test_mixing_spurious_semicolons_and_commas():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_mixing_spurious_semicolons_and_commas()

@app.route('/test_issue655', methods=['POST'])
def call_test_issue655():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue655()

@app.route('/test_skolem_de_skolem_roundtrip', methods=['POST'])
def call_test_skolem_de_skolem_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_skolem_de_skolem_roundtrip()

@app.route('/test_issue523', methods=['POST'])
def call_test_issue523():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue523()

@app.route('/test_named_graph_with_fragment', methods=['POST'])
def call_test_named_graph_with_fragment():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_named_graph_with_fragment()

@app.route('/test_issue_801', methods=['POST'])
def call_test_issue_801():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_801()

@app.route('/test1', methods=['POST'])
def call_test1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test1()

@app.route('/test2', methods=['POST'])
def call_test2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test2()

@app.route('/test_1998', methods=['POST'])
def call_test_1998():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_1998()

@app.route('/test_sparql_unicode', methods=['POST'])
def call_test_sparql_unicode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_unicode()

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return get_graph(request)

@app.route('/test_scenarios_1', methods=['POST'])
def call_test_scenarios_1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_1(get_graph)

@app.route('/test_scenarios_2', methods=['POST'])
def call_test_scenarios_2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_2(get_graph)

@app.route('/test_scenarios_3', methods=['POST'])
def call_test_scenarios_3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_3(get_graph)

@app.route('/test_scenarios_4', methods=['POST'])
def call_test_scenarios_4():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_4(get_graph)

@app.route('/test_scenarios_5', methods=['POST'])
def call_test_scenarios_5():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_5(get_graph)

@app.route('/test_scenarios_6', methods=['POST'])
def call_test_scenarios_6():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_6(get_graph)

@app.route('/test_scenarios_7', methods=['POST'])
def call_test_scenarios_7():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_7(get_graph)

@app.route('/test_scenarios_8', methods=['POST'])
def call_test_scenarios_8():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_8(get_graph)

@app.route('/test_scenarios_9', methods=['POST'])
def call_test_scenarios_9():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_scenarios_9(get_graph)

@app.route('/test_issue_248', methods=['POST'])
def call_test_issue_248():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_248()

@app.route('/test_issue_1141_1', methods=['POST'])
def call_test_issue_1141_1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1141_1()

@app.route('/test_issue_1141_2', methods=['POST'])
def call_test_issue_1141_2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1141_2()

@app.route('/test_issue_1141_3', methods=['POST'])
def call_test_issue_1141_3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_1141_3()

@app.route('/test_issue_920', methods=['POST'])
def call_test_issue_920():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_920()

@app.route('/test_broken_add', methods=['POST'])
def call_test_broken_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_broken_add()

@app.route('/test_issue532', methods=['POST'])
def call_test_issue532():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue532()

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/test_namespace_manager', methods=['POST'])
def call_test_namespace_manager():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_namespace_manager(graph)

@app.route('/test_turtle_serialization', methods=['POST'])
def call_test_turtle_serialization():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return test_turtle_serialization(graph)

@app.route('/test_trig_default_graph', methods=['POST'])
def call_test_trig_default_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_trig_default_graph()

@app.route('/test_sparql_empty_no_row', methods=['POST'])
def call_test_sparql_empty_no_row():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_empty_no_row()

@app.route('/make_node', methods=['POST'])
def call_make_node():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_node()

@app.route('/test_bnode_id_gen_in_thread', methods=['POST'])
def call_test_bnode_id_gen_in_thread():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bnode_id_gen_in_thread()

@app.route('/test_collection_render', methods=['POST'])
def call_test_collection_render():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_collection_render()

@app.route('/test_nquads_default_graph', methods=['POST'])
def call_test_nquads_default_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nquads_default_graph()

@app.route('/test_a', methods=['POST'])
def call_test_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_a()

@app.route('/test_b', methods=['POST'])
def call_test_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_b()

@app.route('/test_c', methods=['POST'])
def call_test_c():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_c()

@app.route('/test_d', methods=['POST'])
def call_test_d():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_d()

@app.route('/test_e', methods=['POST'])
def call_test_e():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_e()

@app.route('/test_xml_a', methods=['POST'])
def call_test_xml_a():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_xml_a()

@app.route('/test_xml_b', methods=['POST'])
def call_test_xml_b():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_xml_b()

@app.route('/test_xml_e', methods=['POST'])
def call_test_xml_e():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_xml_e()

@app.route('/test_turtle_namespace_prefixes', methods=['POST'])
def call_test_turtle_namespace_prefixes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_turtle_namespace_prefixes()

@app.route('/test_collection_with_duplicates', methods=['POST'])
def call_test_collection_with_duplicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_collection_with_duplicates()

@app.route('/test_980', methods=['POST'])
def call_test_980():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_980()

@app.route('/test_ns_localname_roundtrip', methods=['POST'])
def call_test_ns_localname_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_ns_localname_roundtrip()

@app.route('/test_issue_939', methods=['POST'])
def call_test_issue_939():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_issue_939()

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    querystr = request_json.get("querystr")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    

    return query(querystr, initNs, initBindings)

@app.route('/setup', methods=['POST'])
def call_setup():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup()

@app.route('/teardown', methods=['POST'])
def call_teardown():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return teardown()

@app.route('/test_cast_string_to_string', methods=['POST'])
def call_test_cast_string_to_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_string()

@app.route('/test_cast_int_to_string', methods=['POST'])
def call_test_cast_int_to_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_int_to_string()

@app.route('/test_cast_float_to_string', methods=['POST'])
def call_test_cast_float_to_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_float_to_string()

@app.route('/test_cast_bool_to_string', methods=['POST'])
def call_test_cast_bool_to_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_bool_to_string()

@app.route('/test_cast_iri_to_string', methods=['POST'])
def call_test_cast_iri_to_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_iri_to_string()

@app.route('/test_cast_datetime_to_datetime', methods=['POST'])
def call_test_cast_datetime_to_datetime():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_datetime_to_datetime()

@app.route('/test_cast_string_to_datetime', methods=['POST'])
def call_test_cast_string_to_datetime():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_datetime()

@app.route('/test_cast_string_to_float', methods=['POST'])
def call_test_cast_string_to_float():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_float()

@app.route('/test_cast_int_to_float', methods=['POST'])
def call_test_cast_int_to_float():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_int_to_float()

@app.route('/test_cast_float_to_float', methods=['POST'])
def call_test_cast_float_to_float():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_float_to_float()

@app.route('/test_cast_double_to_float', methods=['POST'])
def call_test_cast_double_to_float():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_double_to_float()

@app.route('/test_cast_decimal_to_float', methods=['POST'])
def call_test_cast_decimal_to_float():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_decimal_to_float()

@app.route('/test_cast_string_to_double', methods=['POST'])
def call_test_cast_string_to_double():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_double()

@app.route('/test_cast_int_to_double', methods=['POST'])
def call_test_cast_int_to_double():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_int_to_double()

@app.route('/test_cast_float_to_double', methods=['POST'])
def call_test_cast_float_to_double():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_float_to_double()

@app.route('/test_cast_double_to_double', methods=['POST'])
def call_test_cast_double_to_double():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_double_to_double()

@app.route('/test_cast_decimal_to_double', methods=['POST'])
def call_test_cast_decimal_to_double():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_decimal_to_double()

@app.route('/test_cast_string_to_decimal', methods=['POST'])
def call_test_cast_string_to_decimal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_decimal()

@app.route('/test_cast_int_to_decimal', methods=['POST'])
def call_test_cast_int_to_decimal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_int_to_decimal()

@app.route('/test_cast_float_to_decimal', methods=['POST'])
def call_test_cast_float_to_decimal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_float_to_decimal()

@app.route('/test_cast_double_to_decimal', methods=['POST'])
def call_test_cast_double_to_decimal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_double_to_decimal()

@app.route('/test_cast_decimal_to_decimal', methods=['POST'])
def call_test_cast_decimal_to_decimal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_decimal_to_decimal()

@app.route('/test_cast_string_to_int', methods=['POST'])
def call_test_cast_string_to_int():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_int()

@app.route('/test_cast_int_to_int', methods=['POST'])
def call_test_cast_int_to_int():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_int_to_int()

@app.route('/test_cast_string_to_bool', methods=['POST'])
def call_test_cast_string_to_bool():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_string_to_bool()

@app.route('/test_cast_bool_to_bool', methods=['POST'])
def call_test_cast_bool_to_bool():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_cast_bool_to_bool()

@app.route('/test_call_exf', methods=['POST'])
def call_test_call_exf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_call_exf()

@app.route('/f', methods=['POST'])
def call_f():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    x = request_json.get("x")
    
    y = request_json.get("y")
    

    return f(x, y)

@app.route('/setUp', methods=['POST'])
def call_setUp():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setUp()

@app.route('/tearDown', methods=['POST'])
def call_tearDown():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return tearDown()

@app.route('/test_register_twice_fail', methods=['POST'])
def call_test_register_twice_fail():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_register_twice_fail()

@app.route('/test_register_override', methods=['POST'])
def call_test_register_override():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_register_override()

@app.route('/test_wrong_unregister_warns', methods=['POST'])
def call_test_wrong_unregister_warns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_wrong_unregister_warns()

@app.route('/test_f', methods=['POST'])
def call_test_f():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_f()

@app.route('/test_f_too_few_args', methods=['POST'])
def call_test_f_too_few_args():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_f_too_few_args()

@app.route('/test_f_too_many_args', methods=['POST'])
def call_test_f_too_many_args():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_f_too_many_args()

@app.route('/test_chunk_by_triples', methods=['POST'])
def call_test_chunk_by_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    

    return test_chunk_by_triples(tmp_path)

@app.route('/test_chunk_by_size', methods=['POST'])
def call_test_chunk_by_size():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    

    return test_chunk_by_size(tmp_path)

@app.route('/test_chuking', methods=['POST'])
def call_test_chuking():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    test_graph_path = request_json.get("test_graph_path")
    
    max_triples = request_json.get("max_triples")
    
    max_file_size_kb = request_json.get("max_file_size_kb")
    
    write_prefixes = request_json.get("write_prefixes")
    
    set_output_dir = request_json.get("set_output_dir")
    
    expected_file_count = request_json.get("expected_file_count")
    

    return test_chuking(tmp_path, test_graph_path, max_triples, max_file_size_kb, write_prefixes, set_output_dir, expected_file_count)

@app.route('/test_csv2rdf_cli', methods=['POST'])
def call_test_csv2rdf_cli():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_csv2rdf_cli()

@app.route('/test_csv2rdf_cli_fileout', methods=['POST'])
def call_test_csv2rdf_cli_fileout():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_csv2rdf_cli_fileout()

@app.route('/test_csv2rdf_config_file_opened', methods=['POST'])
def call_test_csv2rdf_config_file_opened():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    config_mock = request_json.get("config_mock")
    

    return test_csv2rdf_config_file_opened(config_mock)

@app.route('/test_datetime_datetime_subs_issue', methods=['POST'])
def call_test_datetime_datetime_subs_issue():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datetime_datetime_subs_issue()

@app.route('/test_datetime_duration_subs', methods=['POST'])
def call_test_datetime_duration_subs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datetime_duration_subs()

@app.route('/test_datetime_duration_add', methods=['POST'])
def call_test_datetime_duration_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datetime_duration_add()

@app.route('/test_datetime_datetime_subs', methods=['POST'])
def call_test_datetime_datetime_subs():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datetime_datetime_subs()

@app.route('/data_path', methods=['POST'])
def call_data_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return data_path()

@app.route('/filename', methods=['POST'])
def call_filename():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return filename()

@app.route('/pytest_param', methods=['POST'])
def call_pytest_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return pytest_param()

@app.route('/test_all_files_used', methods=['POST'])
def call_test_all_files_used():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data_path = request_json.get("data_path")
    

    return test_all_files_used(data_path)

@app.route('/test_roundtrip', methods=['POST'])
def call_test_roundtrip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    test_spec = request_json.get("test_spec")
    
    data_path = request_json.get("data_path")
    

    return test_roundtrip(test_spec, data_path)

@app.route('/test_sparql_group_concat', methods=['POST'])
def call_test_sparql_group_concat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_group_concat()

@app.route('/test_sparql_blank_node_comma', methods=['POST'])
def call_test_sparql_blank_node_comma():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_blank_node_comma()

@app.route('/triple_set', methods=['POST'])
def call_triple_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return triple_set(graph)

@app.route('/test_insert_recursionlimit', methods=['POST'])
def call_test_insert_recursionlimit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_insert_recursionlimit()

@app.route('/test_insert_large', methods=['POST'])
def call_test_insert_large():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_insert_large()

@app.route('/do_insert', methods=['POST'])
def call_do_insert():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    resource_count = request_json.get("resource_count")
    

    return do_insert(resource_count)

@app.route('/test_empty_tsvresults_bindings', methods=['POST'])
def call_test_empty_tsvresults_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_empty_tsvresults_bindings()

@app.route('/test_select_result_parse', methods=['POST'])
def call_test_select_result_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    format = request_json.get("format")
    
    parse_outcome = request_json.get("parse_outcome")
    

    return test_select_result_parse(data, format, parse_outcome)

@app.route('/test_xsv_serialize', methods=['POST'])
def call_test_xsv_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    format = request_json.get("format")
    
    expected_result = request_json.get("expected_result")
    

    return test_xsv_serialize(node, format, expected_result)

@app.route('/select_result', methods=['POST'])
def call_select_result():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return select_result(rdfs_graph)

@app.route('/check_serialized', methods=['POST'])
def call_check_serialized():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    result = request_json.get("result")
    
    data = request_json.get("data")
    

    return check_serialized(format, result, data)

@app.route('/narrow_dest_param', methods=['POST'])
def call_narrow_dest_param():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    param = request_json.get("param")
    

    return narrow_dest_param(param)

@app.route('/make_select_result_serialize_parse_tests', methods=['POST'])
def call_make_select_result_serialize_parse_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_select_result_serialize_parse_tests()

@app.route('/test_select_result_serialize_parse', methods=['POST'])
def call_test_select_result_serialize_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    select_result = request_json.get("select_result")
    
    test_args = request_json.get("test_args")
    

    return test_select_result_serialize_parse(tmp_path, select_result, test_args)

@app.route('/serialize_select', methods=['POST'])
def call_serialize_select():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    select_result = request_json.get("select_result")
    
    format = request_json.get("format")
    
    encoding = request_json.get("encoding")
    

    return serialize_select(select_result, format, encoding)

@app.route('/make_select_result_parse_serialized_tests', methods=['POST'])
def call_make_select_result_parse_serialized_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_select_result_parse_serialized_tests()

@app.route('/test_select_result_parse_serialized', methods=['POST'])
def call_test_select_result_parse_serialized():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    select_result = request_json.get("select_result")
    
    test_args = request_json.get("test_args")
    

    return test_select_result_parse_serialized(tmp_path, select_result, test_args)

@app.route('/make_test_serialize_to_strdest_tests', methods=['POST'])
def call_make_test_serialize_to_strdest_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_test_serialize_to_strdest_tests()

@app.route('/test_serialize_to_strdest', methods=['POST'])
def call_test_serialize_to_strdest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    select_result = request_json.get("select_result")
    
    destination_type = request_json.get("destination_type")
    
    name_prefix = request_json.get("name_prefix")
    

    return test_serialize_to_strdest(tmp_path, select_result, destination_type, name_prefix)

@app.route('/test_serialize_to_fileuri_with_authortiy', methods=['POST'])
def call_test_serialize_to_fileuri_with_authortiy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    select_result = request_json.get("select_result")
    
    authority = request_json.get("authority")
    

    return test_serialize_to_fileuri_with_authortiy(tmp_path, select_result, authority)

@app.route('/test_service', methods=['POST'])
def call_test_service():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service()

@app.route('/test_service_with_bind', methods=['POST'])
def call_test_service_with_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_bind()

@app.route('/test_service_with_bound_solutions', methods=['POST'])
def call_test_service_with_bound_solutions():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_bound_solutions()

@app.route('/test_service_with_values', methods=['POST'])
def call_test_service_with_values():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_values()

@app.route('/test_service_with_implicit_select', methods=['POST'])
def call_test_service_with_implicit_select():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_implicit_select()

@app.route('/test_service_with_implicit_select_and_prefix', methods=['POST'])
def call_test_service_with_implicit_select_and_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_implicit_select_and_prefix()

@app.route('/test_service_with_implicit_select_and_base', methods=['POST'])
def call_test_service_with_implicit_select_and_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_implicit_select_and_base()

@app.route('/test_service_with_implicit_select_and_allcaps', methods=['POST'])
def call_test_service_with_implicit_select_and_allcaps():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_with_implicit_select_and_allcaps()

@app.route('/freeze_bindings', methods=['POST'])
def call_freeze_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bindings = request_json.get("bindings")
    

    return freeze_bindings(bindings)

@app.route('/test_simple_not_null', methods=['POST'])
def call_test_simple_not_null():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_simple_not_null()

@app.route('/test_service_node_types', methods=['POST'])
def call_test_service_node_types():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_service_node_types()

@app.route('/test_with_mock', methods=['POST'])
def call_test_with_mock():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    function_httpmock = request_json.get("function_httpmock")
    
    response_bindings = request_json.get("response_bindings")
    
    expected_result = request_json.get("expected_result")
    

    return test_with_mock(function_httpmock, response_bindings, expected_result)

@app.route('/test_inclusive', methods=['POST'])
def call_test_inclusive():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_inclusive()

@app.route('/test_default_from_1', methods=['POST'])
def call_test_default_from_1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_default_from_1()

@app.route('/test_default_from_2', methods=['POST'])
def call_test_default_from_2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_default_from_2()

@app.route('/test_named_from', methods=['POST'])
def call_test_named_from():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_named_from()

@app.route('/test_named_from_named_1', methods=['POST'])
def call_test_named_from_named_1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_named_from_named_1()

@app.route('/test_named_from_named_2', methods=['POST'])
def call_test_named_from_named_2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_named_from_named_2()

@app.route('/test_default_from_named', methods=['POST'])
def call_test_default_from_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_default_from_named()

@app.route('/test_from_and_from_named', methods=['POST'])
def call_test_from_and_from_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_from_and_from_named()

@app.route('/test_sparql_parse_reserved_char_percent_encoded', methods=['POST'])
def call_test_sparql_parse_reserved_char_percent_encoded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    reserved_char_percent_encoded = request_json.get("reserved_char_percent_encoded")
    

    return test_sparql_parse_reserved_char_percent_encoded(reserved_char_percent_encoded)

@app.route('/blank_graph', methods=['POST'])
def call_blank_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return blank_graph()

@app.route('/test_pnames', methods=['POST'])
def call_test_pnames():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    pname_ns = request_json.get("pname_ns")
    
    pname = request_json.get("pname")
    
    expected_result = request_json.get("expected_result")
    
    blank_graph = request_json.get("blank_graph")
    

    return test_pnames(pname_ns, pname, expected_result, blank_graph)

@app.route('/template_tst', methods=['POST'])
def call_template_tst():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    agg_func = request_json.get("agg_func")
    
    first = request_json.get("first")
    
    second = request_json.get("second")
    

    return template_tst(agg_func, first, second)

@app.route('/get_aggregates_tests', methods=['POST'])
def call_get_aggregates_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_aggregates_tests()

@app.route('/test_aggregates', methods=['POST'])
def call_test_aggregates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    agg_func = request_json.get("agg_func")
    
    first = request_json.get("first")
    
    second = request_json.get("second")
    

    return test_aggregates(checker, agg_func, first, second)

@app.route('/test_group_by_null', methods=['POST'])
def call_test_group_by_null():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_group_by_null()

@app.route('/test_values_outside_group_by', methods=['POST'])
def call_test_values_outside_group_by():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_values_outside_group_by()

@app.route('/test_regex', methods=['POST'])
def call_test_regex():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_regex()

@app.route('/test_arithmetic', methods=['POST'])
def call_test_arithmetic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_arithmetic()

@app.route('/test_arithmetic_var', methods=['POST'])
def call_test_arithmetic_var():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_arithmetic_var()

@app.route('/test_comparisons', methods=['POST'])
def call_test_comparisons():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_comparisons()

@app.route('/test_comparisons_var', methods=['POST'])
def call_test_comparisons_var():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_comparisons_var()

@app.route('/test_and_or', methods=['POST'])
def call_test_and_or():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_and_or()

@app.route('/test_load_into_default', methods=['POST'])
def call_test_load_into_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_factory = request_json.get("graph_factory")
    
    source = request_json.get("source")
    

    return test_load_into_default(graph_factory, source)

@app.route('/test_load_into_named', methods=['POST'])
def call_test_load_into_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph_factory = request_json.get("graph_factory")
    
    source = request_json.get("source")
    

    return test_load_into_named(graph_factory, source)

@app.route('/test_group_concat_distinct', methods=['POST'])
def call_test_group_concat_distinct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_group_concat_distinct()

@app.route('/test_sum_distinct', methods=['POST'])
def call_test_sum_distinct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sum_distinct()

@app.route('/test_avg_distinct', methods=['POST'])
def call_test_avg_distinct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_avg_distinct()

@app.route('/test_count_distinct', methods=['POST'])
def call_test_count_distinct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_count_distinct()

@app.route('/test_count_optional_values', methods=['POST'])
def call_test_count_optional_values():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_count_optional_values()

@app.route('/test_query_prepares_expanded', methods=['POST'])
def call_test_query_prepares_expanded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_query_prepares_expanded()

@app.route('/test_query_prepares_prefixed', methods=['POST'])
def call_test_query_prepares_prefixed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_query_prepares_prefixed()

@app.route('/test_escapes_and_query_turtle_expanded', methods=['POST'])
def call_test_escapes_and_query_turtle_expanded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_escapes_and_query_turtle_expanded()

@app.route('/test_escapes_and_query_turtle_prefixed', methods=['POST'])
def call_test_escapes_and_query_turtle_prefixed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_escapes_and_query_turtle_prefixed()

@app.route('/test_escapes_and_query_jsonld_expanded', methods=['POST'])
def call_test_escapes_and_query_jsonld_expanded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_escapes_and_query_jsonld_expanded()

@app.route('/test_escapes_and_query_jsonld_prefixed', methods=['POST'])
def call_test_escapes_and_query_jsonld_prefixed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_escapes_and_query_jsonld_prefixed()

@app.route('/test_nested_filter_outer_binding_propagation', methods=['POST'])
def call_test_nested_filter_outer_binding_propagation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nested_filter_outer_binding_propagation()

@app.route('/test_nested_filter_outermost_binding_propagation', methods=['POST'])
def call_test_nested_filter_outermost_binding_propagation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_nested_filter_outermost_binding_propagation()

@app.route('/test_graph_prefix', methods=['POST'])
def call_test_graph_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_prefix()

@app.route('/test_variable_order', methods=['POST'])
def call_test_variable_order():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_variable_order()

@app.route('/test_sparql_bnodelist', methods=['POST'])
def call_test_sparql_bnodelist():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_bnodelist()

@app.route('/test_sparql_polist', methods=['POST'])
def call_test_sparql_polist():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_polist()

@app.route('/test_complex_sparql_construct', methods=['POST'])
def call_test_complex_sparql_construct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_complex_sparql_construct()

@app.route('/test_sparql_update_with_bnode', methods=['POST'])
def call_test_sparql_update_with_bnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_update_with_bnode()

@app.route('/test_sparql_update_with_bnode_serialize_parse', methods=['POST'])
def call_test_sparql_update_with_bnode_serialize_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_sparql_update_with_bnode_serialize_parse()

@app.route('/test_bindings', methods=['POST'])
def call_test_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_bindings()

@app.route('/test_named_filter_graph_query', methods=['POST'])
def call_test_named_filter_graph_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_named_filter_graph_query()

@app.route('/test_txtresult', methods=['POST'])
def call_test_txtresult():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_txtresult()

@app.route('/test_property_bindings', methods=['POST'])
def call_test_property_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return test_property_bindings(rdfs_graph)

@app.route('/test_call_function', methods=['POST'])
def call_test_call_function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_call_function()

@app.route('/test_custom_eval', methods=['POST'])
def call_test_custom_eval():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_custom_eval()

@app.route('/test_custom_eval_exception', methods=['POST'])
def call_test_custom_eval_exception():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    result_consumer = request_json.get("result_consumer")
    
    exception_type = request_json.get("exception_type")
    

    return test_custom_eval_exception(result_consumer, exception_type)

@app.route('/test_operator_exception', methods=['POST'])
def call_test_operator_exception():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    result_consumer = request_json.get("result_consumer")
    
    exception_type = request_json.get("exception_type")
    
    monkeypatch = request_json.get("monkeypatch")
    

    return test_operator_exception(result_consumer, exception_type, monkeypatch)

@app.route('/test_queries', methods=['POST'])
def call_test_queries():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query_string = request_json.get("query_string")
    
    expected_bindings = request_json.get("expected_bindings")
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return test_queries(query_string, expected_bindings, rdfs_graph)

@app.route('/test_sparql_describe', methods=['POST'])
def call_test_sparql_describe():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query_string = request_json.get("query_string")
    
    expected_subjects = request_json.get("expected_subjects")
    
    expected_size = request_json.get("expected_size")
    
    rdfs_graph = request_json.get("rdfs_graph")
    

    return test_sparql_describe(query_string, expected_subjects, expected_size, rdfs_graph)

@app.route('/test_expand_unicode_escapes', methods=['POST'])
def call_test_expand_unicode_escapes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    arg = request_json.get("arg")
    
    expected_result = request_json.get("expected_result")
    
    expected_valid = request_json.get("expected_valid")
    

    return test_expand_unicode_escapes(arg, expected_result, expected_valid)

@app.route('/test_select_star_sub_select', methods=['POST'])
def call_test_select_star_sub_select():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_select_star_sub_select()

@app.route('/test_select_star_multiple_sub_select_star', methods=['POST'])
def call_test_select_star_multiple_sub_select_star():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_select_star_multiple_sub_select_star()

@app.route('/test_select_star_multiple_sub_select_mixed_projections', methods=['POST'])
def call_test_select_star_multiple_sub_select_mixed_projections():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_select_star_multiple_sub_select_mixed_projections()

@app.route('/test_select_star_multiple_sub_select_defined_projections', methods=['POST'])
def call_test_select_star_multiple_sub_select_defined_projections():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_select_star_multiple_sub_select_defined_projections()

@app.route('/test_construct_init_bindings', methods=['POST'])
def call_test_construct_init_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_construct_init_bindings()

@app.route('/test_prepare_update', methods=['POST'])
def call_test_prepare_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prepare_update()

@app.route('/test_prepare_query', methods=['POST'])
def call_test_prepare_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prepare_query()

@app.route('/test_str', methods=['POST'])
def call_test_str():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_str()

@app.route('/test_is_iri', methods=['POST'])
def call_test_is_iri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_is_iri()

@app.route('/test_is_blank', methods=['POST'])
def call_test_is_blank():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_is_blank()

@app.route('/test_is_literal', methods=['POST'])
def call_test_is_literal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_is_literal()

@app.route('/test_ucase', methods=['POST'])
def call_test_ucase():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_ucase()

@app.route('/test_no_func', methods=['POST'])
def call_test_no_func():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_func()

@app.route('/test_order_by', methods=['POST'])
def call_test_order_by():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_order_by()

@app.route('/test_order_by_func', methods=['POST'])
def call_test_order_by_func():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_order_by_func()

@app.route('/test_no_func_limit', methods=['POST'])
def call_test_no_func_limit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_func_limit()

@app.route('/test_order_by_limit', methods=['POST'])
def call_test_order_by_limit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_order_by_limit()

@app.route('/test_order_by_func_limit', methods=['POST'])
def call_test_order_by_func_limit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_order_by_func_limit()

@app.route('/test_no_func_offset', methods=['POST'])
def call_test_no_func_offset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_func_offset()

@app.route('/test_no_func_limit_offset', methods=['POST'])
def call_test_no_func_limit_offset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_no_func_limit_offset()

@app.route('/test_order_by_limit_offset', methods=['POST'])
def call_test_order_by_limit_offset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_order_by_limit_offset()

@app.route('/test_order_by_func_limit_offset', methods=['POST'])
def call_test_order_by_func_limit_offset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_order_by_func_limit_offset()

@app.route('/test_distinct', methods=['POST'])
def call_test_distinct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_distinct()

@app.route('/test_distinct_order_by', methods=['POST'])
def call_test_distinct_order_by():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_distinct_order_by()

@app.route('/test_distinct_order_by_limit', methods=['POST'])
def call_test_distinct_order_by_limit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_distinct_order_by_limit()

@app.route('/test_prepare', methods=['POST'])
def call_test_prepare():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_prepare()

@app.route('/test_data', methods=['POST'])
def call_test_data():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_data()

@app.route('/test_ask', methods=['POST'])
def call_test_ask():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_ask()

@app.route('/test_string_key', methods=['POST'])
def call_test_string_key():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_string_key()

@app.route('/test_string_key_with_question_mark', methods=['POST'])
def call_test_string_key_with_question_mark():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_string_key_with_question_mark()

@app.route('/test_variable_key', methods=['POST'])
def call_test_variable_key():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_variable_key()

@app.route('/test_variable_key_with_question_mark', methods=['POST'])
def call_test_variable_key_with_question_mark():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_variable_key_with_question_mark()

@app.route('/test_filter', methods=['POST'])
def call_test_filter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_filter()

@app.route('/test_date_cast', methods=['POST'])
def call_test_date_cast():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_date_cast()

@app.route('/test_datetime_cast', methods=['POST'])
def call_test_datetime_cast():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datetime_cast()

@app.route('/test_datetime_cast_type_error', methods=['POST'])
def call_test_datetime_cast_type_error():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_datetime_cast_type_error()

@app.route('/test_function', methods=['POST'])
def call_test_function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expression = request_json.get("expression")
    
    expected_result = request_json.get("expected_result")
    

    return test_function(expression, expected_result)

@app.route('/test_lang_range_check', methods=['POST'])
def call_test_lang_range_check():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    literal = request_json.get("literal")
    
    range = request_json.get("range")
    
    expected_result = request_json.get("expected_result")
    

    return test_lang_range_check(literal, range, expected_result)

@app.route('/test_exclusive', methods=['POST'])
def call_test_exclusive():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_exclusive()

@app.route('/test_from', methods=['POST'])
def call_test_from():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_from()

@app.route('/test_from_named', methods=['POST'])
def call_test_from_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_from_named()

@app.route('/test_from_and_from_named', methods=['POST'])
def call_test_from_and_from_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_from_and_from_named()

@app.route('/test_ask_from', methods=['POST'])
def call_test_ask_from():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_ask_from()

@app.route('/get_bind_tests', methods=['POST'])
def call_get_bind_tests():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_bind_tests()

@app.route('/test_bind', methods=['POST'])
def call_test_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    checker = request_json.get("checker")
    
    expr = request_json.get("expr")
    
    var = request_json.get("var")
    
    obj = request_json.get("obj")
    

    return test_bind(checker, expr, var, obj)

@app.route('/setup_class', methods=['POST'])
def call_setup_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return setup_class(cls)

@app.route('/teardown_class', methods=['POST'])
def call_teardown_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return teardown_class(cls)

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/teardown_method', methods=['POST'])
def call_teardown_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return teardown_method()

@app.route('/test_graph_update', methods=['POST'])
def call_test_graph_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_update()

@app.route('/test_update_encoding', methods=['POST'])
def call_test_update_encoding():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_update_encoding()

@app.route('/test_content_type', methods=['POST'])
def call_test_content_type():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_content_type()

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return get_graph(request)

@app.route('/test_memory_store', methods=['POST'])
def call_test_memory_store():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_memory_store(get_graph)

@app.route('/make_test_query_construct_format_cases', methods=['POST'])
def call_make_test_query_construct_format_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_test_query_construct_format_cases()

@app.route('/test_query_construct_format', methods=['POST'])
def call_test_query_construct_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    function_httpmock = request_json.get("function_httpmock")
    
    expected_graph = request_json.get("expected_graph")
    
    response_body = request_json.get("response_body")
    
    response_headers = request_json.get("response_headers")
    

    return test_query_construct_format(function_httpmock, expected_graph, response_body, response_headers)

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_graph()

@app.route('/test_write', methods=['POST'])
def call_test_write():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_write(get_graph)

@app.route('/test_read', methods=['POST'])
def call_test_read():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_read(get_graph)

@app.route('/test_sparql_query', methods=['POST'])
def call_test_sparql_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_sparql_query(get_graph)

@app.route('/test_sparql_insert', methods=['POST'])
def call_test_sparql_insert():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_sparql_insert(get_graph)

@app.route('/test_multigraph', methods=['POST'])
def call_test_multigraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_multigraph(get_graph)

@app.route('/test_open_shut', methods=['POST'])
def call_test_open_shut():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_open_shut(get_graph)

@app.route('/test_query_url_construct_format', methods=['POST'])
def call_test_query_url_construct_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    function_httpmock = request_json.get("function_httpmock")
    
    graph_identifier = request_json.get("graph_identifier")
    

    return test_query_url_construct_format(function_httpmock, graph_identifier)

@app.route('/test_to_bits_from_bits_round_trip', methods=['POST'])
def call_test_to_bits_from_bits_round_trip():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_to_bits_from_bits_round_trip()

@app.route('/test_literal_cases', methods=['POST'])
def call_test_literal_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_literal_cases()

@app.route('/test_pickle', methods=['POST'])
def call_test_pickle():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_pickle()

@app.route('/test_graph_modify_fails', methods=['POST'])
def call_test_graph_modify_fails():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    call = request_json.get("call")
    
    exception_type = request_json.get("exception_type")
    

    return test_graph_modify_fails(call, exception_type)

@app.route('/setup_class', methods=['POST'])
def call_setup_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return setup_class(cls)

@app.route('/teardown_class', methods=['POST'])
def call_teardown_class():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return teardown_class(cls)

@app.route('/setup_method', methods=['POST'])
def call_setup_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_method()

@app.route('/teardown_method', methods=['POST'])
def call_teardown_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return teardown_method()

@app.route('/test_query', methods=['POST'])
def call_test_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_query()

@app.route('/test_init_ns', methods=['POST'])
def call_test_init_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_init_ns()

@app.route('/test_noinit_ns', methods=['POST'])
def call_test_noinit_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_noinit_ns()

@app.route('/test_query_with_added_prolog', methods=['POST'])
def call_test_query_with_added_prolog():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_query_with_added_prolog()

@app.route('/test_query_with_added_rdf_prolog', methods=['POST'])
def call_test_query_with_added_rdf_prolog():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_query_with_added_rdf_prolog()

@app.route('/test_counting_graph_and_store_queries', methods=['POST'])
def call_test_counting_graph_and_store_queries():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_counting_graph_and_store_queries()

@app.route('/setup_mocked_endpoint', methods=['POST'])
def call_setup_mocked_endpoint():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setup_mocked_endpoint()

@app.route('/do_POST', methods=['POST'])
def call_do_POST():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return do_POST()

@app.route('/do_GET', methods=['POST'])
def call_do_GET():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return do_GET()

@app.route('/get_store', methods=['POST'])
def call_get_store():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return get_store(request)

@app.route('/test_add', methods=['POST'])
def call_test_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_store = request_json.get("get_store")
    

    return test_add(get_store)

@app.route('/test_remove', methods=['POST'])
def call_test_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_store = request_json.get("get_store")
    

    return test_remove(get_store)

@app.route('/test_triples', methods=['POST'])
def call_test_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_store = request_json.get("get_store")
    

    return test_triples(get_store)

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_graph()

@app.route('/test_add_commit', methods=['POST'])
def call_test_add_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_add_commit(get_graph)

@app.route('/test_remove_commit', methods=['POST'])
def call_test_remove_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_remove_commit(get_graph)

@app.route('/test_multiple_remove_commit', methods=['POST'])
def call_test_multiple_remove_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_multiple_remove_commit(get_graph)

@app.route('/test_noop_add_commit', methods=['POST'])
def call_test_noop_add_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_noop_add_commit(get_graph)

@app.route('/test_noop_remove_commit', methods=['POST'])
def call_test_noop_remove_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_noop_remove_commit(get_graph)

@app.route('/test_add_remove_commit', methods=['POST'])
def call_test_add_remove_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_add_remove_commit(get_graph)

@app.route('/test_remove_add_commit', methods=['POST'])
def call_test_remove_add_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_remove_add_commit(get_graph)

@app.route('/test_add_rollback', methods=['POST'])
def call_test_add_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_add_rollback(get_graph)

@app.route('/test_remove_rollback', methods=['POST'])
def call_test_remove_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_remove_rollback(get_graph)

@app.route('/test_multiple_remove_rollback', methods=['POST'])
def call_test_multiple_remove_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_multiple_remove_rollback(get_graph)

@app.route('/test_noop_add_rollback', methods=['POST'])
def call_test_noop_add_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_noop_add_rollback(get_graph)

@app.route('/test_noop_remove_rollback', methods=['POST'])
def call_test_noop_remove_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_noop_remove_rollback(get_graph)

@app.route('/test_add_remove_rollback', methods=['POST'])
def call_test_add_remove_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_add_remove_rollback(get_graph)

@app.route('/test_remove_add_rollback', methods=['POST'])
def call_test_remove_add_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_remove_add_rollback(get_graph)

@app.route('/get_empty_graph', methods=['POST'])
def call_get_empty_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_empty_graph()

@app.route('/test_add_commit_empty', methods=['POST'])
def call_test_add_commit_empty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_empty_graph = request_json.get("get_empty_graph")
    

    return test_add_commit_empty(get_empty_graph)

@app.route('/test_add_rollback_empty', methods=['POST'])
def call_test_add_rollback_empty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_empty_graph = request_json.get("get_empty_graph")
    

    return test_add_rollback_empty(get_empty_graph)

@app.route('/get_concurrent_graph', methods=['POST'])
def call_get_concurrent_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_concurrent_graph()

@app.route('/test_commit_commit', methods=['POST'])
def call_test_commit_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_concurrent_graph = request_json.get("get_concurrent_graph")
    

    return test_commit_commit(get_concurrent_graph)

@app.route('/test_commit_rollback', methods=['POST'])
def call_test_commit_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_concurrent_graph = request_json.get("get_concurrent_graph")
    

    return test_commit_rollback(get_concurrent_graph)

@app.route('/test_rollback_commit', methods=['POST'])
def call_test_rollback_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_concurrent_graph = request_json.get("get_concurrent_graph")
    

    return test_rollback_commit(get_concurrent_graph)

@app.route('/test_rollback_rollback', methods=['POST'])
def call_test_rollback_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_concurrent_graph = request_json.get("get_concurrent_graph")
    

    return test_rollback_rollback(get_concurrent_graph)

@app.route('/get_embedded_graph', methods=['POST'])
def call_get_embedded_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_embedded_graph()

@app.route('/test_commit_commit_embedded', methods=['POST'])
def call_test_commit_commit_embedded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_embedded_graph = request_json.get("get_embedded_graph")
    

    return test_commit_commit_embedded(get_embedded_graph)

@app.route('/test_commit_rollback_embedded', methods=['POST'])
def call_test_commit_rollback_embedded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_embedded_graph = request_json.get("get_embedded_graph")
    

    return test_commit_rollback_embedded(get_embedded_graph)

@app.route('/test_rollback_commit_embedded', methods=['POST'])
def call_test_rollback_commit_embedded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_embedded_graph = request_json.get("get_embedded_graph")
    

    return test_rollback_commit_embedded(get_embedded_graph)

@app.route('/test_rollback_rollback_embedded', methods=['POST'])
def call_test_rollback_rollback_embedded():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_embedded_graph = request_json.get("get_embedded_graph")
    

    return test_rollback_rollback_embedded(get_embedded_graph)

@app.route('/make_graph', methods=['POST'])
def call_make_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    

    return make_graph(tmp_path, store_name)

@app.route('/make_store_info_dict', methods=['POST'])
def call_make_store_info_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_store_info_dict()

@app.route('/store_name', methods=['POST'])
def call_store_name():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return store_name(request)

@app.route('/check_ns', methods=['POST'])
def call_check_ns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    expected_bindings = request_json.get("expected_bindings")
    

    return check_ns(graph, expected_bindings)

@app.route('/test_simple_bind', methods=['POST'])
def call_test_simple_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    
    override = request_json.get("override")
    
    replace = request_json.get("replace")
    

    return test_simple_bind(tmp_path, store_name, override, replace)

@app.route('/test_bind_two_bind', methods=['POST'])
def call_test_bind_two_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    
    override = request_json.get("override")
    
    replace = request_json.get("replace")
    

    return test_bind_two_bind(tmp_path, store_name, override, replace)

@app.route('/test_rebind_uri_override', methods=['POST'])
def call_test_rebind_uri_override():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    
    replace = request_json.get("replace")
    

    return test_rebind_uri_override(tmp_path, store_name, replace)

@app.route('/test_rebind_uri_no_override', methods=['POST'])
def call_test_rebind_uri_no_override():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    
    replace = request_json.get("replace")
    

    return test_rebind_uri_no_override(tmp_path, store_name, replace)

@app.route('/test_rebind_prefix_replace', methods=['POST'])
def call_test_rebind_prefix_replace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    
    override = request_json.get("override")
    

    return test_rebind_prefix_replace(tmp_path, store_name, override)

@app.route('/test_rebind_prefix_reuse_uri_replace', methods=['POST'])
def call_test_rebind_prefix_reuse_uri_replace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tmp_path = request_json.get("tmp_path")
    
    store_name = request_json.get("store_name")
    
    reuse_override = request_json.get("reuse_override")
    
    reuse_replace = request_json.get("reuse_replace")
    

    return test_rebind_prefix_reuse_uri_replace(tmp_path, store_name, reuse_override, reuse_replace)

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_graph()

@app.route('/test_simple_graph', methods=['POST'])
def call_test_simple_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_simple_graph(get_graph)

@app.route('/test_conjunctive_default', methods=['POST'])
def call_test_conjunctive_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_conjunctive_default(get_graph)

@app.route('/test_u_update', methods=['POST'])
def call_test_u_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_u_update(get_graph)

@app.route('/test_u_update_with_initns', methods=['POST'])
def call_test_u_update_with_initns():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_u_update_with_initns(get_graph)

@app.route('/test_update_with_init_bindings', methods=['POST'])
def call_test_update_with_init_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_update_with_init_bindings(get_graph)

@app.route('/test_update_with_blank_node', methods=['POST'])
def call_test_update_with_blank_node():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_update_with_blank_node(get_graph)

@app.route('/test_update_w_with_blank_node_serialize_and_parse', methods=['POST'])
def call_test_update_w_with_blank_node_serialize_and_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_update_w_with_blank_node_serialize_and_parse(get_graph)

@app.route('/test_multiple_update_with_init_bindings', methods=['POST'])
def call_test_multiple_update_with_init_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_multiple_update_with_init_bindings(get_graph)

@app.route('/test_named_graph_update', methods=['POST'])
def call_test_named_graph_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_named_graph_update(get_graph)

@app.route('/test_named_graph_update_with_init_bindings', methods=['POST'])
def call_test_named_graph_update_with_init_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_named_graph_update_with_init_bindings(get_graph)

@app.route('/test_empty_named_graph', methods=['POST'])
def call_test_empty_named_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_empty_named_graph(get_graph)

@app.route('/test_empty_literal', methods=['POST'])
def call_test_empty_literal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_graph = request_json.get("get_graph")
    

    return test_empty_literal(get_graph)

@app.route('/test_namespaces', methods=['POST'])
def call_test_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_namespaces()

@app.route('/test_namespaces_via_manager', methods=['POST'])
def call_test_namespaces_via_manager():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_namespaces_via_manager()

@app.route('/test_propery_node_pickler', methods=['POST'])
def call_test_propery_node_pickler():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_propery_node_pickler()

@app.route('/get_dataset', methods=['POST'])
def call_get_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    request = request_json.get("request")
    

    return get_dataset(request)

@app.route('/test_graph_aware', methods=['POST'])
def call_test_graph_aware():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_dataset = request_json.get("get_dataset")
    

    return test_graph_aware(get_dataset)

@app.route('/test_default_graph', methods=['POST'])
def call_test_default_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_dataset = request_json.get("get_dataset")
    

    return test_default_graph(get_dataset)

@app.route('/test_not_union', methods=['POST'])
def call_test_not_union():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_dataset = request_json.get("get_dataset")
    

    return test_not_union(get_dataset)

@app.route('/test_iter', methods=['POST'])
def call_test_iter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    get_dataset = request_json.get("get_dataset")
    

    return test_iter(get_dataset)

@app.route('/test_graph_without_identifier', methods=['POST'])
def call_test_graph_without_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_graph_without_identifier()

@app.route('/test_not_deprecated', methods=['POST'])
def call_test_not_deprecated():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_not_deprecated()

@app.route('/make_load_default_and_named', methods=['POST'])
def call_make_load_default_and_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_load_default_and_named()

@app.route('/test_load_default_and_named', methods=['POST'])
def call_test_load_default_and_named():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    container_type = request_json.get("container_type")
    
    file_extension = request_json.get("file_extension")
    

    return test_load_default_and_named(container_type, file_extension)

@app.route('/make_load_default_only_cases', methods=['POST'])
def call_make_load_default_only_cases():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_load_default_only_cases()

@app.route('/test_load_default_only', methods=['POST'])
def call_test_load_default_only():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    container_type = request_json.get("container_type")
    
    file_extension = request_json.get("file_extension")
    

    return test_load_default_only(container_type, file_extension)

@app.route('/add_stuff', methods=['POST'])
def call_add_stuff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_stuff(graph)

@app.route('/test_unique_subjects', methods=['POST'])
def call_test_unique_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subjects()

@app.route('/test_unique_predicates', methods=['POST'])
def call_test_unique_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_predicates()

@app.route('/test_unique_objects', methods=['POST'])
def call_test_unique_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_objects()

@app.route('/test_unique_subject_predicates', methods=['POST'])
def call_test_unique_subject_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subject_predicates()

@app.route('/test_unique_predicate_objects', methods=['POST'])
def call_test_unique_predicate_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_predicate_objects()

@app.route('/test_unique_subject_objects', methods=['POST'])
def call_test_unique_subject_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_unique_subject_objects()

@app.route('/test_parse_berners_lee_card_into_dataset_default', methods=['POST'])
def call_test_parse_berners_lee_card_into_dataset_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_berners_lee_card_into_dataset_default()

@app.route('/test_parse_berners_lee_card_into_dataset_context', methods=['POST'])
def call_test_parse_berners_lee_card_into_dataset_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return test_parse_berners_lee_card_into_dataset_context()

@app.route('/autodoc_skip_member_handler', methods=['POST'])
def call_autodoc_skip_member_handler():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    app = request_json.get("app")
    
    what = request_json.get("what")
    
    name = request_json.get("name")
    
    obj = request_json.get("obj")
    
    skip = request_json.get("skip")
    
    options = request_json.get("options")
    

    return autodoc_skip_member_handler(app, what, name, obj, skip, options)

@app.route('/setup', methods=['POST'])
def call_setup():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    app = request_json.get("app")
    

    return setup(app)

@app.route('/hr', methods=['POST'])
def call_hr():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return hr()

@app.route('/n3', methods=['POST'])
def call_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return n3()

@app.route('/type_of_conatiner', methods=['POST'])
def call_type_of_conatiner():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return type_of_conatiner()

@app.route('/type_of_container', methods=['POST'])
def call_type_of_container():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return type_of_container()

@app.route('/index', methods=['POST'])
def call_index():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    

    return index(item)

@app.route('/items', methods=['POST'])
def call_items():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return items()

@app.route('/end', methods=['POST'])
def call_end():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return end()

@app.route('/append', methods=['POST'])
def call_append():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    

    return append(item)

@app.route('/append_multiple', methods=['POST'])
def call_append_multiple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return append_multiple(other)

@app.route('/clear', methods=['POST'])
def call_clear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clear()

@app.route('/anyone', methods=['POST'])
def call_anyone():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return anyone()

@app.route('/add_at_position', methods=['POST'])
def call_add_at_position():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    pos = request_json.get("pos")
    
    item = request_json.get("item")
    

    return add_at_position(pos, item)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    sink = request_json.get("sink")
    

    return parse(source, sink)

@app.route('/name', methods=['POST'])
def call_name():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return name()

@app.route('/closed', methods=['POST'])
def call_closed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return closed()

@app.route('/readable', methods=['POST'])
def call_readable():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return readable()

@app.route('/writable', methods=['POST'])
def call_writable():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return writable()

@app.route('/truncate', methods=['POST'])
def call_truncate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    size = request_json.get("size")
    

    return truncate(size)

@app.route('/isatty', methods=['POST'])
def call_isatty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return isatty()

@app.route('/fileno', methods=['POST'])
def call_fileno():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return fileno()

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return close()

@app.route('/flush', methods=['POST'])
def call_flush():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return flush()

@app.route('/read', methods=['POST'])
def call_read():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return read()

@app.route('/read1', methods=['POST'])
def call_read1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return read1()

@app.route('/readinto', methods=['POST'])
def call_readinto():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return readinto()

@app.route('/readinto1', methods=['POST'])
def call_readinto1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return readinto1()

@app.route('/seek', methods=['POST'])
def call_seek():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return seek()

@app.route('/seekable', methods=['POST'])
def call_seekable():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return seekable()

@app.route('/tell', methods=['POST'])
def call_tell():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return tell()

@app.route('/write', methods=['POST'])
def call_write():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return write()

@app.route('/getPublicId', methods=['POST'])
def call_getPublicId():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return getPublicId()

@app.route('/setPublicId', methods=['POST'])
def call_setPublicId():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    public_id = request_json.get("public_id")
    

    return setPublicId(public_id)

@app.route('/getSystemId', methods=['POST'])
def call_getSystemId():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return getSystemId()

@app.route('/setSystemId', methods=['POST'])
def call_setSystemId():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    system_id = request_json.get("system_id")
    

    return setSystemId(system_id)

@app.route('/getallmatchingheaders', methods=['POST'])
def call_getallmatchingheaders():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    message = request_json.get("message")
    
    name = request_json.get("name")
    

    return getallmatchingheaders(cls, message, name)

@app.route('/get_links', methods=['POST'])
def call_get_links():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    response = request_json.get("response")
    

    return get_links(cls, response)

@app.route('/get_alternates', methods=['POST'])
def call_get_alternates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    type_ = request_json.get("type_")
    

    return get_alternates(type_)

@app.route('/create_input_source', methods=['POST'])
def call_create_input_source():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    publicID = request_json.get("publicID")
    
    location = request_json.get("location")
    
    file = request_json.get("file")
    
    data = request_json.get("data")
    
    format = request_json.get("format")
    

    return create_input_source(source, publicID, location, file, data, format)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return graph()

@app.route('/identifier', methods=['POST'])
def call_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return identifier()

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return add(p, o)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return remove(p, o)

@app.route('/set', methods=['POST'])
def call_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return set(p, o)

@app.route('/subjects', methods=['POST'])
def call_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    

    return subjects(predicate)

@app.route('/predicates', methods=['POST'])
def call_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    o = request_json.get("o")
    

    return predicates(o)

@app.route('/objects', methods=['POST'])
def call_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    

    return objects(predicate)

@app.route('/subject_predicates', methods=['POST'])
def call_subject_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return subject_predicates()

@app.route('/subject_objects', methods=['POST'])
def call_subject_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return subject_objects()

@app.route('/predicate_objects', methods=['POST'])
def call_predicate_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return predicate_objects()

@app.route('/value', methods=['POST'])
def call_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    
    default = request_json.get("default")
    
    any = request_json.get("any")
    

    return value(p, o, default, any)

@app.route('/items', methods=['POST'])
def call_items():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return items()

@app.route('/transitive_objects', methods=['POST'])
def call_transitive_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    remember = request_json.get("remember")
    

    return transitive_objects(predicate, remember)

@app.route('/transitive_subjects', methods=['POST'])
def call_transitive_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    remember = request_json.get("remember")
    

    return transitive_subjects(predicate, remember)

@app.route('/qname', methods=['POST'])
def call_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return qname()

@app.route('/eval', methods=['POST'])
def call_eval():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    subj = request_json.get("subj")
    
    obj = request_json.get("obj")
    

    return eval(graph, subj, obj)

@app.route('/n3', methods=['POST'])
def call_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace_manager = request_json.get("namespace_manager")
    

    return n3(namespace_manager)

@app.route('/path_alternative', methods=['POST'])
def call_path_alternative():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return path_alternative(other)

@app.route('/path_sequence', methods=['POST'])
def call_path_sequence():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return path_sequence(other)

@app.route('/evalPath', methods=['POST'])
def call_evalPath():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    t = request_json.get("t")
    

    return evalPath(graph, t)

@app.route('/eval_path', methods=['POST'])
def call_eval_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    t = request_json.get("t")
    

    return eval_path(graph, t)

@app.route('/mul_path', methods=['POST'])
def call_mul_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    mul = request_json.get("mul")
    

    return mul_path(p, mul)

@app.route('/inv_path', methods=['POST'])
def call_inv_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    

    return inv_path(p)

@app.route('/neg_path', methods=['POST'])
def call_neg_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    

    return neg_path(p)

@app.route('/cast_bytes', methods=['POST'])
def call_cast_bytes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    enc = request_json.get("enc")
    

    return cast_bytes(s, enc)

@app.route('/ascii', methods=['POST'])
def call_ascii():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    

    return ascii(stream)

@app.route('/bopen', methods=['POST'])
def call_bopen():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return bopen()

@app.route('/sign', methods=['POST'])
def call_sign():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    n = request_json.get("n")
    

    return sign(n)

@app.route('/decodeStringEscape', methods=['POST'])
def call_decodeStringEscape():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return decodeStringEscape(s)

@app.route('/decodeUnicodeEscape', methods=['POST'])
def call_decodeUnicodeEscape():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    escaped = request_json.get("escaped")
    

    return decodeUnicodeEscape(escaped)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/relativize', methods=['POST'])
def call_relativize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return relativize(uri)

@app.route('/n3', methods=['POST'])
def call_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace_manager = request_json.get("namespace_manager")
    

    return n3(namespace_manager)

@app.route('/eq', methods=['POST'])
def call_eq():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return eq(other)

@app.route('/neq', methods=['POST'])
def call_neq():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return neq(other)

@app.route('/startswith', methods=['POST'])
def call_startswith():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    start = request_json.get("start")
    
    end = request_json.get("end")
    

    return startswith(prefix, start, end)

@app.route('/identifier', methods=['POST'])
def call_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return identifier()

@app.route('/toPython', methods=['POST'])
def call_toPython():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return toPython()

@app.route('/defrag', methods=['POST'])
def call_defrag():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return defrag()

@app.route('/fragment', methods=['POST'])
def call_fragment():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return fragment()

@app.route('/de_skolemize', methods=['POST'])
def call_de_skolemize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return de_skolemize()

@app.route('/skolemize', methods=['POST'])
def call_skolemize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    authority = request_json.get("authority")
    
    basepath = request_json.get("basepath")
    

    return skolemize(authority, basepath)

@app.route('/normalize', methods=['POST'])
def call_normalize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return normalize()

@app.route('/ill_typed', methods=['POST'])
def call_ill_typed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return ill_typed()

@app.route('/value', methods=['POST'])
def call_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return value()

@app.route('/language', methods=['POST'])
def call_language():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return language()

@app.route('/datatype', methods=['POST'])
def call_datatype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return datatype()

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    datatype = request_json.get("datatype")
    
    pythontype = request_json.get("pythontype")
    
    constructor = request_json.get("constructor")
    
    lexicalizer = request_json.get("lexicalizer")
    
    datatype_specific = request_json.get("datatype_specific")
    

    return bind(datatype, pythontype, constructor, lexicalizer, datatype_specific)

@app.route('/store', methods=['POST'])
def call_store():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return store()

@app.route('/identifier', methods=['POST'])
def call_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return identifier()

@app.route('/namespace_manager', methods=['POST'])
def call_namespace_manager():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    nm = request_json.get("nm")
    

    return namespace_manager(nm)

@app.route('/toPython', methods=['POST'])
def call_toPython():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return toPython()

@app.route('/destroy', methods=['POST'])
def call_destroy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return destroy(configuration)

@app.route('/commit', methods=['POST'])
def call_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return commit()

@app.route('/rollback', methods=['POST'])
def call_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rollback()

@app.route('/open', methods=['POST'])
def call_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    
    create = request_json.get("create")
    

    return open(configuration, create)

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return close()

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple_or_quad = request_json.get("triple_or_quad")
    

    return add(triple_or_quad)

@app.route('/addN', methods=['POST'])
def call_addN():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    quads = request_json.get("quads")
    

    return addN(quads)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return remove(triple)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return triples(triple)

@app.route('/set', methods=['POST'])
def call_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return set(triple)

@app.route('/subjects', methods=['POST'])
def call_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    object = request_json.get("object")
    
    unique = request_json.get("unique")
    

    return subjects(predicate, object, unique)

@app.route('/predicates', methods=['POST'])
def call_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    object = request_json.get("object")
    
    unique = request_json.get("unique")
    

    return predicates(subject, object, unique)

@app.route('/objects', methods=['POST'])
def call_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    predicate = request_json.get("predicate")
    
    unique = request_json.get("unique")
    

    return objects(subject, predicate, unique)

@app.route('/subject_predicates', methods=['POST'])
def call_subject_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    object = request_json.get("object")
    
    unique = request_json.get("unique")
    

    return subject_predicates(object, unique)

@app.route('/subject_objects', methods=['POST'])
def call_subject_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    unique = request_json.get("unique")
    

    return subject_objects(predicate, unique)

@app.route('/predicate_objects', methods=['POST'])
def call_predicate_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    unique = request_json.get("unique")
    

    return predicate_objects(subject, unique)

@app.route('/triples_choices', methods=['POST'])
def call_triples_choices():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    

    return triples_choices(triple, context)

@app.route('/value', methods=['POST'])
def call_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    predicate = request_json.get("predicate")
    
    object = request_json.get("object")
    
    default = request_json.get("default")
    
    any = request_json.get("any")
    

    return value(subject, predicate, object, default, any)

@app.route('/items', methods=['POST'])
def call_items():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    list = request_json.get("list")
    

    return items(list)

@app.route('/transitiveClosure', methods=['POST'])
def call_transitiveClosure():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    func = request_json.get("func")
    
    arg = request_json.get("arg")
    
    seen = request_json.get("seen")
    

    return transitiveClosure(func, arg, seen)

@app.route('/transitive_objects', methods=['POST'])
def call_transitive_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    predicate = request_json.get("predicate")
    
    remember = request_json.get("remember")
    

    return transitive_objects(subject, predicate, remember)

@app.route('/transitive_subjects', methods=['POST'])
def call_transitive_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    object = request_json.get("object")
    
    remember = request_json.get("remember")
    

    return transitive_subjects(predicate, object, remember)

@app.route('/qname', methods=['POST'])
def call_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return qname(uri)

@app.route('/compute_qname', methods=['POST'])
def call_compute_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    

    return compute_qname(uri, generate)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/absolutize', methods=['POST'])
def call_absolutize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    defrag = request_json.get("defrag")
    

    return absolutize(uri, defrag)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    destination = request_json.get("destination")
    
    format = request_json.get("format")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(destination, format, base, encoding)

@app.route('/print', methods=['POST'])
def call_print():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    format = request_json.get("format")
    
    encoding = request_json.get("encoding")
    
    out = request_json.get("out")
    

    return print(format, encoding, out)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    publicID = request_json.get("publicID")
    
    format = request_json.get("format")
    

    return parse(source, publicID, format)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query_object = request_json.get("query_object")
    
    processor = request_json.get("processor")
    
    result = request_json.get("result")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    use_store_provided = request_json.get("use_store_provided")
    

    return query(query_object, processor, result, initNs, initBindings, use_store_provided)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    update_object = request_json.get("update_object")
    
    processor = request_json.get("processor")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    use_store_provided = request_json.get("use_store_provided")
    

    return update(update_object, processor, initNs, initBindings, use_store_provided)

@app.route('/n3', methods=['POST'])
def call_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace_manager = request_json.get("namespace_manager")
    

    return n3(namespace_manager)

@app.route('/isomorphic', methods=['POST'])
def call_isomorphic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return isomorphic(other)

@app.route('/connected', methods=['POST'])
def call_connected():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return connected()

@app.route('/all_nodes', methods=['POST'])
def call_all_nodes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return all_nodes()

@app.route('/collection', methods=['POST'])
def call_collection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    

    return collection(identifier)

@app.route('/resource', methods=['POST'])
def call_resource():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    

    return resource(identifier)

@app.route('/skolemize', methods=['POST'])
def call_skolemize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    new_graph = request_json.get("new_graph")
    
    bnode = request_json.get("bnode")
    
    authority = request_json.get("authority")
    
    basepath = request_json.get("basepath")
    

    return skolemize(new_graph, bnode, authority, basepath)

@app.route('/de_skolemize', methods=['POST'])
def call_de_skolemize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    new_graph = request_json.get("new_graph")
    
    uriref = request_json.get("uriref")
    

    return de_skolemize(new_graph, uriref)

@app.route('/cbd', methods=['POST'])
def call_cbd():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    resource = request_json.get("resource")
    

    return cbd(resource)

@app.route('/quads', methods=['POST'])
def call_quads():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple_or_quad = request_json.get("triple_or_quad")
    

    return quads(triple_or_quad)

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return contexts(triple)

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    

    return get_graph(identifier)

@app.route('/get_context', methods=['POST'])
def call_get_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    
    quoted = request_json.get("quoted")
    
    base = request_json.get("base")
    

    return get_context(identifier, quoted, base)

@app.route('/remove_context', methods=['POST'])
def call_remove_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    context = request_json.get("context")
    

    return remove_context(context)

@app.route('/context_id', methods=['POST'])
def call_context_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    context_id = request_json.get("context_id")
    

    return context_id(uri, context_id)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    
    base = request_json.get("base")
    

    return graph(identifier, base)

@app.route('/add_graph', methods=['POST'])
def call_add_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    

    return add_graph(g)

@app.route('/remove_graph', methods=['POST'])
def call_remove_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    

    return remove_graph(g)

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/generateVoID', methods=['POST'])
def call_generateVoID():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    
    dataset = request_json.get("dataset")
    
    res = request_json.get("res")
    
    distinctForPartitions = request_json.get("distinctForPartitions")
    

    return generateVoID(g, dataset, res, distinctForPartitions)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    strOrQuery = request_json.get("strOrQuery")
    
    initBindings = request_json.get("initBindings")
    
    initNs = request_json.get("initNs")
    
    DEBUG = request_json.get("DEBUG")
    

    return query(strOrQuery, initBindings, initNs, DEBUG)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    strOrQuery = request_json.get("strOrQuery")
    
    initBindings = request_json.get("initBindings")
    
    initNs = request_json.get("initNs")
    

    return update(strOrQuery, initBindings, initNs)

@app.route('/write', methods=['POST'])
def call_write():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    arg = request_json.get("arg")
    

    return write(arg)

@app.route('/get', methods=['POST'])
def call_get():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    default = request_json.get("default")
    

    return get(name, default)

@app.route('/asdict', methods=['POST'])
def call_asdict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return asdict()

@app.route('/bindings', methods=['POST'])
def call_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    b = request_json.get("b")
    

    return bindings(b)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    

    return parse(source)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, encoding)

@app.route('/set_map', methods=['POST'])
def call_set_map():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    amap = request_json.get("amap")
    

    return set_map(amap)

@app.route('/get_map', methods=['POST'])
def call_get_map():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_map()

@app.route('/subscribe', methods=['POST'])
def call_subscribe():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    event_type = request_json.get("event_type")
    
    handler = request_json.get("handler")
    

    return subscribe(event_type, handler)

@app.route('/dispatch', methods=['POST'])
def call_dispatch():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    event = request_json.get("event")
    

    return dispatch(event)

@app.route('/fquotmod', methods=['POST'])
def call_fquotmod():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    val = request_json.get("val")
    
    low = request_json.get("low")
    
    high = request_json.get("high")
    

    return fquotmod(val, low, high)

@app.route('/max_days_in_month', methods=['POST'])
def call_max_days_in_month():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    year = request_json.get("year")
    
    month = request_json.get("month")
    

    return max_days_in_month(year, month)

@app.route('/totimedelta', methods=['POST'])
def call_totimedelta():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    start = request_json.get("start")
    
    end = request_json.get("end")
    

    return totimedelta(start, end)

@app.route('/parse_xsd_duration', methods=['POST'])
def call_parse_xsd_duration():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dur_string = request_json.get("dur_string")
    
    as_timedelta_if_possible = request_json.get("as_timedelta_if_possible")
    

    return parse_xsd_duration(dur_string, as_timedelta_if_possible)

@app.route('/duration_isoformat', methods=['POST'])
def call_duration_isoformat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tdt = request_json.get("tdt")
    
    in_weeks = request_json.get("in_weeks")
    

    return duration_isoformat(tdt, in_weeks)

@app.route('/xsd_datetime_isoformat', methods=['POST'])
def call_xsd_datetime_isoformat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    dt = request_json.get("dt")
    

    return xsd_datetime_isoformat(dt)

@app.route('/parse_xsd_date', methods=['POST'])
def call_parse_xsd_date():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    date_string = request_json.get("date_string")
    

    return parse_xsd_date(date_string)

@app.route('/parse_xsd_gyear', methods=['POST'])
def call_parse_xsd_gyear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    gyear_string = request_json.get("gyear_string")
    

    return parse_xsd_gyear(gyear_string)

@app.route('/parse_xsd_gyearmonth', methods=['POST'])
def call_parse_xsd_gyearmonth():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    gym_string = request_json.get("gym_string")
    

    return parse_xsd_gyearmonth(gym_string)

@app.route('/getClass', methods=['POST'])
def call_getClass():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return getClass()

@app.route('/register', methods=['POST'])
def call_register():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    kind = request_json.get("kind")
    
    module_path = request_json.get("module_path")
    
    class_name = request_json.get("class_name")
    

    return register(name, kind, module_path, class_name)

@app.route('/get', methods=['POST'])
def call_get():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    kind = request_json.get("kind")
    

    return get(name, kind)

@app.route('/plugins', methods=['POST'])
def call_plugins():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    kind = request_json.get("kind")
    

    return plugins(name, kind)

@app.route('/graph_digest', methods=['POST'])
def call_graph_digest():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stats = request_json.get("stats")
    

    return graph_digest(stats)

@app.route('/internal_hash', methods=['POST'])
def call_internal_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stats = request_json.get("stats")
    

    return internal_hash(stats)

@app.route('/key', methods=['POST'])
def call_key():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return key()

@app.route('/hash_color', methods=['POST'])
def call_hash_color():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    color = request_json.get("color")
    

    return hash_color(color)

@app.route('/distinguish', methods=['POST'])
def call_distinguish():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    W = request_json.get("W")
    
    graph = request_json.get("graph")
    

    return distinguish(W, graph)

@app.route('/discrete', methods=['POST'])
def call_discrete():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return discrete()

@app.route('/copy', methods=['POST'])
def call_copy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return copy()

@app.route('/to_hash', methods=['POST'])
def call_to_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stats = request_json.get("stats")
    

    return to_hash(stats)

@app.route('/canonical_triples', methods=['POST'])
def call_canonical_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stats = request_json.get("stats")
    

    return canonical_triples(stats)

@app.route('/to_isomorphic', methods=['POST'])
def call_to_isomorphic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return to_isomorphic(graph)

@app.route('/isomorphic', methods=['POST'])
def call_isomorphic():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph1 = request_json.get("graph1")
    
    graph2 = request_json.get("graph2")
    

    return isomorphic(graph1, graph2)

@app.route('/to_canonical_graph', methods=['POST'])
def call_to_canonical_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g1 = request_json.get("g1")
    
    stats = request_json.get("stats")
    

    return to_canonical_graph(g1, stats)

@app.route('/graph_diff', methods=['POST'])
def call_graph_diff():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g1 = request_json.get("g1")
    
    g2 = request_json.get("g2")
    

    return graph_diff(g1, g2)

@app.route('/similar', methods=['POST'])
def call_similar():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g1 = request_json.get("g1")
    
    g2 = request_json.get("g2")
    

    return similar(g1, g2)

@app.route('/register', methods=['POST'])
def call_register():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    object = request_json.get("object")
    
    id = request_json.get("id")
    

    return register(object, id)

@app.route('/loads', methods=['POST'])
def call_loads():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return loads(s)

@app.route('/dumps', methods=['POST'])
def call_dumps():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    
    protocol = request_json.get("protocol")
    
    bin = request_json.get("bin")
    

    return dumps(obj, protocol, bin)

@app.route('/node_pickler', methods=['POST'])
def call_node_pickler():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return node_pickler()

@app.route('/create', methods=['POST'])
def call_create():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return create(configuration)

@app.route('/open', methods=['POST'])
def call_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    
    create = request_json.get("create")
    

    return open(configuration, create)

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    commit_pending_transaction = request_json.get("commit_pending_transaction")
    

    return close(commit_pending_transaction)

@app.route('/destroy', methods=['POST'])
def call_destroy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return destroy(configuration)

@app.route('/gc', methods=['POST'])
def call_gc():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return gc()

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    
    quoted = request_json.get("quoted")
    

    return add(triple, context, quoted)

@app.route('/addN', methods=['POST'])
def call_addN():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    quads = request_json.get("quads")
    

    return addN(quads)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    

    return remove(triple, context)

@app.route('/triples_choices', methods=['POST'])
def call_triples_choices():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    

    return triples_choices(triple, context)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple_pattern = request_json.get("triple_pattern")
    
    context = request_json.get("context")
    

    return triples(triple_pattern, context)

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return contexts(triple)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query = request_json.get("query")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    queryGraph = request_json.get("queryGraph")
    

    return query(query, initNs, initBindings, queryGraph)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    update = request_json.get("update")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    queryGraph = request_json.get("queryGraph")
    

    return update(update, initNs, initBindings, queryGraph)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/prefix', methods=['POST'])
def call_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return prefix(namespace)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return namespace(prefix)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/commit', methods=['POST'])
def call_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return commit()

@app.route('/rollback', methods=['POST'])
def call_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rollback()

@app.route('/add_graph', methods=['POST'])
def call_add_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_graph(graph)

@app.route('/remove_graph', methods=['POST'])
def call_remove_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return remove_graph(graph)

@app.route('/list2set', methods=['POST'])
def call_list2set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    seq = request_json.get("seq")
    

    return list2set(seq)

@app.route('/first', methods=['POST'])
def call_first():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    seq = request_json.get("seq")
    

    return first(seq)

@app.route('/uniq', methods=['POST'])
def call_uniq():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    sequence = request_json.get("sequence")
    
    strip = request_json.get("strip")
    

    return uniq(sequence, strip)

@app.route('/more_than', methods=['POST'])
def call_more_than():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    sequence = request_json.get("sequence")
    
    number = request_json.get("number")
    

    return more_than(sequence, number)

@app.route('/to_term', methods=['POST'])
def call_to_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    default = request_json.get("default")
    

    return to_term(s, default)

@app.route('/from_n3', methods=['POST'])
def call_from_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    default = request_json.get("default")
    
    backend = request_json.get("backend")
    
    nsm = request_json.get("nsm")
    

    return from_n3(s, default, backend, nsm)

@app.route('/date_time', methods=['POST'])
def call_date_time():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    t = request_json.get("t")
    
    local_time_zone = request_json.get("local_time_zone")
    

    return date_time(t, local_time_zone)

@app.route('/parse_date_time', methods=['POST'])
def call_parse_date_time():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    val = request_json.get("val")
    

    return parse_date_time(val)

@app.route('/guess_format', methods=['POST'])
def call_guess_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    fpath = request_json.get("fpath")
    
    fmap = request_json.get("fmap")
    

    return guess_format(fpath, fmap)

@app.route('/find_roots', methods=['POST'])
def call_find_roots():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    prop = request_json.get("prop")
    
    roots = request_json.get("roots")
    

    return find_roots(graph, prop, roots)

@app.route('/get_tree', methods=['POST'])
def call_get_tree():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    root = request_json.get("root")
    
    prop = request_json.get("prop")
    
    mapper = request_json.get("mapper")
    
    sortkey = request_json.get("sortkey")
    
    done = request_json.get("done")
    
    dir = request_json.get("dir")
    

    return get_tree(graph, root, prop, mapper, sortkey, done, dir)

@app.route('/n3', methods=['POST'])
def call_n3():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return n3()

@app.route('/index', methods=['POST'])
def call_index():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    

    return index(item)

@app.route('/append', methods=['POST'])
def call_append():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    

    return append(item)

@app.route('/clear', methods=['POST'])
def call_clear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clear()

@app.route('/rdflib_to_networkx_multidigraph', methods=['POST'])
def call_rdflib_to_networkx_multidigraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    edge_attrs = request_json.get("edge_attrs")
    

    return rdflib_to_networkx_multidigraph(graph, edge_attrs)

@app.route('/rdflib_to_networkx_digraph', methods=['POST'])
def call_rdflib_to_networkx_digraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    calc_weights = request_json.get("calc_weights")
    
    edge_attrs = request_json.get("edge_attrs")
    

    return rdflib_to_networkx_digraph(graph, calc_weights, edge_attrs)

@app.route('/rdflib_to_networkx_graph', methods=['POST'])
def call_rdflib_to_networkx_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    calc_weights = request_json.get("calc_weights")
    
    edge_attrs = request_json.get("edge_attrs")
    

    return rdflib_to_networkx_graph(graph, calc_weights, edge_attrs)

@app.route('/rdflib_to_graphtool', methods=['POST'])
def call_rdflib_to_graphtool():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    v_prop_names = request_json.get("v_prop_names")
    
    e_prop_names = request_json.get("e_prop_names")
    
    transform_s = request_json.get("transform_s")
    
    transform_p = request_json.get("transform_p")
    
    transform_o = request_json.get("transform_o")
    

    return rdflib_to_graphtool(graph, v_prop_names, e_prop_names, transform_s, transform_p, transform_o)

@app.route('/parse_shacl_path', methods=['POST'])
def call_parse_shacl_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    shapes_graph = request_json.get("shapes_graph")
    
    path_identifier = request_json.get("path_identifier")
    

    return parse_shacl_path(shapes_graph, path_identifier)

@app.route('/build_shacl_path', methods=['POST'])
def call_build_shacl_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path = request_json.get("path")
    
    target_graph = request_json.get("target_graph")
    

    return build_shacl_path(path, target_graph)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    target = request_json.get("target")
    
    _help = request_json.get("_help")
    
    options = request_json.get("options")
    
    stdin = request_json.get("stdin")
    

    return main(target, _help, options, stdin)

@app.route('/about', methods=['POST'])
def call_about():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return about(subject)

@app.route('/value', methods=['POST'])
def call_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    v = request_json.get("v")
    

    return value(p, v)

@app.route('/rel', methods=['POST'])
def call_rel():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return rel(p, o)

@app.route('/rev', methods=['POST'])
def call_rev():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    s = request_json.get("s")
    

    return rev(p, s)

@app.route('/rdftype', methods=['POST'])
def call_rdftype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    t = request_json.get("t")
    

    return rdftype(t)

@app.route('/cast_value', methods=['POST'])
def call_cast_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    v = request_json.get("v")
    

    return cast_value(v)

@app.route('/cast_identifier', methods=['POST'])
def call_cast_identifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ref = request_json.get("ref")
    

    return cast_identifier(ref)

@app.route('/generateQName', methods=['POST'])
def call_generateQName():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    uri = request_json.get("uri")
    

    return generateQName(graph, uri)

@app.route('/classOrTerm', methods=['POST'])
def call_classOrTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    thing = request_json.get("thing")
    

    return classOrTerm(thing)

@app.route('/classOrIdentifier', methods=['POST'])
def call_classOrIdentifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    thing = request_json.get("thing")
    

    return classOrIdentifier(thing)

@app.route('/propertyOrIdentifier', methods=['POST'])
def call_propertyOrIdentifier():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    thing = request_json.get("thing")
    

    return propertyOrIdentifier(thing)

@app.route('/manchesterSyntax', methods=['POST'])
def call_manchesterSyntax():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    thing = request_json.get("thing")
    
    store = request_json.get("store")
    
    boolean = request_json.get("boolean")
    
    transientList = request_json.get("transientList")
    

    return manchesterSyntax(thing, store, boolean, transientList)

@app.route('/GetIdentifiedClasses', methods=['POST'])
def call_GetIdentifiedClasses():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return GetIdentifiedClasses(graph)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return serialize(graph)

@app.route('/clearInDegree', methods=['POST'])
def call_clearInDegree():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clearInDegree()

@app.route('/clearOutDegree', methods=['POST'])
def call_clearOutDegree():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clearOutDegree()

@app.route('/delete', methods=['POST'])
def call_delete():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return delete()

@app.route('/replace', methods=['POST'])
def call_replace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return replace(other)

@app.route('/handleAnnotation', methods=['POST'])
def call_handleAnnotation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    val = request_json.get("val")
    

    return handleAnnotation(val)

@app.route('/setupACEAnnotations', methods=['POST'])
def call_setupACEAnnotations():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setupACEAnnotations()

@app.route('/setVersion', methods=['POST'])
def call_setVersion():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    version = request_json.get("version")
    

    return setVersion(version)

@app.route('/AllClasses', methods=['POST'])
def call_AllClasses():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return AllClasses(graph)

@app.route('/AllProperties', methods=['POST'])
def call_AllProperties():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return AllProperties(graph)

@app.route('/term', methods=['POST'])
def call_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    

    return term(name)

@app.route('/ComponentTerms', methods=['POST'])
def call_ComponentTerms():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    

    return ComponentTerms(cls)

@app.route('/DeepClassClear', methods=['POST'])
def call_DeepClassClear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    class_to_prune = request_json.get("class_to_prune")
    

    return DeepClassClear(class_to_prune)

@app.route('/CastClass', methods=['POST'])
def call_CastClass():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    c = request_json.get("c")
    
    graph = request_json.get("graph")
    

    return CastClass(c, graph)

@app.route('/setupNounAnnotations', methods=['POST'])
def call_setupNounAnnotations():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    noun_annotations = request_json.get("noun_annotations")
    

    return setupNounAnnotations(noun_annotations)

@app.route('/isPrimitive', methods=['POST'])
def call_isPrimitive():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return isPrimitive()

@app.route('/subSumpteeIds', methods=['POST'])
def call_subSumpteeIds():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return subSumpteeIds()

@app.route('/manchesterClass', methods=['POST'])
def call_manchesterClass():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    full = request_json.get("full")
    
    normalization = request_json.get("normalization")
    

    return manchesterClass(full, normalization)

@app.route('/index', methods=['POST'])
def call_index():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    

    return index(item)

@app.route('/clear', methods=['POST'])
def call_clear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clear()

@app.route('/append', methods=['POST'])
def call_append():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    item = request_json.get("item")
    

    return append(item)

@app.route('/getIntersections', methods=['POST'])
def call_getIntersections():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return getIntersections()

@app.route('/getUnions', methods=['POST'])
def call_getUnions():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return getUnions()

@app.route('/copy', methods=['POST'])
def call_copy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return copy()

@app.route('/changeOperator', methods=['POST'])
def call_changeOperator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    newOperator = request_json.get("newOperator")
    

    return changeOperator(newOperator)

@app.route('/AllDifferent', methods=['POST'])
def call_AllDifferent():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    members = request_json.get("members")
    

    return AllDifferent(members)

@app.route('/restrictionKind', methods=['POST'])
def call_restrictionKind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return restrictionKind()

@app.route('/setupVerbAnnotations', methods=['POST'])
def call_setupVerbAnnotations():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    verb_annotations = request_json.get("verb_annotations")
    

    return setupVerbAnnotations(verb_annotations)

@app.route('/CommonNSBindings', methods=['POST'])
def call_CommonNSBindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    additionalNS = request_json.get("additionalNS")
    

    return CommonNSBindings(graph, additionalNS)

@app.route('/title', methods=['POST'])
def call_title():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return title()

@app.route('/term', methods=['POST'])
def call_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    

    return term(name)

@app.route('/format', methods=['POST'])
def call_format():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return format()

@app.route('/as_jsonld_context', methods=['POST'])
def call_as_jsonld_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    pfx = request_json.get("pfx")
    

    return as_jsonld_context(pfx)

@app.route('/uri', methods=['POST'])
def call_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return uri()

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/store', methods=['POST'])
def call_store():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return store()

@app.route('/qname', methods=['POST'])
def call_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return qname(uri)

@app.route('/curie', methods=['POST'])
def call_curie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    

    return curie(uri, generate)

@app.route('/qname_strict', methods=['POST'])
def call_qname_strict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return qname_strict(uri)

@app.route('/normalizeUri', methods=['POST'])
def call_normalizeUri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rdfTerm = request_json.get("rdfTerm")
    

    return normalizeUri(rdfTerm)

@app.route('/compute_qname', methods=['POST'])
def call_compute_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    

    return compute_qname(uri, generate)

@app.route('/compute_qname_strict', methods=['POST'])
def call_compute_qname_strict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    generate = request_json.get("generate")
    

    return compute_qname_strict(uri, generate)

@app.route('/expand_curie', methods=['POST'])
def call_expand_curie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    curie = request_json.get("curie")
    

    return expand_curie(curie)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    
    replace = request_json.get("replace")
    

    return bind(prefix, namespace, override, replace)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/absolutize', methods=['POST'])
def call_absolutize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    defrag = request_json.get("defrag")
    

    return absolutize(uri, defrag)

@app.route('/is_ncname', methods=['POST'])
def call_is_ncname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    

    return is_ncname(name)

@app.route('/split_uri', methods=['POST'])
def call_split_uri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    split_start = request_json.get("split_start")
    

    return split_uri(uri, split_start)

@app.route('/insert_trie', methods=['POST'])
def call_insert_trie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    trie = request_json.get("trie")
    
    value = request_json.get("value")
    

    return insert_trie(trie, value)

@app.route('/insert_strie', methods=['POST'])
def call_insert_strie():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    strie = request_json.get("strie")
    
    trie = request_json.get("trie")
    
    value = request_json.get("value")
    

    return insert_strie(strie, trie, value)

@app.route('/get_longest_namespace', methods=['POST'])
def call_get_longest_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    trie = request_json.get("trie")
    
    value = request_json.get("value")
    

    return get_longest_namespace(trie, value)

@app.route('/validate_namespace', methods=['POST'])
def call_validate_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return validate_namespace(namespace)

@app.route('/validate_object_id', methods=['POST'])
def call_validate_object_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    object_id = request_json.get("object_id")
    

    return validate_object_id(object_id)

@app.route('/get_target_namespace_elements', methods=['POST'])
def call_get_target_namespace_elements():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    
    target_namespace = request_json.get("target_namespace")
    

    return get_target_namespace_elements(g, target_namespace)

@app.route('/make_dn_file', methods=['POST'])
def call_make_dn_file():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    output_file_name = request_json.get("output_file_name")
    
    target_namespace = request_json.get("target_namespace")
    
    elements_strs = request_json.get("elements_strs")
    
    non_python_elements_strs = request_json.get("non_python_elements_strs")
    
    object_id = request_json.get("object_id")
    
    fail = request_json.get("fail")
    

    return make_dn_file(output_file_name, target_namespace, elements_strs, non_python_elements_strs, object_id, fail)

@app.route('/parse_and_serialize', methods=['POST'])
def call_parse_and_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input_files = request_json.get("input_files")
    
    input_format = request_json.get("input_format")
    
    guess = request_json.get("guess")
    
    outfile = request_json.get("outfile")
    
    output_format = request_json.get("output_format")
    
    ns_bindings = request_json.get("ns_bindings")
    
    store_conn = request_json.get("store_conn")
    
    store_type = request_json.get("store_type")
    

    return parse_and_serialize(input_files, input_format, guess, outfile, output_format, ns_bindings, store_conn, store_type)

@app.route('/make_option_parser', methods=['POST'])
def call_make_option_parser():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return make_option_parser()

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/rdfs2dot', methods=['POST'])
def call_rdfs2dot():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    
    stream = request_json.get("stream")
    
    opts = request_json.get("opts")
    

    return rdfs2dot(g, stream, opts)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/toProperty', methods=['POST'])
def call_toProperty():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    label = request_json.get("label")
    

    return toProperty(label)

@app.route('/toPropertyLabel', methods=['POST'])
def call_toPropertyLabel():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    label = request_json.get("label")
    

    return toPropertyLabel(label)

@app.route('/index', methods=['POST'])
def call_index():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l_ = request_json.get("l_")
    
    i = request_json.get("i")
    

    return index(l_, i)

@app.route('/csv_reader', methods=['POST'])
def call_csv_reader():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    csv_data = request_json.get("csv_data")
    
    dialect = request_json.get("dialect")
    

    return csv_reader(csv_data, dialect)

@app.route('/prefixuri', methods=['POST'])
def call_prefixuri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    x = request_json.get("x")
    
    prefix = request_json.get("prefix")
    
    class_ = request_json.get("class_")
    

    return prefixuri(x, prefix, class_)

@app.route('/range', methods=['POST'])
def call_range():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return range()

@app.route('/column', methods=['POST'])
def call_column():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    v = request_json.get("v")
    

    return column(v)

@app.route('/triple', methods=['POST'])
def call_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return triple(s, p, o)

@app.route('/convert', methods=['POST'])
def call_convert():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    csvreader = request_json.get("csvreader")
    

    return convert(csvreader)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/rdf2dot', methods=['POST'])
def call_rdf2dot():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    
    stream = request_json.get("stream")
    
    opts = request_json.get("opts")
    

    return rdf2dot(g, stream, opts)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/serialize_in_chunks', methods=['POST'])
def call_serialize_in_chunks():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    g = request_json.get("g")
    
    max_triples = request_json.get("max_triples")
    
    max_file_size_kb = request_json.get("max_file_size_kb")
    
    file_name_stem = request_json.get("file_name_stem")
    
    output_dir = request_json.get("output_dir")
    
    write_prefixes = request_json.get("write_prefixes")
    

    return serialize_in_chunks(g, max_triples, max_file_size_kb, file_name_stem, output_dir, write_prefixes)

@app.route('/internal_hash', methods=['POST'])
def call_internal_hash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return internal_hash()

@app.route('/hashtriples', methods=['POST'])
def call_hashtriples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return hashtriples()

@app.route('/vhash', methods=['POST'])
def call_vhash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term = request_json.get("term")
    
    done = request_json.get("done")
    

    return vhash(term, done)

@app.route('/vhashtriples', methods=['POST'])
def call_vhashtriples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term = request_json.get("term")
    
    done = request_json.get("done")
    

    return vhashtriples(term, done)

@app.route('/vhashtriple', methods=['POST'])
def call_vhashtriple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    term = request_json.get("term")
    
    done = request_json.get("done")
    

    return vhashtriple(triple, term, done)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/subject', methods=['POST'])
def call_subject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    depth = request_json.get("depth")
    

    return subject(subject, depth)

@app.route('/predicate', methods=['POST'])
def call_predicate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    object = request_json.get("object")
    
    depth = request_json.get("depth")
    

    return predicate(predicate, object, depth)

@app.route('/fix', methods=['POST'])
def call_fix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    val = request_json.get("val")
    

    return fix(val)

@app.route('/preprocess', methods=['POST'])
def call_preprocess():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return preprocess()

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    
    spacious = request_json.get("spacious")
    

    return serialize(stream, base, encoding, spacious)

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/endDocument', methods=['POST'])
def call_endDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return endDocument()

@app.route('/indent', methods=['POST'])
def call_indent():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    modifier = request_json.get("modifier")
    

    return indent(modifier)

@app.route('/preprocessTriple', methods=['POST'])
def call_preprocessTriple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return preprocessTriple(triple)

@app.route('/getQName', methods=['POST'])
def call_getQName():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    gen_prefix = request_json.get("gen_prefix")
    

    return getQName(uri, gen_prefix)

@app.route('/statement', methods=['POST'])
def call_statement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return statement(subject)

@app.route('/path', methods=['POST'])
def call_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    
    newline = request_json.get("newline")
    

    return path(node, position, newline)

@app.route('/s_clause', methods=['POST'])
def call_s_clause():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return s_clause(subject)

@app.route('/p_clause', methods=['POST'])
def call_p_clause():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    

    return p_clause(node, position)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/addNamespace', methods=['POST'])
def call_addNamespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    

    return addNamespace(prefix, namespace)

@app.route('/checkSubject', methods=['POST'])
def call_checkSubject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return checkSubject(subject)

@app.route('/isDone', methods=['POST'])
def call_isDone():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return isDone(subject)

@app.route('/orderSubjects', methods=['POST'])
def call_orderSubjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return orderSubjects()

@app.route('/preprocess', methods=['POST'])
def call_preprocess():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return preprocess()

@app.route('/preprocessTriple', methods=['POST'])
def call_preprocessTriple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return preprocessTriple(triple)

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/buildPredicateHash', methods=['POST'])
def call_buildPredicateHash():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return buildPredicateHash(subject)

@app.route('/sortProperties', methods=['POST'])
def call_sortProperties():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    properties = request_json.get("properties")
    

    return sortProperties(properties)

@app.route('/subjectDone', methods=['POST'])
def call_subjectDone():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return subjectDone(subject)

@app.route('/indent', methods=['POST'])
def call_indent():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    modifier = request_json.get("modifier")
    

    return indent(modifier)

@app.route('/write', methods=['POST'])
def call_write():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    text = request_json.get("text")
    

    return write(text)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    
    spacious = request_json.get("spacious")
    

    return serialize(stream, base, encoding, spacious)

@app.route('/getQName', methods=['POST'])
def call_getQName():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    gen_prefix = request_json.get("gen_prefix")
    

    return getQName(uri, gen_prefix)

@app.route('/startDocument', methods=['POST'])
def call_startDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return startDocument()

@app.route('/endDocument', methods=['POST'])
def call_endDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return endDocument()

@app.route('/statement', methods=['POST'])
def call_statement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return statement(subject)

@app.route('/s_default', methods=['POST'])
def call_s_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return s_default(subject)

@app.route('/s_squared', methods=['POST'])
def call_s_squared():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return s_squared(subject)

@app.route('/path', methods=['POST'])
def call_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    
    newline = request_json.get("newline")
    

    return path(node, position, newline)

@app.route('/p_default', methods=['POST'])
def call_p_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    
    newline = request_json.get("newline")
    

    return p_default(node, position, newline)

@app.route('/label', methods=['POST'])
def call_label():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    

    return label(node, position)

@app.route('/p_squared', methods=['POST'])
def call_p_squared():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    
    newline = request_json.get("newline")
    

    return p_squared(node, position, newline)

@app.route('/isValidList', methods=['POST'])
def call_isValidList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l_ = request_json.get("l_")
    

    return isValidList(l_)

@app.route('/doList', methods=['POST'])
def call_doList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l_ = request_json.get("l_")
    

    return doList(l_)

@app.route('/predicateList', methods=['POST'])
def call_predicateList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    newline = request_json.get("newline")
    

    return predicateList(subject, newline)

@app.route('/verb', methods=['POST'])
def call_verb():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    newline = request_json.get("newline")
    

    return verb(node, newline)

@app.route('/objectList', methods=['POST'])
def call_objectList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    objects = request_json.get("objects")
    

    return objectList(objects)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/from_rdf', methods=['POST'])
def call_from_rdf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    context_data = request_json.get("context_data")
    
    base = request_json.get("base")
    
    use_native_types = request_json.get("use_native_types")
    
    use_rdf_type = request_json.get("use_rdf_type")
    
    auto_compact = request_json.get("auto_compact")
    
    startnode = request_json.get("startnode")
    
    index = request_json.get("index")
    

    return from_rdf(graph, context_data, base, use_native_types, use_rdf_type, auto_compact, startnode, index)

@app.route('/convert', methods=['POST'])
def call_convert():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return convert(graph)

@app.route('/from_graph', methods=['POST'])
def call_from_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return from_graph(graph)

@app.route('/process_subject', methods=['POST'])
def call_process_subject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    s = request_json.get("s")
    
    nodemap = request_json.get("nodemap")
    

    return process_subject(graph, s, nodemap)

@app.route('/add_to_node', methods=['POST'])
def call_add_to_node():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    s = request_json.get("s")
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    
    s_node = request_json.get("s_node")
    
    nodemap = request_json.get("nodemap")
    

    return add_to_node(graph, s, p, o, s_node, nodemap)

@app.route('/type_coerce', methods=['POST'])
def call_type_coerce():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    o = request_json.get("o")
    
    coerce_type = request_json.get("coerce_type")
    

    return type_coerce(o, coerce_type)

@app.route('/to_raw_value', methods=['POST'])
def call_to_raw_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    s = request_json.get("s")
    
    o = request_json.get("o")
    
    nodemap = request_json.get("nodemap")
    

    return to_raw_value(graph, s, o, nodemap)

@app.route('/to_collection', methods=['POST'])
def call_to_collection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    l_ = request_json.get("l_")
    

    return to_collection(graph, l_)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/addNamespace', methods=['POST'])
def call_addNamespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    

    return addNamespace(prefix, namespace)

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    
    spacious = request_json.get("spacious")
    

    return serialize(stream, base, encoding, spacious)

@app.route('/preprocessTriple', methods=['POST'])
def call_preprocessTriple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return preprocessTriple(triple)

@app.route('/getQName', methods=['POST'])
def call_getQName():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    gen_prefix = request_json.get("gen_prefix")
    

    return getQName(uri, gen_prefix)

@app.route('/startDocument', methods=['POST'])
def call_startDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return startDocument()

@app.route('/endDocument', methods=['POST'])
def call_endDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return endDocument()

@app.route('/statement', methods=['POST'])
def call_statement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return statement(subject)

@app.route('/s_default', methods=['POST'])
def call_s_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return s_default(subject)

@app.route('/s_squared', methods=['POST'])
def call_s_squared():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return s_squared(subject)

@app.route('/path', methods=['POST'])
def call_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    
    newline = request_json.get("newline")
    

    return path(node, position, newline)

@app.route('/p_default', methods=['POST'])
def call_p_default():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    
    newline = request_json.get("newline")
    

    return p_default(node, position, newline)

@app.route('/label', methods=['POST'])
def call_label():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    

    return label(node, position)

@app.route('/p_squared', methods=['POST'])
def call_p_squared():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    position = request_json.get("position")
    

    return p_squared(node, position)

@app.route('/isValidList', methods=['POST'])
def call_isValidList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l_ = request_json.get("l_")
    

    return isValidList(l_)

@app.route('/doList', methods=['POST'])
def call_doList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l_ = request_json.get("l_")
    

    return doList(l_)

@app.route('/predicateList', methods=['POST'])
def call_predicateList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    newline = request_json.get("newline")
    

    return predicateList(subject, newline)

@app.route('/verb', methods=['POST'])
def call_verb():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    
    newline = request_json.get("newline")
    

    return verb(node, newline)

@app.route('/objectList', methods=['POST'])
def call_objectList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    objects = request_json.get("objects")
    

    return objectList(objects)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/push', methods=['POST'])
def call_push():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return push(uri)

@app.route('/pop', methods=['POST'])
def call_pop():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return pop(uri)

@app.route('/element', methods=['POST'])
def call_element():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    content = request_json.get("content")
    
    attributes = request_json.get("attributes")
    

    return element(uri, content, attributes)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespaces = request_json.get("namespaces")
    

    return namespaces(namespaces)

@app.route('/attribute', methods=['POST'])
def call_attribute():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    value = request_json.get("value")
    

    return attribute(uri, value)

@app.route('/text', methods=['POST'])
def call_text():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    text = request_json.get("text")
    

    return text(text)

@app.route('/qname', methods=['POST'])
def call_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return qname(uri)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    base = request_json.get("base")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, base, encoding)

@app.route('/next_li', methods=['POST'])
def call_next_li():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return next_li()

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/setDocumentLocator', methods=['POST'])
def call_setDocumentLocator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    locator = request_json.get("locator")
    

    return setDocumentLocator(locator)

@app.route('/startDocument', methods=['POST'])
def call_startDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return startDocument()

@app.route('/startPrefixMapping', methods=['POST'])
def call_startPrefixMapping():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    

    return startPrefixMapping(prefix, namespace)

@app.route('/endPrefixMapping', methods=['POST'])
def call_endPrefixMapping():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return endPrefixMapping(prefix)

@app.route('/startElementNS', methods=['POST'])
def call_startElementNS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return startElementNS(name, qname, attrs)

@app.route('/endElementNS', methods=['POST'])
def call_endElementNS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    

    return endElementNS(name, qname)

@app.route('/characters', methods=['POST'])
def call_characters():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    content = request_json.get("content")
    

    return characters(content)

@app.route('/ignorableWhitespace', methods=['POST'])
def call_ignorableWhitespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    content = request_json.get("content")
    

    return ignorableWhitespace(content)

@app.route('/processingInstruction', methods=['POST'])
def call_processingInstruction():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    target = request_json.get("target")
    
    data = request_json.get("data")
    

    return processingInstruction(target, data)

@app.route('/add_reified', methods=['POST'])
def call_add_reified():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    sid = request_json.get("sid")
    
    spo = request_json.get("spo")
    

    return add_reified(sid, spo)

@app.route('/error', methods=['POST'])
def call_error():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    message = request_json.get("message")
    

    return error(message)

@app.route('/get_current', methods=['POST'])
def call_get_current():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_current()

@app.route('/get_next', methods=['POST'])
def call_get_next():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_next()

@app.route('/get_parent', methods=['POST'])
def call_get_parent():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_parent()

@app.route('/absolutize', methods=['POST'])
def call_absolutize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return absolutize(uri)

@app.route('/convert', methods=['POST'])
def call_convert():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return convert(name, qname, attrs)

@app.route('/document_element_start', methods=['POST'])
def call_document_element_start():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return document_element_start(name, qname, attrs)

@app.route('/node_element_start', methods=['POST'])
def call_node_element_start():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return node_element_start(name, qname, attrs)

@app.route('/node_element_end', methods=['POST'])
def call_node_element_end():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    

    return node_element_end(name, qname)

@app.route('/property_element_start', methods=['POST'])
def call_property_element_start():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return property_element_start(name, qname, attrs)

@app.route('/property_element_char', methods=['POST'])
def call_property_element_char():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    

    return property_element_char(data)

@app.route('/property_element_end', methods=['POST'])
def call_property_element_end():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    

    return property_element_end(name, qname)

@app.route('/list_node_element_end', methods=['POST'])
def call_list_node_element_end():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    

    return list_node_element_end(name, qname)

@app.route('/literal_element_start', methods=['POST'])
def call_literal_element_start():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return literal_element_start(name, qname, attrs)

@app.route('/literal_element_char', methods=['POST'])
def call_literal_element_char():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    

    return literal_element_char(data)

@app.route('/literal_element_end', methods=['POST'])
def call_literal_element_end():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    

    return literal_element_end(name, qname)

@app.route('/create_parser', methods=['POST'])
def call_create_parser():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    target = request_json.get("target")
    
    store = request_json.get("store")
    

    return create_parser(target, store)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    sink = request_json.get("sink")
    

    return parse(source, sink)

@app.route('/becauseSubGraph', methods=['POST'])
def call_becauseSubGraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return becauseSubGraph()

@app.route('/directiveOrStatement', methods=['POST'])
def call_directiveOrStatement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    h = request_json.get("h")
    

    return directiveOrStatement(argstr, h)

@app.route('/labelOrSubject', methods=['POST'])
def call_labelOrSubject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return labelOrSubject(argstr, i, res)

@app.route('/graph', methods=['POST'])
def call_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return graph(argstr, i)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    graph = request_json.get("graph")
    
    encoding = request_json.get("encoding")
    

    return parse(source, graph, encoding)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    inputsource = request_json.get("inputsource")
    
    sink = request_json.get("sink")
    
    bnode_context = request_json.get("bnode_context")
    
    skolemize = request_json.get("skolemize")
    

    return parse(inputsource, sink, bnode_context, skolemize)

@app.route('/parsepatch', methods=['POST'])
def call_parsepatch():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return parsepatch(bnode_context)

@app.route('/add_or_remove_triple_or_quad', methods=['POST'])
def call_add_or_remove_triple_or_quad():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    operation = request_json.get("operation")
    
    bnode_context = request_json.get("bnode_context")
    

    return add_or_remove_triple_or_quad(operation, bnode_context)

@app.route('/add_prefix', methods=['POST'])
def call_add_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return add_prefix()

@app.route('/delete_prefix', methods=['POST'])
def call_delete_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return delete_prefix()

@app.route('/operation', methods=['POST'])
def call_operation():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return operation()

@app.route('/eat_op', methods=['POST'])
def call_eat_op():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    op = request_json.get("op")
    

    return eat_op(op)

@app.route('/nodeid', methods=['POST'])
def call_nodeid():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return nodeid(bnode_context)

@app.route('/labeled_bnode', methods=['POST'])
def call_labeled_bnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return labeled_bnode()

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    context = request_json.get("context")
    
    dataset = request_json.get("dataset")
    

    return parse(data, context, dataset)

@app.route('/to_rdf', methods=['POST'])
def call_to_rdf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    
    dataset = request_json.get("dataset")
    
    base = request_json.get("base")
    
    context_data = request_json.get("context_data")
    
    version = request_json.get("version")
    
    generalized_rdf = request_json.get("generalized_rdf")
    
    allow_lists_of_lists = request_json.get("allow_lists_of_lists")
    
    skolemize = request_json.get("skolemize")
    

    return to_rdf(data, dataset, base, context_data, version, generalized_rdf, allow_lists_of_lists, skolemize)

@app.route('/reset', methods=['POST'])
def call_reset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return reset()

@app.route('/setDocumentLocator', methods=['POST'])
def call_setDocumentLocator():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    locator = request_json.get("locator")
    

    return setDocumentLocator(locator)

@app.route('/startDocument', methods=['POST'])
def call_startDocument():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return startDocument()

@app.route('/startPrefixMapping', methods=['POST'])
def call_startPrefixMapping():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    

    return startPrefixMapping(prefix, namespace)

@app.route('/endPrefixMapping', methods=['POST'])
def call_endPrefixMapping():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return endPrefixMapping(prefix)

@app.route('/startElementNS', methods=['POST'])
def call_startElementNS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    
    attrs = request_json.get("attrs")
    

    return startElementNS(name, qname, attrs)

@app.route('/endElementNS', methods=['POST'])
def call_endElementNS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    qname = request_json.get("qname")
    

    return endElementNS(name, qname)

@app.route('/get_bnode', methods=['POST'])
def call_get_bnode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    label = request_json.get("label")
    

    return get_bnode(label)

@app.route('/characters', methods=['POST'])
def call_characters():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    content = request_json.get("content")
    

    return characters(content)

@app.route('/ignorableWhitespace', methods=['POST'])
def call_ignorableWhitespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    content = request_json.get("content")
    

    return ignorableWhitespace(content)

@app.route('/processingInstruction', methods=['POST'])
def call_processingInstruction():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    target = request_json.get("target")
    
    data = request_json.get("data")
    

    return processingInstruction(target, data)

@app.route('/error', methods=['POST'])
def call_error():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    message = request_json.get("message")
    

    return error(message)

@app.route('/create_parser', methods=['POST'])
def call_create_parser():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    store = request_json.get("store")
    

    return create_parser(store)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    sink = request_json.get("sink")
    

    return parse(source, sink)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    graph = request_json.get("graph")
    
    skolemize = request_json.get("skolemize")
    

    return parse(source, graph, skolemize)

@app.route('/splitFragP', methods=['POST'])
def call_splitFragP():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uriref = request_json.get("uriref")
    
    punc = request_json.get("punc")
    

    return splitFragP(uriref, punc)

@app.route('/join', methods=['POST'])
def call_join():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    here = request_json.get("here")
    
    there = request_json.get("there")
    

    return join(here, there)

@app.route('/base', methods=['POST'])
def call_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return base()

@app.route('/runNamespace', methods=['POST'])
def call_runNamespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return runNamespace()

@app.route('/uniqueURI', methods=['POST'])
def call_uniqueURI():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return uniqueURI()

@app.route('/BecauseOfData', methods=['POST'])
def call_BecauseOfData():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return BecauseOfData()

@app.route('/becauseSubexpression', methods=['POST'])
def call_becauseSubexpression():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return becauseSubexpression()

@app.route('/unicodeExpand', methods=['POST'])
def call_unicodeExpand():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    m = request_json.get("m")
    

    return unicodeExpand(m)

@app.route('/here', methods=['POST'])
def call_here():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    i = request_json.get("i")
    

    return here(i)

@app.route('/formula', methods=['POST'])
def call_formula():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return formula()

@app.route('/loadStream', methods=['POST'])
def call_loadStream():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    

    return loadStream(stream)

@app.route('/loadBuf', methods=['POST'])
def call_loadBuf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    buf = request_json.get("buf")
    

    return loadBuf(buf)

@app.route('/feed', methods=['POST'])
def call_feed():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    octets = request_json.get("octets")
    

    return feed(octets)

@app.route('/directiveOrStatement', methods=['POST'])
def call_directiveOrStatement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    h = request_json.get("h")
    

    return directiveOrStatement(argstr, h)

@app.route('/tok', methods=['POST'])
def call_tok():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tok = request_json.get("tok")
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    colon = request_json.get("colon")
    

    return tok(tok, argstr, i, colon)

@app.route('/sparqlTok', methods=['POST'])
def call_sparqlTok():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tok = request_json.get("tok")
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return sparqlTok(tok, argstr, i)

@app.route('/directive', methods=['POST'])
def call_directive():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return directive(argstr, i)

@app.route('/sparqlDirective', methods=['POST'])
def call_sparqlDirective():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return sparqlDirective(argstr, i)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    pfx = request_json.get("pfx")
    
    uri = request_json.get("uri")
    

    return bind(pfx, uri)

@app.route('/setKeywords', methods=['POST'])
def call_setKeywords():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    k = request_json.get("k")
    

    return setKeywords(k)

@app.route('/startDoc', methods=['POST'])
def call_startDoc():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    formula = request_json.get("formula")
    

    return startDoc(formula)

@app.route('/endDoc', methods=['POST'])
def call_endDoc():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    formula = request_json.get("formula")
    

    return endDoc(formula)

@app.route('/makeStatement', methods=['POST'])
def call_makeStatement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    quadruple = request_json.get("quadruple")
    
    why = request_json.get("why")
    

    return makeStatement(quadruple, why)

@app.route('/statement', methods=['POST'])
def call_statement():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return statement(argstr, i)

@app.route('/subject', methods=['POST'])
def call_subject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return subject(argstr, i, res)

@app.route('/verb', methods=['POST'])
def call_verb():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return verb(argstr, i, res)

@app.route('/prop', methods=['POST'])
def call_prop():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return prop(argstr, i, res)

@app.route('/item', methods=['POST'])
def call_item():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return item(argstr, i, res)

@app.route('/blankNode', methods=['POST'])
def call_blankNode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return blankNode(uri)

@app.route('/path', methods=['POST'])
def call_path():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return path(argstr, i, res)

@app.route('/anonymousNode', methods=['POST'])
def call_anonymousNode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ln = request_json.get("ln")
    

    return anonymousNode(ln)

@app.route('/node', methods=['POST'])
def call_node():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    
    subjectAlready = request_json.get("subjectAlready")
    

    return node(argstr, i, res, subjectAlready)

@app.route('/property_list', methods=['POST'])
def call_property_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    subj = request_json.get("subj")
    

    return property_list(argstr, i, subj)

@app.route('/commaSeparatedList', methods=['POST'])
def call_commaSeparatedList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    j = request_json.get("j")
    
    res = request_json.get("res")
    
    what = request_json.get("what")
    

    return commaSeparatedList(argstr, j, res, what)

@app.route('/objectList', methods=['POST'])
def call_objectList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return objectList(argstr, i, res)

@app.route('/checkDot', methods=['POST'])
def call_checkDot():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return checkDot(argstr, i)

@app.route('/uri_ref2', methods=['POST'])
def call_uri_ref2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return uri_ref2(argstr, i, res)

@app.route('/skipSpace', methods=['POST'])
def call_skipSpace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    

    return skipSpace(argstr, i)

@app.route('/variable', methods=['POST'])
def call_variable():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return variable(argstr, i, res)

@app.route('/bareWord', methods=['POST'])
def call_bareWord():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return bareWord(argstr, i, res)

@app.route('/qname', methods=['POST'])
def call_qname():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return qname(argstr, i, res)

@app.route('/object', methods=['POST'])
def call_object():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return object(argstr, i, res)

@app.route('/nodeOrLiteral', methods=['POST'])
def call_nodeOrLiteral():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    res = request_json.get("res")
    

    return nodeOrLiteral(argstr, i, res)

@app.route('/uriOf', methods=['POST'])
def call_uriOf():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    sym = request_json.get("sym")
    

    return uriOf(sym)

@app.route('/strconst', methods=['POST'])
def call_strconst():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    delim = request_json.get("delim")
    

    return strconst(argstr, i, delim)

@app.route('/uEscape', methods=['POST'])
def call_uEscape():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    startline = request_json.get("startline")
    

    return uEscape(argstr, i, startline)

@app.route('/UEscape', methods=['POST'])
def call_UEscape():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    startline = request_json.get("startline")
    

    return UEscape(argstr, i, startline)

@app.route('/BadSyntax', methods=['POST'])
def call_BadSyntax():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    argstr = request_json.get("argstr")
    
    i = request_json.get("i")
    
    msg = request_json.get("msg")
    

    return BadSyntax(argstr, i, msg)

@app.route('/message', methods=['POST'])
def call_message():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return message()

@app.route('/id', methods=['POST'])
def call_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return id()

@app.route('/newBlankNode', methods=['POST'])
def call_newBlankNode():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    arg = request_json.get("arg")
    
    uri = request_json.get("uri")
    
    why = request_json.get("why")
    

    return newBlankNode(arg, uri, why)

@app.route('/newUniversal', methods=['POST'])
def call_newUniversal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    why = request_json.get("why")
    

    return newUniversal(uri, why)

@app.route('/declareExistential', methods=['POST'])
def call_declareExistential():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    x = request_json.get("x")
    

    return declareExistential(x)

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return close()

@app.route('/newFormula', methods=['POST'])
def call_newFormula():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return newFormula()

@app.route('/newGraph', methods=['POST'])
def call_newGraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    

    return newGraph(identifier)

@app.route('/newSymbol', methods=['POST'])
def call_newSymbol():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return newSymbol()

@app.route('/newLiteral', methods=['POST'])
def call_newLiteral():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    dt = request_json.get("dt")
    
    lang = request_json.get("lang")
    

    return newLiteral(s, dt, lang)

@app.route('/newList', methods=['POST'])
def call_newList():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    n = request_json.get("n")
    
    f = request_json.get("f")
    

    return newList(n, f)

@app.route('/newSet', methods=['POST'])
def call_newSet():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return newSet()

@app.route('/setDefaultNamespace', methods=['POST'])
def call_setDefaultNamespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return setDefaultNamespace()

@app.route('/normalise', methods=['POST'])
def call_normalise():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    f = request_json.get("f")
    
    n = request_json.get("n")
    

    return normalise(f, n)

@app.route('/intern', methods=['POST'])
def call_intern():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    something = request_json.get("something")
    

    return intern(something)

@app.route('/hexify', methods=['POST'])
def call_hexify():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ustr = request_json.get("ustr")
    

    return hexify(ustr)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    graph = request_json.get("graph")
    
    encoding = request_json.get("encoding")
    

    return parse(source, graph, encoding)

@app.route('/triple', methods=['POST'])
def call_triple():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    
    p = request_json.get("p")
    
    o = request_json.get("o")
    

    return triple(s, p, o)

@app.route('/unquote', methods=['POST'])
def call_unquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return unquote(s)

@app.route('/uriquote', methods=['POST'])
def call_uriquote():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    

    return uriquote(uri)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    cls = request_json.get("cls")
    
    source = request_json.get("source")
    
    sink = request_json.get("sink")
    

    return parse(cls, source, sink)

@app.route('/parsestring', methods=['POST'])
def call_parsestring():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return parsestring(s)

@app.route('/readline', methods=['POST'])
def call_readline():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return readline()

@app.route('/parseline', methods=['POST'])
def call_parseline():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return parseline(bnode_context)

@app.route('/peek', methods=['POST'])
def call_peek():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    token = request_json.get("token")
    

    return peek(token)

@app.route('/eat', methods=['POST'])
def call_eat():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    pattern = request_json.get("pattern")
    

    return eat(pattern)

@app.route('/subject', methods=['POST'])
def call_subject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return subject(bnode_context)

@app.route('/predicate', methods=['POST'])
def call_predicate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return predicate()

@app.route('/object', methods=['POST'])
def call_object():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return object(bnode_context)

@app.route('/uriref', methods=['POST'])
def call_uriref():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return uriref()

@app.route('/nodeid', methods=['POST'])
def call_nodeid():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return nodeid(bnode_context)

@app.route('/literal', methods=['POST'])
def call_literal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return literal()

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    inputsource = request_json.get("inputsource")
    
    sink = request_json.get("sink")
    
    bnode_context = request_json.get("bnode_context")
    
    skolemize = request_json.get("skolemize")
    

    return parse(inputsource, sink, bnode_context, skolemize)

@app.route('/parseline', methods=['POST'])
def call_parseline():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bnode_context = request_json.get("bnode_context")
    

    return parseline(bnode_context)

@app.route('/open', methods=['POST'])
def call_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    
    create = request_json.get("create")
    

    return open(configuration, create)

@app.route('/create', methods=['POST'])
def call_create():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return create(configuration)

@app.route('/destroy', methods=['POST'])
def call_destroy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return destroy(configuration)

@app.route('/commit', methods=['POST'])
def call_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return commit()

@app.route('/rollback', methods=['POST'])
def call_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rollback()

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    spo = request_json.get("spo")
    
    context = request_json.get("context")
    
    quoted = request_json.get("quoted")
    

    return add(spo, context, quoted)

@app.route('/addN', methods=['POST'])
def call_addN():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    quads = request_json.get("quads")
    

    return addN(quads)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    spo = request_json.get("spo")
    
    context = request_json.get("context")
    

    return remove(spo, context)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query = request_json.get("query")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    queryGraph = request_json.get("queryGraph")
    
    DEBUG = request_json.get("DEBUG")
    

    return update(query, initNs, initBindings, queryGraph, DEBUG)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return query()

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return triples()

@app.route('/triples_choices', methods=['POST'])
def call_triples_choices():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    _ = request_json.get("_")
    
    context = request_json.get("context")
    

    return triples_choices(_, context)

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return contexts()

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/prefix', methods=['POST'])
def call_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return prefix(namespace)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return namespace(prefix)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/add_graph', methods=['POST'])
def call_add_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_graph(graph)

@app.route('/remove_graph', methods=['POST'])
def call_remove_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return remove_graph(graph)

@app.route('/subjects', methods=['POST'])
def call_subjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    
    object = request_json.get("object")
    

    return subjects(predicate, object)

@app.route('/predicates', methods=['POST'])
def call_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    object = request_json.get("object")
    

    return predicates(subject, object)

@app.route('/objects', methods=['POST'])
def call_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    
    predicate = request_json.get("predicate")
    

    return objects(subject, predicate)

@app.route('/subject_predicates', methods=['POST'])
def call_subject_predicates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    object = request_json.get("object")
    

    return subject_predicates(object)

@app.route('/subject_objects', methods=['POST'])
def call_subject_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    predicate = request_json.get("predicate")
    

    return subject_objects(predicate)

@app.route('/predicate_objects', methods=['POST'])
def call_predicate_objects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    subject = request_json.get("subject")
    

    return predicate_objects(subject)

@app.route('/setTimeout', methods=['POST'])
def call_setTimeout():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    timeout = request_json.get("timeout")
    

    return setTimeout(timeout)

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    
    quoted = request_json.get("quoted")
    

    return add(triple, context, quoted)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple_pattern = request_json.get("triple_pattern")
    
    context = request_json.get("context")
    

    return remove(triple_pattern, context)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple_pattern = request_json.get("triple_pattern")
    
    context = request_json.get("context")
    

    return triples(triple_pattern, context)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return namespace(prefix)

@app.route('/prefix', methods=['POST'])
def call_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return prefix(namespace)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query = request_json.get("query")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    queryGraph = request_json.get("queryGraph")
    

    return query(query, initNs, initBindings, queryGraph)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    update = request_json.get("update")
    
    initNs = request_json.get("initNs")
    
    initBindings = request_json.get("initBindings")
    
    queryGraph = request_json.get("queryGraph")
    

    return update(update, initNs, initBindings, queryGraph)

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return contexts(triple)

@app.route('/add_graph', methods=['POST'])
def call_add_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_graph(graph)

@app.route('/remove_graph', methods=['POST'])
def call_remove_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return remove_graph(graph)

@app.route('/bb', methods=['POST'])
def call_bb():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    u = request_json.get("u")
    

    return bb(u)

@app.route('/is_open', methods=['POST'])
def call_is_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return is_open()

@app.route('/open', methods=['POST'])
def call_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    path = request_json.get("path")
    
    create = request_json.get("create")
    

    return open(path, create)

@app.route('/sync', methods=['POST'])
def call_sync():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return sync()

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    commit_pending_transaction = request_json.get("commit_pending_transaction")
    

    return close(commit_pending_transaction)

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    
    quoted = request_json.get("quoted")
    
    txn = request_json.get("txn")
    

    return add(triple, context, quoted, txn)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    spo = request_json.get("spo")
    
    context = request_json.get("context")
    
    txn = request_json.get("txn")
    

    return remove(spo, context, txn)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    spo = request_json.get("spo")
    
    context = request_json.get("context")
    
    txn = request_json.get("txn")
    

    return triples(spo, context, txn)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return namespace(prefix)

@app.route('/prefix', methods=['POST'])
def call_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return prefix(namespace)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return contexts(triple)

@app.route('/add_graph', methods=['POST'])
def call_add_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return add_graph(graph)

@app.route('/remove_graph', methods=['POST'])
def call_remove_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return remove_graph(graph)

@app.route('/to_key_func', methods=['POST'])
def call_to_key_func():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    i = request_json.get("i")
    

    return to_key_func(i)

@app.route('/from_key_func', methods=['POST'])
def call_from_key_func():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    i = request_json.get("i")
    

    return from_key_func(i)

@app.route('/results_from_key_func', methods=['POST'])
def call_results_from_key_func():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    i = request_json.get("i")
    
    from_string = request_json.get("from_string")
    

    return results_from_key_func(i, from_string)

@app.route('/readable_index', methods=['POST'])
def call_readable_index():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    i = request_json.get("i")
    

    return readable_index(i)

@app.route('/method', methods=['POST'])
def call_method():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    method = request_json.get("method")
    

    return method(method)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query = request_json.get("query")
    
    default_graph = request_json.get("default_graph")
    
    named_graph = request_json.get("named_graph")
    

    return query(query, default_graph, named_graph)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query = request_json.get("query")
    
    default_graph = request_json.get("default_graph")
    
    named_graph = request_json.get("named_graph")
    

    return update(query, default_graph, named_graph)

@app.route('/regexCompareQuad', methods=['POST'])
def call_regexCompareQuad():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    quad = request_json.get("quad")
    
    regexQuad = request_json.get("regexQuad")
    

    return regexCompareQuad(quad, regexQuad)

@app.route('/open', methods=['POST'])
def call_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    
    create = request_json.get("create")
    

    return open(configuration, create)

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    commit_pending_transaction = request_json.get("commit_pending_transaction")
    

    return close(commit_pending_transaction)

@app.route('/destroy', methods=['POST'])
def call_destroy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return destroy(configuration)

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    
    quoted = request_json.get("quoted")
    

    return add(triple, context, quoted)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    

    return remove(triple, context)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    

    return triples(triple, context)

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return contexts(triple)

@app.route('/remove_context', methods=['POST'])
def call_remove_context():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    identifier = request_json.get("identifier")
    

    return remove_context(identifier)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/prefix', methods=['POST'])
def call_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return prefix(namespace)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return namespace(prefix)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/commit', methods=['POST'])
def call_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return commit()

@app.route('/rollback', methods=['POST'])
def call_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rollback()

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return add(triple)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return remove(triple)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return triples(triple)

@app.route('/open', methods=['POST'])
def call_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    
    create = request_json.get("create")
    

    return open(configuration, create)

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    commit_pending_transaction = request_json.get("commit_pending_transaction")
    

    return close(commit_pending_transaction)

@app.route('/destroy', methods=['POST'])
def call_destroy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    configuration = request_json.get("configuration")
    

    return destroy(configuration)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return query()

@app.route('/add', methods=['POST'])
def call_add():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    
    quoted = request_json.get("quoted")
    

    return add(triple, context, quoted)

@app.route('/remove', methods=['POST'])
def call_remove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    spo = request_json.get("spo")
    
    context = request_json.get("context")
    

    return remove(spo, context)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    
    context = request_json.get("context")
    

    return triples(triple, context)

@app.route('/contexts', methods=['POST'])
def call_contexts():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triple = request_json.get("triple")
    

    return contexts(triple)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    namespace = request_json.get("namespace")
    
    override = request_json.get("override")
    

    return bind(prefix, namespace, override)

@app.route('/prefix', methods=['POST'])
def call_prefix():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    namespace = request_json.get("namespace")
    

    return prefix(namespace)

@app.route('/namespace', methods=['POST'])
def call_namespace():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    

    return namespace(prefix)

@app.route('/namespaces', methods=['POST'])
def call_namespaces():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return namespaces()

@app.route('/commit', methods=['POST'])
def call_commit():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return commit()

@app.route('/rollback', methods=['POST'])
def call_rollback():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return rollback()

@app.route('/base', methods=['POST'])
def call_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    base = request_json.get("base")
    

    return base(base)

@app.route('/subcontext', methods=['POST'])
def call_subcontext():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    propagate = request_json.get("propagate")
    

    return subcontext(source, propagate)

@app.route('/get_context_for_term', methods=['POST'])
def call_get_context_for_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term = request_json.get("term")
    

    return get_context_for_term(term)

@app.route('/get_context_for_type', methods=['POST'])
def call_get_context_for_type():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    

    return get_context_for_type(node)

@app.route('/get_id', methods=['POST'])
def call_get_id():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_id(obj)

@app.route('/get_type', methods=['POST'])
def call_get_type():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_type(obj)

@app.route('/get_language', methods=['POST'])
def call_get_language():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_language(obj)

@app.route('/get_value', methods=['POST'])
def call_get_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_value(obj)

@app.route('/get_graph', methods=['POST'])
def call_get_graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_graph(obj)

@app.route('/get_list', methods=['POST'])
def call_get_list():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_list(obj)

@app.route('/get_set', methods=['POST'])
def call_get_set():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_set(obj)

@app.route('/get_rev', methods=['POST'])
def call_get_rev():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj = request_json.get("obj")
    

    return get_rev(obj)

@app.route('/get_key', methods=['POST'])
def call_get_key():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    key = request_json.get("key")
    

    return get_key(key)

@app.route('/get_keys', methods=['POST'])
def call_get_keys():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    key = request_json.get("key")
    

    return get_keys(key)

@app.route('/add_term', methods=['POST'])
def call_add_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    idref = request_json.get("idref")
    
    coercion = request_json.get("coercion")
    
    container = request_json.get("container")
    
    index = request_json.get("index")
    
    language = request_json.get("language")
    
    reverse = request_json.get("reverse")
    
    context = request_json.get("context")
    
    prefix = request_json.get("prefix")
    
    protected = request_json.get("protected")
    

    return add_term(name, idref, coercion, container, index, language, reverse, context, prefix, protected)

@app.route('/find_term', methods=['POST'])
def call_find_term():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    idref = request_json.get("idref")
    
    coercion = request_json.get("coercion")
    
    container = request_json.get("container")
    
    language = request_json.get("language")
    
    reverse = request_json.get("reverse")
    

    return find_term(idref, coercion, container, language, reverse)

@app.route('/resolve', methods=['POST'])
def call_resolve():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    curie_or_iri = request_json.get("curie_or_iri")
    

    return resolve(curie_or_iri)

@app.route('/resolve_iri', methods=['POST'])
def call_resolve_iri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    

    return resolve_iri(iri)

@app.route('/isblank', methods=['POST'])
def call_isblank():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ref = request_json.get("ref")
    

    return isblank(ref)

@app.route('/expand', methods=['POST'])
def call_expand():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term_curie_or_iri = request_json.get("term_curie_or_iri")
    
    use_vocab = request_json.get("use_vocab")
    

    return expand(term_curie_or_iri, use_vocab)

@app.route('/shrink_iri', methods=['POST'])
def call_shrink_iri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    

    return shrink_iri(iri)

@app.route('/to_symbol', methods=['POST'])
def call_to_symbol():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    

    return to_symbol(iri)

@app.route('/load', methods=['POST'])
def call_load():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    base = request_json.get("base")
    
    referenced_contexts = request_json.get("referenced_contexts")
    

    return load(source, base, referenced_contexts)

@app.route('/to_dict', methods=['POST'])
def call_to_dict():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return to_dict()

@app.route('/source_to_json', methods=['POST'])
def call_source_to_json():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    fragment_id = request_json.get("fragment_id")
    
    extract_all_scripts = request_json.get("extract_all_scripts")
    

    return source_to_json(source, fragment_id, extract_all_scripts)

@app.route('/split_iri', methods=['POST'])
def call_split_iri():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    

    return split_iri(iri)

@app.route('/norm_url', methods=['POST'])
def call_norm_url():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    base = request_json.get("base")
    
    url = request_json.get("url")
    

    return norm_url(base, url)

@app.route('/context_from_urlinputsource', methods=['POST'])
def call_context_from_urlinputsource():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    

    return context_from_urlinputsource(source)

@app.route('/handle_starttag', methods=['POST'])
def call_handle_starttag():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tag = request_json.get("tag")
    
    attrs = request_json.get("attrs")
    

    return handle_starttag(tag, attrs)

@app.route('/handle_data', methods=['POST'])
def call_handle_data():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    data = request_json.get("data")
    

    return handle_data(data)

@app.route('/get_json', methods=['POST'])
def call_get_json():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_json()

@app.route('/get_base', methods=['POST'])
def call_get_base():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_base()

@app.route('/value', methods=['POST'])
def call_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    val = request_json.get("val")
    
    variables = request_json.get("variables")
    
    errors = request_json.get("errors")
    

    return value(ctx, val, variables, errors)

@app.route('/postParse2', methods=['POST'])
def call_postParse2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tokenList = request_json.get("tokenList")
    

    return postParse2(tokenList)

@app.route('/clone', methods=['POST'])
def call_clone():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clone()

@app.route('/get', methods=['POST'])
def call_get():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    a = request_json.get("a")
    
    variables = request_json.get("variables")
    
    errors = request_json.get("errors")
    

    return get(a, variables, errors)

@app.route('/eval', methods=['POST'])
def call_eval():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    

    return eval(ctx)

@app.route('/postParse', methods=['POST'])
def call_postParse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    instring = request_json.get("instring")
    
    loc = request_json.get("loc")
    
    tokenList = request_json.get("tokenList")
    

    return postParse(instring, loc, tokenList)

@app.route('/setEvalFn', methods=['POST'])
def call_setEvalFn():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    evalfn = request_json.get("evalfn")
    

    return setEvalFn(evalfn)

@app.route('/prettify_parsetree', methods=['POST'])
def call_prettify_parsetree():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    t = request_json.get("t")
    
    indent = request_json.get("indent")
    
    depth = request_json.get("depth")
    

    return prettify_parsetree(t, indent, depth)

@app.route('/neg', methods=['POST'])
def call_neg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    literal = request_json.get("literal")
    

    return neg(literal)

@app.route('/setLanguage', methods=['POST'])
def call_setLanguage():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    terms = request_json.get("terms")
    

    return setLanguage(terms)

@app.route('/setDataType', methods=['POST'])
def call_setDataType():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    terms = request_json.get("terms")
    

    return setDataType(terms)

@app.route('/expandTriples', methods=['POST'])
def call_expandTriples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    terms = request_json.get("terms")
    

    return expandTriples(terms)

@app.route('/expandBNodeTriples', methods=['POST'])
def call_expandBNodeTriples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    terms = request_json.get("terms")
    

    return expandBNodeTriples(terms)

@app.route('/expandCollection', methods=['POST'])
def call_expandCollection():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    terms = request_json.get("terms")
    

    return expandCollection(terms)

@app.route('/expandUnicodeEscapes', methods=['POST'])
def call_expandUnicodeEscapes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    

    return expandUnicodeEscapes(q)

@app.route('/parseQuery', methods=['POST'])
def call_parseQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    

    return parseQuery(q)

@app.route('/parseUpdate', methods=['POST'])
def call_parseUpdate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    

    return parseUpdate(q)

@app.route('/evalBGP', methods=['POST'])
def call_evalBGP():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    bgp = request_json.get("bgp")
    

    return evalBGP(ctx, bgp)

@app.route('/evalExtend', methods=['POST'])
def call_evalExtend():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    extend = request_json.get("extend")
    

    return evalExtend(ctx, extend)

@app.route('/evalLazyJoin', methods=['POST'])
def call_evalLazyJoin():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    join = request_json.get("join")
    

    return evalLazyJoin(ctx, join)

@app.route('/evalJoin', methods=['POST'])
def call_evalJoin():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    join = request_json.get("join")
    

    return evalJoin(ctx, join)

@app.route('/evalUnion', methods=['POST'])
def call_evalUnion():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    union = request_json.get("union")
    

    return evalUnion(ctx, union)

@app.route('/evalMinus', methods=['POST'])
def call_evalMinus():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    minus = request_json.get("minus")
    

    return evalMinus(ctx, minus)

@app.route('/evalLeftJoin', methods=['POST'])
def call_evalLeftJoin():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    join = request_json.get("join")
    

    return evalLeftJoin(ctx, join)

@app.route('/evalFilter', methods=['POST'])
def call_evalFilter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalFilter(ctx, part)

@app.route('/evalGraph', methods=['POST'])
def call_evalGraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalGraph(ctx, part)

@app.route('/evalValues', methods=['POST'])
def call_evalValues():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalValues(ctx, part)

@app.route('/evalMultiset', methods=['POST'])
def call_evalMultiset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalMultiset(ctx, part)

@app.route('/evalPart', methods=['POST'])
def call_evalPart():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalPart(ctx, part)

@app.route('/evalServiceQuery', methods=['POST'])
def call_evalServiceQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalServiceQuery(ctx, part)

@app.route('/evalGroup', methods=['POST'])
def call_evalGroup():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    group = request_json.get("group")
    

    return evalGroup(ctx, group)

@app.route('/evalAggregateJoin', methods=['POST'])
def call_evalAggregateJoin():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    agg = request_json.get("agg")
    

    return evalAggregateJoin(ctx, agg)

@app.route('/evalOrderBy', methods=['POST'])
def call_evalOrderBy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalOrderBy(ctx, part)

@app.route('/evalSlice', methods=['POST'])
def call_evalSlice():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    slice = request_json.get("slice")
    

    return evalSlice(ctx, slice)

@app.route('/evalReduced', methods=['POST'])
def call_evalReduced():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalReduced(ctx, part)

@app.route('/evalDistinct', methods=['POST'])
def call_evalDistinct():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return evalDistinct(ctx, part)

@app.route('/evalProject', methods=['POST'])
def call_evalProject():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    project = request_json.get("project")
    

    return evalProject(ctx, project)

@app.route('/evalSelectQuery', methods=['POST'])
def call_evalSelectQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    query = request_json.get("query")
    

    return evalSelectQuery(ctx, query)

@app.route('/evalAskQuery', methods=['POST'])
def call_evalAskQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    query = request_json.get("query")
    

    return evalAskQuery(ctx, query)

@app.route('/evalConstructQuery', methods=['POST'])
def call_evalConstructQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    query = request_json.get("query")
    

    return evalConstructQuery(ctx, query)

@app.route('/evalDescribeQuery', methods=['POST'])
def call_evalDescribeQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    query = request_json.get("query")
    

    return evalDescribeQuery(ctx, query)

@app.route('/evalQuery', methods=['POST'])
def call_evalQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    query = request_json.get("query")
    
    initBindings = request_json.get("initBindings")
    
    base = request_json.get("base")
    

    return evalQuery(graph, query, initBindings, base)

@app.route('/type_promotion', methods=['POST'])
def call_type_promotion():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    t1 = request_json.get("t1")
    
    t2 = request_json.get("t2")
    

    return type_promotion(t1, t2)

@app.route('/prepareQuery', methods=['POST'])
def call_prepareQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    queryString = request_json.get("queryString")
    
    initNs = request_json.get("initNs")
    
    base = request_json.get("base")
    

    return prepareQuery(queryString, initNs, base)

@app.route('/prepareUpdate', methods=['POST'])
def call_prepareUpdate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    updateString = request_json.get("updateString")
    
    initNs = request_json.get("initNs")
    
    base = request_json.get("base")
    

    return prepareUpdate(updateString, initNs, base)

@app.route('/processUpdate', methods=['POST'])
def call_processUpdate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    updateString = request_json.get("updateString")
    
    initBindings = request_json.get("initBindings")
    
    initNs = request_json.get("initNs")
    
    base = request_json.get("base")
    

    return processUpdate(graph, updateString, initBindings, initNs, base)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    strOrQuery = request_json.get("strOrQuery")
    
    initBindings = request_json.get("initBindings")
    
    initNs = request_json.get("initNs")
    

    return update(strOrQuery, initBindings, initNs)

@app.route('/query', methods=['POST'])
def call_query():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    strOrQuery = request_json.get("strOrQuery")
    
    initBindings = request_json.get("initBindings")
    
    initNs = request_json.get("initNs")
    
    base = request_json.get("base")
    
    DEBUG = request_json.get("DEBUG")
    

    return query(strOrQuery, initBindings, initNs, base, DEBUG)

@app.route('/evalLoad', methods=['POST'])
def call_evalLoad():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalLoad(ctx, u)

@app.route('/evalCreate', methods=['POST'])
def call_evalCreate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalCreate(ctx, u)

@app.route('/evalClear', methods=['POST'])
def call_evalClear():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalClear(ctx, u)

@app.route('/evalDrop', methods=['POST'])
def call_evalDrop():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalDrop(ctx, u)

@app.route('/evalInsertData', methods=['POST'])
def call_evalInsertData():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalInsertData(ctx, u)

@app.route('/evalDeleteData', methods=['POST'])
def call_evalDeleteData():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalDeleteData(ctx, u)

@app.route('/evalDeleteWhere', methods=['POST'])
def call_evalDeleteWhere():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalDeleteWhere(ctx, u)

@app.route('/evalModify', methods=['POST'])
def call_evalModify():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalModify(ctx, u)

@app.route('/evalAdd', methods=['POST'])
def call_evalAdd():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalAdd(ctx, u)

@app.route('/evalMove', methods=['POST'])
def call_evalMove():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalMove(ctx, u)

@app.route('/evalCopy', methods=['POST'])
def call_evalCopy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    u = request_json.get("u")
    

    return evalCopy(ctx, u)

@app.route('/evalUpdate', methods=['POST'])
def call_evalUpdate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    
    update = request_json.get("update")
    
    initBindings = request_json.get("initBindings")
    

    return evalUpdate(graph, update, initBindings)

@app.route('/Builtin_IRI', methods=['POST'])
def call_Builtin_IRI():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_IRI(expr, ctx)

@app.route('/Builtin_isBLANK', methods=['POST'])
def call_Builtin_isBLANK():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_isBLANK(expr, ctx)

@app.route('/Builtin_isLITERAL', methods=['POST'])
def call_Builtin_isLITERAL():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_isLITERAL(expr, ctx)

@app.route('/Builtin_isIRI', methods=['POST'])
def call_Builtin_isIRI():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_isIRI(expr, ctx)

@app.route('/Builtin_isNUMERIC', methods=['POST'])
def call_Builtin_isNUMERIC():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_isNUMERIC(expr, ctx)

@app.route('/Builtin_BNODE', methods=['POST'])
def call_Builtin_BNODE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_BNODE(expr, ctx)

@app.route('/Builtin_ABS', methods=['POST'])
def call_Builtin_ABS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_ABS(expr, ctx)

@app.route('/Builtin_IF', methods=['POST'])
def call_Builtin_IF():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_IF(expr, ctx)

@app.route('/Builtin_RAND', methods=['POST'])
def call_Builtin_RAND():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_RAND(expr, ctx)

@app.route('/Builtin_UUID', methods=['POST'])
def call_Builtin_UUID():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_UUID(expr, ctx)

@app.route('/Builtin_STRUUID', methods=['POST'])
def call_Builtin_STRUUID():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRUUID(expr, ctx)

@app.route('/Builtin_MD5', methods=['POST'])
def call_Builtin_MD5():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_MD5(expr, ctx)

@app.route('/Builtin_SHA1', methods=['POST'])
def call_Builtin_SHA1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_SHA1(expr, ctx)

@app.route('/Builtin_SHA256', methods=['POST'])
def call_Builtin_SHA256():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_SHA256(expr, ctx)

@app.route('/Builtin_SHA384', methods=['POST'])
def call_Builtin_SHA384():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_SHA384(expr, ctx)

@app.route('/Builtin_SHA512', methods=['POST'])
def call_Builtin_SHA512():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_SHA512(expr, ctx)

@app.route('/Builtin_COALESCE', methods=['POST'])
def call_Builtin_COALESCE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_COALESCE(expr, ctx)

@app.route('/Builtin_CEIL', methods=['POST'])
def call_Builtin_CEIL():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_CEIL(expr, ctx)

@app.route('/Builtin_FLOOR', methods=['POST'])
def call_Builtin_FLOOR():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_FLOOR(expr, ctx)

@app.route('/Builtin_ROUND', methods=['POST'])
def call_Builtin_ROUND():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_ROUND(expr, ctx)

@app.route('/Builtin_REGEX', methods=['POST'])
def call_Builtin_REGEX():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_REGEX(expr, ctx)

@app.route('/Builtin_REPLACE', methods=['POST'])
def call_Builtin_REPLACE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_REPLACE(expr, ctx)

@app.route('/Builtin_STRDT', methods=['POST'])
def call_Builtin_STRDT():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRDT(expr, ctx)

@app.route('/Builtin_STRLANG', methods=['POST'])
def call_Builtin_STRLANG():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRLANG(expr, ctx)

@app.route('/Builtin_CONCAT', methods=['POST'])
def call_Builtin_CONCAT():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_CONCAT(expr, ctx)

@app.route('/Builtin_STRSTARTS', methods=['POST'])
def call_Builtin_STRSTARTS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRSTARTS(expr, ctx)

@app.route('/Builtin_STRENDS', methods=['POST'])
def call_Builtin_STRENDS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRENDS(expr, ctx)

@app.route('/Builtin_STRBEFORE', methods=['POST'])
def call_Builtin_STRBEFORE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRBEFORE(expr, ctx)

@app.route('/Builtin_STRAFTER', methods=['POST'])
def call_Builtin_STRAFTER():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRAFTER(expr, ctx)

@app.route('/Builtin_CONTAINS', methods=['POST'])
def call_Builtin_CONTAINS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_CONTAINS(expr, ctx)

@app.route('/Builtin_ENCODE_FOR_URI', methods=['POST'])
def call_Builtin_ENCODE_FOR_URI():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_ENCODE_FOR_URI(expr, ctx)

@app.route('/Builtin_SUBSTR', methods=['POST'])
def call_Builtin_SUBSTR():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return Builtin_SUBSTR(expr, ctx)

@app.route('/Builtin_STRLEN', methods=['POST'])
def call_Builtin_STRLEN():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STRLEN(e, ctx)

@app.route('/Builtin_STR', methods=['POST'])
def call_Builtin_STR():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_STR(e, ctx)

@app.route('/Builtin_LCASE', methods=['POST'])
def call_Builtin_LCASE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_LCASE(e, ctx)

@app.route('/Builtin_LANGMATCHES', methods=['POST'])
def call_Builtin_LANGMATCHES():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_LANGMATCHES(e, ctx)

@app.route('/Builtin_NOW', methods=['POST'])
def call_Builtin_NOW():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_NOW(e, ctx)

@app.route('/Builtin_YEAR', methods=['POST'])
def call_Builtin_YEAR():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_YEAR(e, ctx)

@app.route('/Builtin_MONTH', methods=['POST'])
def call_Builtin_MONTH():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_MONTH(e, ctx)

@app.route('/Builtin_DAY', methods=['POST'])
def call_Builtin_DAY():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_DAY(e, ctx)

@app.route('/Builtin_HOURS', methods=['POST'])
def call_Builtin_HOURS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_HOURS(e, ctx)

@app.route('/Builtin_MINUTES', methods=['POST'])
def call_Builtin_MINUTES():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_MINUTES(e, ctx)

@app.route('/Builtin_SECONDS', methods=['POST'])
def call_Builtin_SECONDS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_SECONDS(e, ctx)

@app.route('/Builtin_TIMEZONE', methods=['POST'])
def call_Builtin_TIMEZONE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_TIMEZONE(e, ctx)

@app.route('/Builtin_TZ', methods=['POST'])
def call_Builtin_TZ():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_TZ(e, ctx)

@app.route('/Builtin_UCASE', methods=['POST'])
def call_Builtin_UCASE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_UCASE(e, ctx)

@app.route('/Builtin_LANG', methods=['POST'])
def call_Builtin_LANG():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_LANG(e, ctx)

@app.route('/Builtin_DATATYPE', methods=['POST'])
def call_Builtin_DATATYPE():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_DATATYPE(e, ctx)

@app.route('/Builtin_sameTerm', methods=['POST'])
def call_Builtin_sameTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_sameTerm(e, ctx)

@app.route('/Builtin_BOUND', methods=['POST'])
def call_Builtin_BOUND():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_BOUND(e, ctx)

@app.route('/Builtin_EXISTS', methods=['POST'])
def call_Builtin_EXISTS():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Builtin_EXISTS(e, ctx)

@app.route('/register_custom_function', methods=['POST'])
def call_register_custom_function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    func = request_json.get("func")
    
    override = request_json.get("override")
    
    raw = request_json.get("raw")
    

    return register_custom_function(uri, func, override, raw)

@app.route('/custom_function', methods=['POST'])
def call_custom_function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    override = request_json.get("override")
    
    raw = request_json.get("raw")
    

    return custom_function(uri, override, raw)

@app.route('/unregister_custom_function', methods=['POST'])
def call_unregister_custom_function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    uri = request_json.get("uri")
    
    func = request_json.get("func")
    

    return unregister_custom_function(uri, func)

@app.route('/Function', methods=['POST'])
def call_Function():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return Function(e, ctx)

@app.route('/default_cast', methods=['POST'])
def call_default_cast():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return default_cast(e, ctx)

@app.route('/UnaryNot', methods=['POST'])
def call_UnaryNot():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return UnaryNot(expr, ctx)

@app.route('/UnaryMinus', methods=['POST'])
def call_UnaryMinus():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return UnaryMinus(expr, ctx)

@app.route('/UnaryPlus', methods=['POST'])
def call_UnaryPlus():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    ctx = request_json.get("ctx")
    

    return UnaryPlus(expr, ctx)

@app.route('/MultiplicativeExpression', methods=['POST'])
def call_MultiplicativeExpression():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return MultiplicativeExpression(e, ctx)

@app.route('/AdditiveExpression', methods=['POST'])
def call_AdditiveExpression():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return AdditiveExpression(e, ctx)

@app.route('/RelationalExpression', methods=['POST'])
def call_RelationalExpression():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return RelationalExpression(e, ctx)

@app.route('/ConditionalAndExpression', methods=['POST'])
def call_ConditionalAndExpression():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return ConditionalAndExpression(e, ctx)

@app.route('/ConditionalOrExpression', methods=['POST'])
def call_ConditionalOrExpression():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    
    ctx = request_json.get("ctx")
    

    return ConditionalOrExpression(e, ctx)

@app.route('/not_', methods=['POST'])
def call_not_():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    arg = request_json.get("arg")
    

    return not_(arg)

@app.route('/and_', methods=['POST'])
def call_and_():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return and_()

@app.route('/simplify', methods=['POST'])
def call_simplify():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    

    return simplify(expr)

@app.route('/literal', methods=['POST'])
def call_literal():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return literal(s)

@app.route('/datetime', methods=['POST'])
def call_datetime():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    

    return datetime(e)

@app.route('/date', methods=['POST'])
def call_date():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    

    return date(e)

@app.route('/string', methods=['POST'])
def call_string():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    s = request_json.get("s")
    

    return string(s)

@app.route('/numeric', methods=['POST'])
def call_numeric():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    

    return numeric(expr)

@app.route('/dateTimeObjects', methods=['POST'])
def call_dateTimeObjects():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    

    return dateTimeObjects(expr)

@app.route('/isCompatibleDateTimeDatatype', methods=['POST'])
def call_isCompatibleDateTimeDatatype():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj1 = request_json.get("obj1")
    
    dt1 = request_json.get("dt1")
    
    obj2 = request_json.get("obj2")
    
    dt2 = request_json.get("dt2")
    

    return isCompatibleDateTimeDatatype(obj1, dt1, obj2, dt2)

@app.route('/calculateDuration', methods=['POST'])
def call_calculateDuration():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj1 = request_json.get("obj1")
    
    obj2 = request_json.get("obj2")
    

    return calculateDuration(obj1, obj2)

@app.route('/calculateFinalDateTime', methods=['POST'])
def call_calculateFinalDateTime():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    obj1 = request_json.get("obj1")
    
    dt1 = request_json.get("dt1")
    
    obj2 = request_json.get("obj2")
    
    dt2 = request_json.get("dt2")
    
    operation = request_json.get("operation")
    

    return calculateFinalDateTime(obj1, dt1, obj2, dt2, operation)

@app.route('/EBV', methods=['POST'])
def call_EBV():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    rt = request_json.get("rt")
    

    return EBV(rt)

@app.route('/project', methods=['POST'])
def call_project():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    vars = request_json.get("vars")
    

    return project(vars)

@app.route('/disjointDomain', methods=['POST'])
def call_disjointDomain():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return disjointDomain(other)

@app.route('/compatible', methods=['POST'])
def call_compatible():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return compatible(other)

@app.route('/merge', methods=['POST'])
def call_merge():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    other = request_json.get("other")
    

    return merge(other)

@app.route('/now', methods=['POST'])
def call_now():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return now()

@app.route('/bnodes', methods=['POST'])
def call_bnodes():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return bnodes()

@app.route('/prologue', methods=['POST'])
def call_prologue():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return prologue()

@app.route('/forget', methods=['POST'])
def call_forget():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    before = request_json.get("before")
    
    _except = request_json.get("_except")
    

    return forget(before, _except)

@app.route('/remember', methods=['POST'])
def call_remember():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    these = request_json.get("these")
    

    return remember(these)

@app.route('/clone', methods=['POST'])
def call_clone():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bindings = request_json.get("bindings")
    

    return clone(bindings)

@app.route('/dataset', methods=['POST'])
def call_dataset():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return dataset()

@app.route('/load', methods=['POST'])
def call_load():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    default = request_json.get("default")
    
    into = request_json.get("into")
    

    return load(source, default, into)

@app.route('/get', methods=['POST'])
def call_get():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    key = request_json.get("key")
    
    default = request_json.get("default")
    

    return get(key, default)

@app.route('/solution', methods=['POST'])
def call_solution():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    vars = request_json.get("vars")
    

    return solution(vars)

@app.route('/pushGraph', methods=['POST'])
def call_pushGraph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graph = request_json.get("graph")
    

    return pushGraph(graph)

@app.route('/push', methods=['POST'])
def call_push():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return push()

@app.route('/clean', methods=['POST'])
def call_clean():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return clean()

@app.route('/thaw', methods=['POST'])
def call_thaw():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    frozenbindings = request_json.get("frozenbindings")
    

    return thaw(frozenbindings)

@app.route('/resolvePName', methods=['POST'])
def call_resolvePName():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    localname = request_json.get("localname")
    

    return resolvePName(prefix, localname)

@app.route('/bind', methods=['POST'])
def call_bind():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    prefix = request_json.get("prefix")
    
    uri = request_json.get("uri")
    

    return bind(prefix, uri)

@app.route('/absolutize', methods=['POST'])
def call_absolutize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    iri = request_json.get("iri")
    

    return absolutize(iri)

@app.route('/OrderBy', methods=['POST'])
def call_OrderBy():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    expr = request_json.get("expr")
    

    return OrderBy(p, expr)

@app.route('/ToMultiSet', methods=['POST'])
def call_ToMultiSet():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    

    return ToMultiSet(p)

@app.route('/Union', methods=['POST'])
def call_Union():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p1 = request_json.get("p1")
    
    p2 = request_json.get("p2")
    

    return Union(p1, p2)

@app.route('/Join', methods=['POST'])
def call_Join():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p1 = request_json.get("p1")
    
    p2 = request_json.get("p2")
    

    return Join(p1, p2)

@app.route('/Minus', methods=['POST'])
def call_Minus():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p1 = request_json.get("p1")
    
    p2 = request_json.get("p2")
    

    return Minus(p1, p2)

@app.route('/Graph', methods=['POST'])
def call_Graph():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term = request_json.get("term")
    
    graph = request_json.get("graph")
    

    return Graph(term, graph)

@app.route('/BGP', methods=['POST'])
def call_BGP():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    triples = request_json.get("triples")
    

    return BGP(triples)

@app.route('/LeftJoin', methods=['POST'])
def call_LeftJoin():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p1 = request_json.get("p1")
    
    p2 = request_json.get("p2")
    
    expr = request_json.get("expr")
    

    return LeftJoin(p1, p2, expr)

@app.route('/Filter', methods=['POST'])
def call_Filter():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    expr = request_json.get("expr")
    
    p = request_json.get("p")
    

    return Filter(expr, p)

@app.route('/Extend', methods=['POST'])
def call_Extend():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    expr = request_json.get("expr")
    
    var = request_json.get("var")
    

    return Extend(p, expr, var)

@app.route('/Values', methods=['POST'])
def call_Values():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    res = request_json.get("res")
    

    return Values(res)

@app.route('/Project', methods=['POST'])
def call_Project():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    PV = request_json.get("PV")
    

    return Project(p, PV)

@app.route('/Group', methods=['POST'])
def call_Group():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    expr = request_json.get("expr")
    

    return Group(p, expr)

@app.route('/reorderTriples', methods=['POST'])
def call_reorderTriples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l_ = request_json.get("l_")
    

    return reorderTriples(l_)

@app.route('/triples', methods=['POST'])
def call_triples():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    l = request_json.get("l")
    

    return triples(l)

@app.route('/translatePName', methods=['POST'])
def call_translatePName():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    prologue = request_json.get("prologue")
    

    return translatePName(p, prologue)

@app.route('/translatePath', methods=['POST'])
def call_translatePath():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    

    return translatePath(p)

@app.route('/translateExists', methods=['POST'])
def call_translateExists():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    e = request_json.get("e")
    

    return translateExists(e)

@app.route('/collectAndRemoveFilters', methods=['POST'])
def call_collectAndRemoveFilters():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    parts = request_json.get("parts")
    

    return collectAndRemoveFilters(parts)

@app.route('/translateGroupOrUnionGraphPattern', methods=['POST'])
def call_translateGroupOrUnionGraphPattern():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graphPattern = request_json.get("graphPattern")
    

    return translateGroupOrUnionGraphPattern(graphPattern)

@app.route('/translateGraphGraphPattern', methods=['POST'])
def call_translateGraphGraphPattern():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graphPattern = request_json.get("graphPattern")
    

    return translateGraphGraphPattern(graphPattern)

@app.route('/translateInlineData', methods=['POST'])
def call_translateInlineData():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graphPattern = request_json.get("graphPattern")
    

    return translateInlineData(graphPattern)

@app.route('/translateGroupGraphPattern', methods=['POST'])
def call_translateGroupGraphPattern():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    graphPattern = request_json.get("graphPattern")
    

    return translateGroupGraphPattern(graphPattern)

@app.route('/traverse', methods=['POST'])
def call_traverse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    tree = request_json.get("tree")
    
    visitPre = request_json.get("visitPre")
    
    visitPost = request_json.get("visitPost")
    
    complete = request_json.get("complete")
    

    return traverse(tree, visitPre, visitPost, complete)

@app.route('/translateAggregates', methods=['POST'])
def call_translateAggregates():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    
    M = request_json.get("M")
    

    return translateAggregates(q, M)

@app.route('/translateValues', methods=['POST'])
def call_translateValues():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    v = request_json.get("v")
    

    return translateValues(v)

@app.route('/translate', methods=['POST'])
def call_translate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    

    return translate(q)

@app.route('/simplify', methods=['POST'])
def call_simplify():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    n = request_json.get("n")
    

    return simplify(n)

@app.route('/analyse', methods=['POST'])
def call_analyse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    n = request_json.get("n")
    
    children = request_json.get("children")
    

    return analyse(n, children)

@app.route('/translatePrologue', methods=['POST'])
def call_translatePrologue():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    p = request_json.get("p")
    
    base = request_json.get("base")
    
    initNs = request_json.get("initNs")
    
    prologue = request_json.get("prologue")
    

    return translatePrologue(p, base, initNs, prologue)

@app.route('/translateQuads', methods=['POST'])
def call_translateQuads():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    quads = request_json.get("quads")
    

    return translateQuads(quads)

@app.route('/translateUpdate1', methods=['POST'])
def call_translateUpdate1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    u = request_json.get("u")
    
    prologue = request_json.get("prologue")
    

    return translateUpdate1(u, prologue)

@app.route('/translateUpdate', methods=['POST'])
def call_translateUpdate():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    
    base = request_json.get("base")
    
    initNs = request_json.get("initNs")
    

    return translateUpdate(q, base, initNs)

@app.route('/translateQuery', methods=['POST'])
def call_translateQuery():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    
    base = request_json.get("base")
    
    initNs = request_json.get("initNs")
    

    return translateQuery(q, base, initNs)

@app.route('/convert_node_arg', methods=['POST'])
def call_convert_node_arg():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node_arg = request_json.get("node_arg")
    

    return convert_node_arg(node_arg)

@app.route('/sparql_query_text', methods=['POST'])
def call_sparql_query_text():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    node = request_json.get("node")
    

    return sparql_query_text(node)

@app.route('/translateAlgebra', methods=['POST'])
def call_translateAlgebra():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    query_algebra = request_json.get("query_algebra")
    

    return translateAlgebra(query_algebra)

@app.route('/pprintAlgebra', methods=['POST'])
def call_pprintAlgebra():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    q = request_json.get("q")
    

    return pprintAlgebra(q)

@app.route('/dont_care', methods=['POST'])
def call_dont_care():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    row = request_json.get("row")
    

    return dont_care(row)

@app.route('/use_row', methods=['POST'])
def call_use_row():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    row = request_json.get("row")
    

    return use_row(row)

@app.route('/set_value', methods=['POST'])
def call_set_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    bindings = request_json.get("bindings")
    

    return set_value(bindings)

@app.route('/update', methods=['POST'])
def call_update():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    row = request_json.get("row")
    

    return update(row)

@app.route('/get_value', methods=['POST'])
def call_get_value():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_value()

@app.route('/eval_row', methods=['POST'])
def call_eval_row():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    row = request_json.get("row")
    

    return eval_row(row)

@app.route('/eval_full_row', methods=['POST'])
def call_eval_full_row():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    row = request_json.get("row")
    

    return eval_full_row(row)

@app.route('/type_safe_numbers', methods=['POST'])
def call_type_safe_numbers():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return type_safe_numbers()

@app.route('/compare', methods=['POST'])
def call_compare():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    val1 = request_json.get("val1")
    
    val2 = request_json.get("val2")
    

    return compare(val1, val2)

@app.route('/get_bindings', methods=['POST'])
def call_get_bindings():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return get_bindings()

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, encoding)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    content_type = request_json.get("content_type")
    

    return parse(source, content_type)

@app.route('/convertTerm', methods=['POST'])
def call_convertTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    t = request_json.get("t")
    

    return convertTerm(t)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    content_type = request_json.get("content_type")
    

    return parse(source, content_type)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, encoding)

@app.route('/parseJsonTerm', methods=['POST'])
def call_parseJsonTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    d = request_json.get("d")
    

    return parseJsonTerm(d)

@app.route('/termToJSON', methods=['POST'])
def call_termToJSON():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term = request_json.get("term")
    

    return termToJSON(term)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    content_type = request_json.get("content_type")
    

    return parse(source, content_type)

@app.route('/parseTerm', methods=['POST'])
def call_parseTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    element = request_json.get("element")
    

    return parseTerm(element)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, encoding)

@app.route('/write_header', methods=['POST'])
def call_write_header():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    allvarsL = request_json.get("allvarsL")
    

    return write_header(allvarsL)

@app.route('/write_ask', methods=['POST'])
def call_write_ask():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    val = request_json.get("val")
    

    return write_ask(val)

@app.route('/write_results_header', methods=['POST'])
def call_write_results_header():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return write_results_header()

@app.route('/write_start_result', methods=['POST'])
def call_write_start_result():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return write_start_result()

@app.route('/write_end_result', methods=['POST'])
def call_write_end_result():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return write_end_result()

@app.route('/write_binding', methods=['POST'])
def call_write_binding():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    val = request_json.get("val")
    

    return write_binding(name, val)

@app.route('/close', methods=['POST'])
def call_close():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return close()

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    content_type = request_json.get("content_type")
    

    return parse(source, content_type)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    
    content_type = request_json.get("content_type")
    

    return parse(source, content_type)

@app.route('/parseRow', methods=['POST'])
def call_parseRow():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    row = request_json.get("row")
    
    v = request_json.get("v")
    

    return parseRow(row, v)

@app.route('/convertTerm', methods=['POST'])
def call_convertTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    t = request_json.get("t")
    

    return convertTerm(t)

@app.route('/serialize', methods=['POST'])
def call_serialize():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    stream = request_json.get("stream")
    
    encoding = request_json.get("encoding")
    

    return serialize(stream, encoding)

@app.route('/serializeTerm', methods=['POST'])
def call_serializeTerm():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    term = request_json.get("term")
    
    encoding = request_json.get("encoding")
    

    return serializeTerm(term, encoding)

@app.route('/parse', methods=['POST'])
def call_parse():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    source = request_json.get("source")
    

    return parse(source)

@app.route('/customEval', methods=['POST'])
def call_customEval():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    ctx = request_json.get("ctx")
    
    part = request_json.get("part")
    

    return customEval(ctx, part)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/example_1', methods=['POST'])
def call_example_1():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return example_1()

@app.route('/example_2', methods=['POST'])
def call_example_2():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return example_2()

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/audit_hook', methods=['POST'])
def call_audit_hook():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    name = request_json.get("name")
    
    args = request_json.get("args")
    

    return audit_hook(name, args)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/infixowl_example', methods=['POST'])
def call_infixowl_example():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return infixowl_example()

@app.route('/http_open', methods=['POST'])
def call_http_open():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    req = request_json.get("req")
    

    return http_open(req)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()

@app.route('/clean_python', methods=['POST'])
def call_clean_python():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    input = request_json.get("input")
    

    return clean_python(input)

@app.route('/run', methods=['POST'])
def call_run():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    args = request_json.get("args")
    

    return run(args)

@app.route('/handle', methods=['POST'])
def call_handle():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    
    parse_result = request_json.get("parse_result")
    

    return handle(parse_result)

@app.route('/main', methods=['POST'])
def call_main():
    request_json = request.get_json(silent=True)

    # Extract parameters from request body
    

    return main()


if __name__ == "__main__":
    app.run(port=8080)